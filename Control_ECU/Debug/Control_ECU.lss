
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00002a02  00002a96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800072  00800072  00002aa8  2**0
                  ALLOC
  3 .stab         00003150  00000000  00000000  00002aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b8d  00000000  00000000  00005bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007785  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000078c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007a35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000967e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a569  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b318  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b478  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b705  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bed3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 b8 06 	jmp	0xd70	; 0xd70 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bd 14 	call	0x297a	; 0x297a <main>
      8a:	0c 94 ff 14 	jmp	0x29fe	; 0x29fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d8 14 	jmp	0x29b0	; 0x29b0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f4 14 	jmp	0x29e8	; 0x29e8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB |= (1<<RXEN) | (1<<TXEN);
     b54:	aa e2       	ldi	r26, 0x2A	; 42
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	ea e2       	ldi	r30, 0x2A	; 42
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	80 81       	ld	r24, Z
     b5e:	88 61       	ori	r24, 0x18	; 24
     b60:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC |= (1<<URSEL);
     b62:	a0 e4       	ldi	r26, 0x40	; 64
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e0 e4       	ldi	r30, 0x40	; 64
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	80 68       	ori	r24, 0x80	; 128
     b6e:	8c 93       	st	X, r24
    UCSRC |= (1<<UCSZ0) | (1<<UCSZ1);
     b70:	a0 e4       	ldi	r26, 0x40	; 64
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	e0 e4       	ldi	r30, 0x40	; 64
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	86 60       	ori	r24, 0x06	; 6
     b7c:	8c 93       	st	X, r24

    UCSRC |= ((Config_Ptr->parity) << 4); //Choose Parity Bits
     b7e:	a0 e4       	ldi	r26, 0x40	; 64
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	e0 e4       	ldi	r30, 0x40	; 64
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	28 2f       	mov	r18, r24
     b8a:	e9 81       	ldd	r30, Y+1	; 0x01
     b8c:	fa 81       	ldd	r31, Y+2	; 0x02
     b8e:	81 81       	ldd	r24, Z+1	; 0x01
     b90:	88 2f       	mov	r24, r24
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	82 95       	swap	r24
     b96:	92 95       	swap	r25
     b98:	90 7f       	andi	r25, 0xF0	; 240
     b9a:	98 27       	eor	r25, r24
     b9c:	80 7f       	andi	r24, 0xF0	; 240
     b9e:	98 27       	eor	r25, r24
     ba0:	82 2b       	or	r24, r18
     ba2:	8c 93       	st	X, r24


    if(Config_Ptr->bit_data)
     ba4:	e9 81       	ldd	r30, Y+1	; 0x01
     ba6:	fa 81       	ldd	r31, Y+2	; 0x02
     ba8:	80 81       	ld	r24, Z
     baa:	88 23       	and	r24, r24
     bac:	29 f1       	breq	.+74     	; 0xbf8 <UART_init+0xb2>
    {
    	UCSRC |= ((Config_Ptr->bit_data) << 6);
     bae:	a0 e4       	ldi	r26, 0x40	; 64
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e0 e4       	ldi	r30, 0x40	; 64
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	28 2f       	mov	r18, r24
     bba:	e9 81       	ldd	r30, Y+1	; 0x01
     bbc:	fa 81       	ldd	r31, Y+2	; 0x02
     bbe:	80 81       	ld	r24, Z
     bc0:	88 2f       	mov	r24, r24
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	00 24       	eor	r0, r0
     bc6:	96 95       	lsr	r25
     bc8:	87 95       	ror	r24
     bca:	07 94       	ror	r0
     bcc:	96 95       	lsr	r25
     bce:	87 95       	ror	r24
     bd0:	07 94       	ror	r0
     bd2:	98 2f       	mov	r25, r24
     bd4:	80 2d       	mov	r24, r0
     bd6:	82 2b       	or	r24, r18
     bd8:	8c 93       	st	X, r24

    	UCSRC |= (1<<UCPOL);
     bda:	a0 e4       	ldi	r26, 0x40	; 64
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e0 e4       	ldi	r30, 0x40	; 64
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	81 60       	ori	r24, 0x01	; 1
     be6:	8c 93       	st	X, r24

    	UBRRH = (Asynchronous_Normal >> 8);
     be8:	e0 e4       	ldi	r30, 0x40	; 64
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	10 82       	st	Z, r1
    	UBRRL = Asynchronous_Normal;
     bee:	e9 e2       	ldi	r30, 0x29	; 41
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	87 e6       	ldi	r24, 0x67	; 103
     bf4:	80 83       	st	Z, r24
     bf6:	25 c0       	rjmp	.+74     	; 0xc42 <UART_init+0xfc>
    }
	
    else
    {
    	UCSRC &= ~((Config_Ptr->bit_data) << 6);
     bf8:	a0 e4       	ldi	r26, 0x40	; 64
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	e0 e4       	ldi	r30, 0x40	; 64
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	28 2f       	mov	r18, r24
     c04:	e9 81       	ldd	r30, Y+1	; 0x01
     c06:	fa 81       	ldd	r31, Y+2	; 0x02
     c08:	80 81       	ld	r24, Z
     c0a:	88 2f       	mov	r24, r24
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	00 24       	eor	r0, r0
     c10:	96 95       	lsr	r25
     c12:	87 95       	ror	r24
     c14:	07 94       	ror	r0
     c16:	96 95       	lsr	r25
     c18:	87 95       	ror	r24
     c1a:	07 94       	ror	r0
     c1c:	98 2f       	mov	r25, r24
     c1e:	80 2d       	mov	r24, r0
     c20:	80 95       	com	r24
     c22:	82 23       	and	r24, r18
     c24:	8c 93       	st	X, r24
    	UCSRA |= (1<<U2X);
     c26:	ab e2       	ldi	r26, 0x2B	; 43
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	eb e2       	ldi	r30, 0x2B	; 43
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	82 60       	ori	r24, 0x02	; 2
     c32:	8c 93       	st	X, r24
    	UBRRH = (Asynchronous_doubleSpeed >> 8);
     c34:	e0 e4       	ldi	r30, 0x40	; 64
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	10 82       	st	Z, r1
    	UBRRL =Asynchronous_doubleSpeed;
     c3a:	e9 e2       	ldi	r30, 0x29	; 41
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	83 e3       	ldi	r24, 0x33	; 51
     c40:	80 83       	st	Z, r24
    }
}
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	0f 92       	push	r0
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
     c56:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     c58:	eb e2       	ldi	r30, 0x2B	; 43
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	88 2f       	mov	r24, r24
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	80 72       	andi	r24, 0x20	; 32
     c64:	90 70       	andi	r25, 0x00	; 0
     c66:	00 97       	sbiw	r24, 0x00	; 0
     c68:	b9 f3       	breq	.-18     	; 0xc58 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     c6a:	ec e2       	ldi	r30, 0x2C	; 44
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     c72:	0f 90       	pop	r0
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	08 95       	ret

00000c7a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     c7a:	df 93       	push	r29
     c7c:	cf 93       	push	r28
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     c82:	eb e2       	ldi	r30, 0x2B	; 43
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	88 23       	and	r24, r24
     c8a:	dc f7       	brge	.-10     	; 0xc82 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
     c8c:	ec e2       	ldi	r30, 0x2C	; 44
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
}
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	08 95       	ret

00000c98 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	00 d0       	rcall	.+0      	; 0xc9e <UART_sendString+0x6>
     c9e:	0f 92       	push	r0
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	9b 83       	std	Y+3, r25	; 0x03
     ca6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     ca8:	19 82       	std	Y+1, r1	; 0x01
     caa:	0e c0       	rjmp	.+28     	; 0xcc8 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	28 2f       	mov	r18, r24
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	9b 81       	ldd	r25, Y+3	; 0x03
     cb6:	fc 01       	movw	r30, r24
     cb8:	e2 0f       	add	r30, r18
     cba:	f3 1f       	adc	r31, r19
     cbc:	80 81       	ld	r24, Z
     cbe:	0e 94 26 06 	call	0xc4c	; 0xc4c <UART_sendByte>
		i++;
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	8f 5f       	subi	r24, 0xFF	; 255
     cc6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	9b 81       	ldd	r25, Y+3	; 0x03
     cd2:	fc 01       	movw	r30, r24
     cd4:	e2 0f       	add	r30, r18
     cd6:	f3 1f       	adc	r31, r19
     cd8:	80 81       	ld	r24, Z
     cda:	88 23       	and	r24, r24
     cdc:	39 f7       	brne	.-50     	; 0xcac <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	08 95       	ret

00000cea <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	00 d0       	rcall	.+0      	; 0xcf4 <UART_receiveString+0xa>
     cf4:	0f 92       	push	r0
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
     cfa:	9b 83       	std	Y+3, r25	; 0x03
     cfc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     cfe:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	9b 81       	ldd	r25, Y+3	; 0x03
     d0a:	8c 01       	movw	r16, r24
     d0c:	02 0f       	add	r16, r18
     d0e:	13 1f       	adc	r17, r19
     d10:	0e 94 3d 06 	call	0xc7a	; 0xc7a <UART_recieveByte>
     d14:	f8 01       	movw	r30, r16
     d16:	80 83       	st	Z, r24
     d18:	0f c0       	rjmp	.+30     	; 0xd38 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	8f 5f       	subi	r24, 0xFF	; 255
     d1e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	28 2f       	mov	r18, r24
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	9b 81       	ldd	r25, Y+3	; 0x03
     d2a:	8c 01       	movw	r16, r24
     d2c:	02 0f       	add	r16, r18
     d2e:	13 1f       	adc	r17, r19
     d30:	0e 94 3d 06 	call	0xc7a	; 0xc7a <UART_recieveByte>
     d34:	f8 01       	movw	r30, r16
     d36:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	9b 81       	ldd	r25, Y+3	; 0x03
     d42:	fc 01       	movw	r30, r24
     d44:	e2 0f       	add	r30, r18
     d46:	f3 1f       	adc	r31, r19
     d48:	80 81       	ld	r24, Z
     d4a:	83 32       	cpi	r24, 0x23	; 35
     d4c:	31 f7       	brne	.-52     	; 0xd1a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	8a 81       	ldd	r24, Y+2	; 0x02
     d56:	9b 81       	ldd	r25, Y+3	; 0x03
     d58:	fc 01       	movw	r30, r24
     d5a:	e2 0f       	add	r30, r18
     d5c:	f3 1f       	adc	r31, r19
     d5e:	10 82       	st	Z, r1
}
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	08 95       	ret

00000d70 <__vector_9>:
/*******************************************************************************
 *                                ISR                                          *
 *******************************************************************************/
/* Timer1 OVERFLOW mode */
ISR(TIMER1_OVF_vect)
{
     d70:	1f 92       	push	r1
     d72:	0f 92       	push	r0
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	0f 92       	push	r0
     d78:	11 24       	eor	r1, r1
     d7a:	2f 93       	push	r18
     d7c:	3f 93       	push	r19
     d7e:	4f 93       	push	r20
     d80:	5f 93       	push	r21
     d82:	6f 93       	push	r22
     d84:	7f 93       	push	r23
     d86:	8f 93       	push	r24
     d88:	9f 93       	push	r25
     d8a:	af 93       	push	r26
     d8c:	bf 93       	push	r27
     d8e:	ef 93       	push	r30
     d90:	ff 93       	push	r31
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
	if (*g_Timer1CallBackPtr != NULL_PTR)
     d9a:	80 91 72 00 	lds	r24, 0x0072
     d9e:	90 91 73 00 	lds	r25, 0x0073
     da2:	00 97       	sbiw	r24, 0x00	; 0
     da4:	29 f0       	breq	.+10     	; 0xdb0 <__vector_9+0x40>
	{
		(*g_Timer1CallBackPtr)();
     da6:	e0 91 72 00 	lds	r30, 0x0072
     daa:	f0 91 73 00 	lds	r31, 0x0073
     dae:	09 95       	icall
	}
}
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	ff 91       	pop	r31
     db6:	ef 91       	pop	r30
     db8:	bf 91       	pop	r27
     dba:	af 91       	pop	r26
     dbc:	9f 91       	pop	r25
     dbe:	8f 91       	pop	r24
     dc0:	7f 91       	pop	r23
     dc2:	6f 91       	pop	r22
     dc4:	5f 91       	pop	r21
     dc6:	4f 91       	pop	r20
     dc8:	3f 91       	pop	r19
     dca:	2f 91       	pop	r18
     dcc:	0f 90       	pop	r0
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	0f 90       	pop	r0
     dd2:	1f 90       	pop	r1
     dd4:	18 95       	reti

00000dd6 <__vector_7>:

/* Timer1 COMPARE mode */
ISR(TIMER1_COMPA_vect)
{
     dd6:	1f 92       	push	r1
     dd8:	0f 92       	push	r0
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	0f 92       	push	r0
     dde:	11 24       	eor	r1, r1
     de0:	2f 93       	push	r18
     de2:	3f 93       	push	r19
     de4:	4f 93       	push	r20
     de6:	5f 93       	push	r21
     de8:	6f 93       	push	r22
     dea:	7f 93       	push	r23
     dec:	8f 93       	push	r24
     dee:	9f 93       	push	r25
     df0:	af 93       	push	r26
     df2:	bf 93       	push	r27
     df4:	ef 93       	push	r30
     df6:	ff 93       	push	r31
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	if (*g_Timer1CallBackPtr != NULL_PTR)
     e00:	80 91 72 00 	lds	r24, 0x0072
     e04:	90 91 73 00 	lds	r25, 0x0073
     e08:	00 97       	sbiw	r24, 0x00	; 0
     e0a:	29 f0       	breq	.+10     	; 0xe16 <__vector_7+0x40>
	{
		(*g_Timer1CallBackPtr)();
     e0c:	e0 91 72 00 	lds	r30, 0x0072
     e10:	f0 91 73 00 	lds	r31, 0x0073
     e14:	09 95       	icall
	}
}
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	ff 91       	pop	r31
     e1c:	ef 91       	pop	r30
     e1e:	bf 91       	pop	r27
     e20:	af 91       	pop	r26
     e22:	9f 91       	pop	r25
     e24:	8f 91       	pop	r24
     e26:	7f 91       	pop	r23
     e28:	6f 91       	pop	r22
     e2a:	5f 91       	pop	r21
     e2c:	4f 91       	pop	r20
     e2e:	3f 91       	pop	r19
     e30:	2f 91       	pop	r18
     e32:	0f 90       	pop	r0
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	0f 90       	pop	r0
     e38:	1f 90       	pop	r1
     e3a:	18 95       	reti

00000e3c <Timer1_init>:
/*
 * Description: A function that initialize a timer1 with dynamic configurations.
 *
 */
void Timer1_init(const Timer1_Configtype * Config_Ptr)
{
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	00 d0       	rcall	.+0      	; 0xe42 <Timer1_init+0x6>
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	9a 83       	std	Y+2, r25	; 0x02
     e48:	89 83       	std	Y+1, r24	; 0x01
        TCCR1A =0;
     e4a:	ef e4       	ldi	r30, 0x4F	; 79
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	10 82       	st	Z, r1
		SET_BIT(TCCR1A,FOC1A); /* for non-PWM mode */
     e50:	af e4       	ldi	r26, 0x4F	; 79
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	ef e4       	ldi	r30, 0x4F	; 79
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	88 60       	ori	r24, 0x08	; 8
     e5c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
     e5e:	af e4       	ldi	r26, 0x4F	; 79
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	ef e4       	ldi	r30, 0x4F	; 79
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	84 60       	ori	r24, 0x04	; 4
     e6a:	8c 93       	st	X, r24
		TCCR1B = Config_Ptr->prescale;
     e6c:	ae e4       	ldi	r26, 0x4E	; 78
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e9 81       	ldd	r30, Y+1	; 0x01
     e72:	fa 81       	ldd	r31, Y+2	; 0x02
     e74:	85 81       	ldd	r24, Z+5	; 0x05
     e76:	8c 93       	st	X, r24
		TCNT1 = Config_Ptr->initialvalue;
     e78:	ac e4       	ldi	r26, 0x4C	; 76
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e9 81       	ldd	r30, Y+1	; 0x01
     e7e:	fa 81       	ldd	r31, Y+2	; 0x02
     e80:	81 81       	ldd	r24, Z+1	; 0x01
     e82:	92 81       	ldd	r25, Z+2	; 0x02
     e84:	11 96       	adiw	r26, 0x01	; 1
     e86:	9c 93       	st	X, r25
     e88:	8e 93       	st	-X, r24

		if( (Config_Ptr -> mode) == NORMAL )
     e8a:	e9 81       	ldd	r30, Y+1	; 0x01
     e8c:	fa 81       	ldd	r31, Y+2	; 0x02
     e8e:	80 81       	ld	r24, Z
     e90:	88 23       	and	r24, r24
     e92:	79 f4       	brne	.+30     	; 0xeb2 <Timer1_init+0x76>
		{
			/* Enable interrupts for overflow mode */
			SET_BIT(TIMSK,TOIE1);
     e94:	a9 e5       	ldi	r26, 0x59	; 89
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e9 e5       	ldi	r30, 0x59	; 89
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	84 60       	ori	r24, 0x04	; 4
     ea0:	8c 93       	st	X, r24
			/* Enable overflow flag */
			SET_BIT(TIFR,TOV1);
     ea2:	a8 e5       	ldi	r26, 0x58	; 88
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e8 e5       	ldi	r30, 0x58	; 88
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	84 60       	ori	r24, 0x04	; 4
     eae:	8c 93       	st	X, r24
     eb0:	23 c0       	rjmp	.+70     	; 0xef8 <Timer1_init+0xbc>
		}
		else if ( (Config_Ptr -> mode) == COMPARE )
     eb2:	e9 81       	ldd	r30, Y+1	; 0x01
     eb4:	fa 81       	ldd	r31, Y+2	; 0x02
     eb6:	80 81       	ld	r24, Z
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	f1 f4       	brne	.+60     	; 0xef8 <Timer1_init+0xbc>
		{
			SET_BIT(TCCR1B,WGM12);
     ebc:	ae e4       	ldi	r26, 0x4E	; 78
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	ee e4       	ldi	r30, 0x4E	; 78
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	88 60       	ori	r24, 0x08	; 8
     ec8:	8c 93       	st	X, r24
			OCR1A = Config_Ptr -> comparevalue;
     eca:	aa e4       	ldi	r26, 0x4A	; 74
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e9 81       	ldd	r30, Y+1	; 0x01
     ed0:	fa 81       	ldd	r31, Y+2	; 0x02
     ed2:	83 81       	ldd	r24, Z+3	; 0x03
     ed4:	94 81       	ldd	r25, Z+4	; 0x04
     ed6:	11 96       	adiw	r26, 0x01	; 1
     ed8:	9c 93       	st	X, r25
     eda:	8e 93       	st	-X, r24
			SET_BIT(TIMSK,OCIE1A); /* enable interrupts for CTC mode */
     edc:	a9 e5       	ldi	r26, 0x59	; 89
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e9 e5       	ldi	r30, 0x59	; 89
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	80 61       	ori	r24, 0x10	; 16
     ee8:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF1A); /* enable CTC flag */
     eea:	a8 e5       	ldi	r26, 0x58	; 88
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e8 e5       	ldi	r30, 0x58	; 88
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	80 61       	ori	r24, 0x10	; 16
     ef6:	8c 93       	st	X, r24
		}
}
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <Timer1_deInit>:
/*
 * Description: A function that Deinitialize a timer1 with dynamic configurations.
 *
 */
void Timer1_deInit(void)
{
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
	TCCR1A =0;
     f0a:	ef e4       	ldi	r30, 0x4F	; 79
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	10 82       	st	Z, r1
	TCCR1B = 0; /* disable clock */
     f10:	ee e4       	ldi	r30, 0x4E	; 78
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	10 82       	st	Z, r1
	TCNT1 = 0;
     f16:	ec e4       	ldi	r30, 0x4C	; 76
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	11 82       	std	Z+1, r1	; 0x01
     f1c:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK, TOIE1); /* disable interrupts for overflow mode */
     f1e:	a9 e5       	ldi	r26, 0x59	; 89
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e9 e5       	ldi	r30, 0x59	; 89
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	8b 7f       	andi	r24, 0xFB	; 251
     f2a:	8c 93       	st	X, r24
	OCR1A = 0;  /* clear compare value for CTC mode */
     f2c:	ea e4       	ldi	r30, 0x4A	; 74
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	11 82       	std	Z+1, r1	; 0x01
     f32:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK, OCIE1A); /* disable interrupts for CTC mode */
     f34:	a9 e5       	ldi	r26, 0x59	; 89
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e9 e5       	ldi	r30, 0x59	; 89
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	8f 7e       	andi	r24, 0xEF	; 239
     f40:	8c 93       	st	X, r24
	g_Timer1CallBackPtr = NULL_PTR;
     f42:	10 92 73 00 	sts	0x0073, r1
     f46:	10 92 72 00 	sts	0x0072, r1
}
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <Timer1_setCallBack>:
/*
 * Description: A function that Call Back A Function.
 *
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	00 d0       	rcall	.+0      	; 0xf56 <Timer1_setCallBack+0x6>
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	9a 83       	std	Y+2, r25	; 0x02
     f5c:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1CallBackPtr = a_ptr;
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	9a 81       	ldd	r25, Y+2	; 0x02
     f62:	90 93 73 00 	sts	0x0073, r25
     f66:	80 93 72 00 	sts	0x0072, r24
}
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <Timer1_setValue>:
/*
 * Description: A function that set a new value.
 *
 */
void Timer1_setValue (uint8 newValue)
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	0f 92       	push	r0
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = newValue;
     f80:	ec e4       	ldi	r30, 0x4C	; 76
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	88 2f       	mov	r24, r24
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	91 83       	std	Z+1, r25	; 0x01
     f8c:	80 83       	st	Z, r24
}
     f8e:	0f 90       	pop	r0
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <Timer1_clearValue>:
/*
 * Description: A function that clear the value.
 *
 */
void Timer1_clearValue(void)
{
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
     f9e:	ec e4       	ldi	r30, 0x4C	; 76
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	11 82       	std	Z+1, r1	; 0x01
     fa4:	10 82       	st	Z, r1
}
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <TWI_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void TWI_init(const TWI_ConfigType * Config_Ptr)
{
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <TWI_init+0x6>
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	9a 83       	std	Y+2, r25	; 0x02
     fb8:	89 83       	std	Y+1, r24	; 0x01
    TWBR = Config_Ptr->bit_rate;
     fba:	a0 e2       	ldi	r26, 0x20	; 32
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e9 81       	ldd	r30, Y+1	; 0x01
     fc0:	fa 81       	ldd	r31, Y+2	; 0x02
     fc2:	82 81       	ldd	r24, Z+2	; 0x02
     fc4:	8c 93       	st	X, r24
    TWSR |= (TWSR & ~ 0X03) ;
     fc6:	a1 e2       	ldi	r26, 0x21	; 33
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e1 e2       	ldi	r30, 0x21	; 33
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	98 2f       	mov	r25, r24
     fd2:	e1 e2       	ldi	r30, 0x21	; 33
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	8c 7f       	andi	r24, 0xFC	; 252
     fda:	89 2b       	or	r24, r25
     fdc:	8c 93       	st	X, r24
	
    TWAR = 	  (~0X01 & Config_Ptr->address );
     fde:	a2 e2       	ldi	r26, 0x22	; 34
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e9 81       	ldd	r30, Y+1	; 0x01
     fe4:	fa 81       	ldd	r31, Y+2	; 0x02
     fe6:	81 81       	ldd	r24, Z+1	; 0x01
     fe8:	8e 7f       	andi	r24, 0xFE	; 254
     fea:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
     fec:	e6 e5       	ldi	r30, 0x56	; 86
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	84 e0       	ldi	r24, 0x04	; 4
     ff2:	80 83       	st	Z, r24
}
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <TWI_start>:

void TWI_start(void)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1006:	e6 e5       	ldi	r30, 0x56	; 86
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	84 ea       	ldi	r24, 0xA4	; 164
    100c:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    100e:	e6 e5       	ldi	r30, 0x56	; 86
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	88 23       	and	r24, r24
    1016:	dc f7       	brge	.-10     	; 0x100e <TWI_start+0x10>
}
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <TWI_stop>:

void TWI_stop(void)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1026:	e6 e5       	ldi	r30, 0x56	; 86
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	84 e9       	ldi	r24, 0x94	; 148
    102c:	80 83       	st	Z, r24
}
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	0f 92       	push	r0
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1040:	e3 e2       	ldi	r30, 0x23	; 35
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1048:	e6 e5       	ldi	r30, 0x56	; 86
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	84 e8       	ldi	r24, 0x84	; 132
    104e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1050:	e6 e5       	ldi	r30, 0x56	; 86
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	88 23       	and	r24, r24
    1058:	dc f7       	brge	.-10     	; 0x1050 <TWI_writeByte+0x1c>
}
    105a:	0f 90       	pop	r0
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	08 95       	ret

00001062 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    106a:	e6 e5       	ldi	r30, 0x56	; 86
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	84 ec       	ldi	r24, 0xC4	; 196
    1070:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1072:	e6 e5       	ldi	r30, 0x56	; 86
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	88 23       	and	r24, r24
    107a:	dc f7       	brge	.-10     	; 0x1072 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    107c:	e3 e2       	ldi	r30, 0x23	; 35
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
}
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1090:	e6 e5       	ldi	r30, 0x56	; 86
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	84 e8       	ldi	r24, 0x84	; 132
    1096:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1098:	e6 e5       	ldi	r30, 0x56	; 86
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	88 23       	and	r24, r24
    10a0:	dc f7       	brge	.-10     	; 0x1098 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    10a2:	e3 e2       	ldi	r30, 0x23	; 35
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
}
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	0f 92       	push	r0
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    10b8:	e1 e2       	ldi	r30, 0x21	; 33
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	88 7f       	andi	r24, 0xF8	; 248
    10c0:	89 83       	std	Y+1, r24	; 0x01
    return status;
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c4:	0f 90       	pop	r0
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <GPIO_setupPinDirection+0x6>
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <GPIO_setupPinDirection+0x8>
    10d4:	0f 92       	push	r0
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	89 83       	std	Y+1, r24	; 0x01
    10dc:	6a 83       	std	Y+2, r22	; 0x02
    10de:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	88 30       	cpi	r24, 0x08	; 8
    10e4:	08 f0       	brcs	.+2      	; 0x10e8 <GPIO_setupPinDirection+0x1c>
    10e6:	d5 c0       	rjmp	.+426    	; 0x1292 <GPIO_setupPinDirection+0x1c6>
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	84 30       	cpi	r24, 0x04	; 4
    10ec:	08 f0       	brcs	.+2      	; 0x10f0 <GPIO_setupPinDirection+0x24>
    10ee:	d1 c0       	rjmp	.+418    	; 0x1292 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	3d 83       	std	Y+5, r19	; 0x05
    10f8:	2c 83       	std	Y+4, r18	; 0x04
    10fa:	8c 81       	ldd	r24, Y+4	; 0x04
    10fc:	9d 81       	ldd	r25, Y+5	; 0x05
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	91 05       	cpc	r25, r1
    1102:	09 f4       	brne	.+2      	; 0x1106 <GPIO_setupPinDirection+0x3a>
    1104:	43 c0       	rjmp	.+134    	; 0x118c <GPIO_setupPinDirection+0xc0>
    1106:	2c 81       	ldd	r18, Y+4	; 0x04
    1108:	3d 81       	ldd	r19, Y+5	; 0x05
    110a:	22 30       	cpi	r18, 0x02	; 2
    110c:	31 05       	cpc	r19, r1
    110e:	2c f4       	brge	.+10     	; 0x111a <GPIO_setupPinDirection+0x4e>
    1110:	8c 81       	ldd	r24, Y+4	; 0x04
    1112:	9d 81       	ldd	r25, Y+5	; 0x05
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	71 f0       	breq	.+28     	; 0x1134 <GPIO_setupPinDirection+0x68>
    1118:	bc c0       	rjmp	.+376    	; 0x1292 <GPIO_setupPinDirection+0x1c6>
    111a:	2c 81       	ldd	r18, Y+4	; 0x04
    111c:	3d 81       	ldd	r19, Y+5	; 0x05
    111e:	22 30       	cpi	r18, 0x02	; 2
    1120:	31 05       	cpc	r19, r1
    1122:	09 f4       	brne	.+2      	; 0x1126 <GPIO_setupPinDirection+0x5a>
    1124:	5f c0       	rjmp	.+190    	; 0x11e4 <GPIO_setupPinDirection+0x118>
    1126:	8c 81       	ldd	r24, Y+4	; 0x04
    1128:	9d 81       	ldd	r25, Y+5	; 0x05
    112a:	83 30       	cpi	r24, 0x03	; 3
    112c:	91 05       	cpc	r25, r1
    112e:	09 f4       	brne	.+2      	; 0x1132 <GPIO_setupPinDirection+0x66>
    1130:	85 c0       	rjmp	.+266    	; 0x123c <GPIO_setupPinDirection+0x170>
    1132:	af c0       	rjmp	.+350    	; 0x1292 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	81 30       	cpi	r24, 0x01	; 1
    1138:	a1 f4       	brne	.+40     	; 0x1162 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    113a:	aa e3       	ldi	r26, 0x3A	; 58
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	ea e3       	ldi	r30, 0x3A	; 58
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	48 2f       	mov	r20, r24
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 2e       	mov	r0, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <GPIO_setupPinDirection+0x8c>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	0a 94       	dec	r0
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <GPIO_setupPinDirection+0x88>
    115c:	84 2b       	or	r24, r20
    115e:	8c 93       	st	X, r24
    1160:	98 c0       	rjmp	.+304    	; 0x1292 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1162:	aa e3       	ldi	r26, 0x3A	; 58
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	ea e3       	ldi	r30, 0x3A	; 58
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	48 2f       	mov	r20, r24
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 2e       	mov	r0, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <GPIO_setupPinDirection+0xb4>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	0a 94       	dec	r0
    1182:	e2 f7       	brpl	.-8      	; 0x117c <GPIO_setupPinDirection+0xb0>
    1184:	80 95       	com	r24
    1186:	84 23       	and	r24, r20
    1188:	8c 93       	st	X, r24
    118a:	83 c0       	rjmp	.+262    	; 0x1292 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	81 30       	cpi	r24, 0x01	; 1
    1190:	a1 f4       	brne	.+40     	; 0x11ba <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1192:	a7 e3       	ldi	r26, 0x37	; 55
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e7 e3       	ldi	r30, 0x37	; 55
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <GPIO_setupPinDirection+0xe4>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <GPIO_setupPinDirection+0xe0>
    11b4:	84 2b       	or	r24, r20
    11b6:	8c 93       	st	X, r24
    11b8:	6c c0       	rjmp	.+216    	; 0x1292 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    11ba:	a7 e3       	ldi	r26, 0x37	; 55
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e7 e3       	ldi	r30, 0x37	; 55
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 2e       	mov	r0, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <GPIO_setupPinDirection+0x10c>
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	0a 94       	dec	r0
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <GPIO_setupPinDirection+0x108>
    11dc:	80 95       	com	r24
    11de:	84 23       	and	r24, r20
    11e0:	8c 93       	st	X, r24
    11e2:	57 c0       	rjmp	.+174    	; 0x1292 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	a1 f4       	brne	.+40     	; 0x1212 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    11ea:	a4 e3       	ldi	r26, 0x34	; 52
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e4 e3       	ldi	r30, 0x34	; 52
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	48 2f       	mov	r20, r24
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	02 2e       	mov	r0, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <GPIO_setupPinDirection+0x13c>
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	0a 94       	dec	r0
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <GPIO_setupPinDirection+0x138>
    120c:	84 2b       	or	r24, r20
    120e:	8c 93       	st	X, r24
    1210:	40 c0       	rjmp	.+128    	; 0x1292 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1212:	a4 e3       	ldi	r26, 0x34	; 52
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e4 e3       	ldi	r30, 0x34	; 52
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	48 2f       	mov	r20, r24
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	02 2e       	mov	r0, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <GPIO_setupPinDirection+0x164>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	0a 94       	dec	r0
    1232:	e2 f7       	brpl	.-8      	; 0x122c <GPIO_setupPinDirection+0x160>
    1234:	80 95       	com	r24
    1236:	84 23       	and	r24, r20
    1238:	8c 93       	st	X, r24
    123a:	2b c0       	rjmp	.+86     	; 0x1292 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	a1 f4       	brne	.+40     	; 0x126a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1242:	a1 e3       	ldi	r26, 0x31	; 49
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e1 e3       	ldi	r30, 0x31	; 49
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	48 2f       	mov	r20, r24
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	02 2e       	mov	r0, r18
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <GPIO_setupPinDirection+0x194>
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	0a 94       	dec	r0
    1262:	e2 f7       	brpl	.-8      	; 0x125c <GPIO_setupPinDirection+0x190>
    1264:	84 2b       	or	r24, r20
    1266:	8c 93       	st	X, r24
    1268:	14 c0       	rjmp	.+40     	; 0x1292 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    126a:	a1 e3       	ldi	r26, 0x31	; 49
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e1 e3       	ldi	r30, 0x31	; 49
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 2e       	mov	r0, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <GPIO_setupPinDirection+0x1bc>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <GPIO_setupPinDirection+0x1b8>
    128c:	80 95       	com	r24
    128e:	84 23       	and	r24, r20
    1290:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	08 95       	ret

000012a2 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <GPIO_writePin+0x6>
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <GPIO_writePin+0x8>
    12aa:	0f 92       	push	r0
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	6a 83       	std	Y+2, r22	; 0x02
    12b4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	88 30       	cpi	r24, 0x08	; 8
    12ba:	08 f0       	brcs	.+2      	; 0x12be <GPIO_writePin+0x1c>
    12bc:	d5 c0       	rjmp	.+426    	; 0x1468 <GPIO_writePin+0x1c6>
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	84 30       	cpi	r24, 0x04	; 4
    12c2:	08 f0       	brcs	.+2      	; 0x12c6 <GPIO_writePin+0x24>
    12c4:	d1 c0       	rjmp	.+418    	; 0x1468 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	3d 83       	std	Y+5, r19	; 0x05
    12ce:	2c 83       	std	Y+4, r18	; 0x04
    12d0:	8c 81       	ldd	r24, Y+4	; 0x04
    12d2:	9d 81       	ldd	r25, Y+5	; 0x05
    12d4:	81 30       	cpi	r24, 0x01	; 1
    12d6:	91 05       	cpc	r25, r1
    12d8:	09 f4       	brne	.+2      	; 0x12dc <GPIO_writePin+0x3a>
    12da:	43 c0       	rjmp	.+134    	; 0x1362 <GPIO_writePin+0xc0>
    12dc:	2c 81       	ldd	r18, Y+4	; 0x04
    12de:	3d 81       	ldd	r19, Y+5	; 0x05
    12e0:	22 30       	cpi	r18, 0x02	; 2
    12e2:	31 05       	cpc	r19, r1
    12e4:	2c f4       	brge	.+10     	; 0x12f0 <GPIO_writePin+0x4e>
    12e6:	8c 81       	ldd	r24, Y+4	; 0x04
    12e8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	71 f0       	breq	.+28     	; 0x130a <GPIO_writePin+0x68>
    12ee:	bc c0       	rjmp	.+376    	; 0x1468 <GPIO_writePin+0x1c6>
    12f0:	2c 81       	ldd	r18, Y+4	; 0x04
    12f2:	3d 81       	ldd	r19, Y+5	; 0x05
    12f4:	22 30       	cpi	r18, 0x02	; 2
    12f6:	31 05       	cpc	r19, r1
    12f8:	09 f4       	brne	.+2      	; 0x12fc <GPIO_writePin+0x5a>
    12fa:	5f c0       	rjmp	.+190    	; 0x13ba <GPIO_writePin+0x118>
    12fc:	8c 81       	ldd	r24, Y+4	; 0x04
    12fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1300:	83 30       	cpi	r24, 0x03	; 3
    1302:	91 05       	cpc	r25, r1
    1304:	09 f4       	brne	.+2      	; 0x1308 <GPIO_writePin+0x66>
    1306:	85 c0       	rjmp	.+266    	; 0x1412 <GPIO_writePin+0x170>
    1308:	af c0       	rjmp	.+350    	; 0x1468 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	a1 f4       	brne	.+40     	; 0x1338 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1310:	ab e3       	ldi	r26, 0x3B	; 59
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	eb e3       	ldi	r30, 0x3B	; 59
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <GPIO_writePin+0x8c>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <GPIO_writePin+0x88>
    1332:	84 2b       	or	r24, r20
    1334:	8c 93       	st	X, r24
    1336:	98 c0       	rjmp	.+304    	; 0x1468 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1338:	ab e3       	ldi	r26, 0x3B	; 59
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	eb e3       	ldi	r30, 0x3B	; 59
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <GPIO_writePin+0xb4>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <GPIO_writePin+0xb0>
    135a:	80 95       	com	r24
    135c:	84 23       	and	r24, r20
    135e:	8c 93       	st	X, r24
    1360:	83 c0       	rjmp	.+262    	; 0x1468 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	a1 f4       	brne	.+40     	; 0x1390 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1368:	a8 e3       	ldi	r26, 0x38	; 56
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e8 e3       	ldi	r30, 0x38	; 56
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 2e       	mov	r0, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <GPIO_writePin+0xe4>
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	0a 94       	dec	r0
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <GPIO_writePin+0xe0>
    138a:	84 2b       	or	r24, r20
    138c:	8c 93       	st	X, r24
    138e:	6c c0       	rjmp	.+216    	; 0x1468 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1390:	a8 e3       	ldi	r26, 0x38	; 56
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e8 e3       	ldi	r30, 0x38	; 56
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	48 2f       	mov	r20, r24
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 2e       	mov	r0, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <GPIO_writePin+0x10c>
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <GPIO_writePin+0x108>
    13b2:	80 95       	com	r24
    13b4:	84 23       	and	r24, r20
    13b6:	8c 93       	st	X, r24
    13b8:	57 c0       	rjmp	.+174    	; 0x1468 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	81 30       	cpi	r24, 0x01	; 1
    13be:	a1 f4       	brne	.+40     	; 0x13e8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    13c0:	a5 e3       	ldi	r26, 0x35	; 53
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e5 e3       	ldi	r30, 0x35	; 53
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	48 2f       	mov	r20, r24
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 2e       	mov	r0, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <GPIO_writePin+0x13c>
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	0a 94       	dec	r0
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <GPIO_writePin+0x138>
    13e2:	84 2b       	or	r24, r20
    13e4:	8c 93       	st	X, r24
    13e6:	40 c0       	rjmp	.+128    	; 0x1468 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    13e8:	a5 e3       	ldi	r26, 0x35	; 53
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e5 e3       	ldi	r30, 0x35	; 53
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	48 2f       	mov	r20, r24
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 2e       	mov	r0, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <GPIO_writePin+0x164>
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	0a 94       	dec	r0
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <GPIO_writePin+0x160>
    140a:	80 95       	com	r24
    140c:	84 23       	and	r24, r20
    140e:	8c 93       	st	X, r24
    1410:	2b c0       	rjmp	.+86     	; 0x1468 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	a1 f4       	brne	.+40     	; 0x1440 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1418:	a2 e3       	ldi	r26, 0x32	; 50
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e2 e3       	ldi	r30, 0x32	; 50
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <GPIO_writePin+0x194>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <GPIO_writePin+0x190>
    143a:	84 2b       	or	r24, r20
    143c:	8c 93       	st	X, r24
    143e:	14 c0       	rjmp	.+40     	; 0x1468 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1440:	a2 e3       	ldi	r26, 0x32	; 50
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e2 e3       	ldi	r30, 0x32	; 50
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	48 2f       	mov	r20, r24
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 2e       	mov	r0, r18
    1458:	02 c0       	rjmp	.+4      	; 0x145e <GPIO_writePin+0x1bc>
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	0a 94       	dec	r0
    1460:	e2 f7       	brpl	.-8      	; 0x145a <GPIO_writePin+0x1b8>
    1462:	80 95       	com	r24
    1464:	84 23       	and	r24, r20
    1466:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	00 d0       	rcall	.+0      	; 0x147e <GPIO_readPin+0x6>
    147e:	00 d0       	rcall	.+0      	; 0x1480 <GPIO_readPin+0x8>
    1480:	0f 92       	push	r0
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    1486:	8a 83       	std	Y+2, r24	; 0x02
    1488:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    148a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	88 30       	cpi	r24, 0x08	; 8
    1490:	08 f0       	brcs	.+2      	; 0x1494 <GPIO_readPin+0x1c>
    1492:	84 c0       	rjmp	.+264    	; 0x159c <GPIO_readPin+0x124>
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	84 30       	cpi	r24, 0x04	; 4
    1498:	08 f0       	brcs	.+2      	; 0x149c <GPIO_readPin+0x24>
    149a:	80 c0       	rjmp	.+256    	; 0x159c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	3d 83       	std	Y+5, r19	; 0x05
    14a4:	2c 83       	std	Y+4, r18	; 0x04
    14a6:	4c 81       	ldd	r20, Y+4	; 0x04
    14a8:	5d 81       	ldd	r21, Y+5	; 0x05
    14aa:	41 30       	cpi	r20, 0x01	; 1
    14ac:	51 05       	cpc	r21, r1
    14ae:	79 f1       	breq	.+94     	; 0x150e <GPIO_readPin+0x96>
    14b0:	8c 81       	ldd	r24, Y+4	; 0x04
    14b2:	9d 81       	ldd	r25, Y+5	; 0x05
    14b4:	82 30       	cpi	r24, 0x02	; 2
    14b6:	91 05       	cpc	r25, r1
    14b8:	34 f4       	brge	.+12     	; 0x14c6 <GPIO_readPin+0x4e>
    14ba:	2c 81       	ldd	r18, Y+4	; 0x04
    14bc:	3d 81       	ldd	r19, Y+5	; 0x05
    14be:	21 15       	cp	r18, r1
    14c0:	31 05       	cpc	r19, r1
    14c2:	69 f0       	breq	.+26     	; 0x14de <GPIO_readPin+0x66>
    14c4:	6b c0       	rjmp	.+214    	; 0x159c <GPIO_readPin+0x124>
    14c6:	4c 81       	ldd	r20, Y+4	; 0x04
    14c8:	5d 81       	ldd	r21, Y+5	; 0x05
    14ca:	42 30       	cpi	r20, 0x02	; 2
    14cc:	51 05       	cpc	r21, r1
    14ce:	b9 f1       	breq	.+110    	; 0x153e <GPIO_readPin+0xc6>
    14d0:	8c 81       	ldd	r24, Y+4	; 0x04
    14d2:	9d 81       	ldd	r25, Y+5	; 0x05
    14d4:	83 30       	cpi	r24, 0x03	; 3
    14d6:	91 05       	cpc	r25, r1
    14d8:	09 f4       	brne	.+2      	; 0x14dc <GPIO_readPin+0x64>
    14da:	49 c0       	rjmp	.+146    	; 0x156e <GPIO_readPin+0xf6>
    14dc:	5f c0       	rjmp	.+190    	; 0x159c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    14de:	e9 e3       	ldi	r30, 0x39	; 57
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	88 2f       	mov	r24, r24
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	a9 01       	movw	r20, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <GPIO_readPin+0x7e>
    14f2:	55 95       	asr	r21
    14f4:	47 95       	ror	r20
    14f6:	8a 95       	dec	r24
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <GPIO_readPin+0x7a>
    14fa:	ca 01       	movw	r24, r20
    14fc:	81 70       	andi	r24, 0x01	; 1
    14fe:	90 70       	andi	r25, 0x00	; 0
    1500:	88 23       	and	r24, r24
    1502:	19 f0       	breq	.+6      	; 0x150a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	89 83       	std	Y+1, r24	; 0x01
    1508:	49 c0       	rjmp	.+146    	; 0x159c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    150a:	19 82       	std	Y+1, r1	; 0x01
    150c:	47 c0       	rjmp	.+142    	; 0x159c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    150e:	e6 e3       	ldi	r30, 0x36	; 54
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	88 2f       	mov	r24, r24
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	a9 01       	movw	r20, r18
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <GPIO_readPin+0xae>
    1522:	55 95       	asr	r21
    1524:	47 95       	ror	r20
    1526:	8a 95       	dec	r24
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <GPIO_readPin+0xaa>
    152a:	ca 01       	movw	r24, r20
    152c:	81 70       	andi	r24, 0x01	; 1
    152e:	90 70       	andi	r25, 0x00	; 0
    1530:	88 23       	and	r24, r24
    1532:	19 f0       	breq	.+6      	; 0x153a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	89 83       	std	Y+1, r24	; 0x01
    1538:	31 c0       	rjmp	.+98     	; 0x159c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    153a:	19 82       	std	Y+1, r1	; 0x01
    153c:	2f c0       	rjmp	.+94     	; 0x159c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    153e:	e3 e3       	ldi	r30, 0x33	; 51
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	88 2f       	mov	r24, r24
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	a9 01       	movw	r20, r18
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <GPIO_readPin+0xde>
    1552:	55 95       	asr	r21
    1554:	47 95       	ror	r20
    1556:	8a 95       	dec	r24
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <GPIO_readPin+0xda>
    155a:	ca 01       	movw	r24, r20
    155c:	81 70       	andi	r24, 0x01	; 1
    155e:	90 70       	andi	r25, 0x00	; 0
    1560:	88 23       	and	r24, r24
    1562:	19 f0       	breq	.+6      	; 0x156a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	89 83       	std	Y+1, r24	; 0x01
    1568:	19 c0       	rjmp	.+50     	; 0x159c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    156a:	19 82       	std	Y+1, r1	; 0x01
    156c:	17 c0       	rjmp	.+46     	; 0x159c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    156e:	e0 e3       	ldi	r30, 0x30	; 48
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	88 2f       	mov	r24, r24
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	a9 01       	movw	r20, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <GPIO_readPin+0x10e>
    1582:	55 95       	asr	r21
    1584:	47 95       	ror	r20
    1586:	8a 95       	dec	r24
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <GPIO_readPin+0x10a>
    158a:	ca 01       	movw	r24, r20
    158c:	81 70       	andi	r24, 0x01	; 1
    158e:	90 70       	andi	r25, 0x00	; 0
    1590:	88 23       	and	r24, r24
    1592:	19 f0       	breq	.+6      	; 0x159a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	89 83       	std	Y+1, r24	; 0x01
    1598:	01 c0       	rjmp	.+2      	; 0x159c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    159a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    159c:	89 81       	ldd	r24, Y+1	; 0x01
}
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <GPIO_setupPortDirection+0x6>
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <GPIO_setupPortDirection+0x8>
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	89 83       	std	Y+1, r24	; 0x01
    15bc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	84 30       	cpi	r24, 0x04	; 4
    15c2:	90 f5       	brcc	.+100    	; 0x1628 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	3c 83       	std	Y+4, r19	; 0x04
    15cc:	2b 83       	std	Y+3, r18	; 0x03
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	9c 81       	ldd	r25, Y+4	; 0x04
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	91 05       	cpc	r25, r1
    15d6:	d1 f0       	breq	.+52     	; 0x160c <GPIO_setupPortDirection+0x5e>
    15d8:	2b 81       	ldd	r18, Y+3	; 0x03
    15da:	3c 81       	ldd	r19, Y+4	; 0x04
    15dc:	22 30       	cpi	r18, 0x02	; 2
    15de:	31 05       	cpc	r19, r1
    15e0:	2c f4       	brge	.+10     	; 0x15ec <GPIO_setupPortDirection+0x3e>
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	9c 81       	ldd	r25, Y+4	; 0x04
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	61 f0       	breq	.+24     	; 0x1602 <GPIO_setupPortDirection+0x54>
    15ea:	1e c0       	rjmp	.+60     	; 0x1628 <GPIO_setupPortDirection+0x7a>
    15ec:	2b 81       	ldd	r18, Y+3	; 0x03
    15ee:	3c 81       	ldd	r19, Y+4	; 0x04
    15f0:	22 30       	cpi	r18, 0x02	; 2
    15f2:	31 05       	cpc	r19, r1
    15f4:	81 f0       	breq	.+32     	; 0x1616 <GPIO_setupPortDirection+0x68>
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	83 30       	cpi	r24, 0x03	; 3
    15fc:	91 05       	cpc	r25, r1
    15fe:	81 f0       	breq	.+32     	; 0x1620 <GPIO_setupPortDirection+0x72>
    1600:	13 c0       	rjmp	.+38     	; 0x1628 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1602:	ea e3       	ldi	r30, 0x3A	; 58
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	80 83       	st	Z, r24
    160a:	0e c0       	rjmp	.+28     	; 0x1628 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    160c:	e7 e3       	ldi	r30, 0x37	; 55
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	80 83       	st	Z, r24
    1614:	09 c0       	rjmp	.+18     	; 0x1628 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1616:	e4 e3       	ldi	r30, 0x34	; 52
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	80 83       	st	Z, r24
    161e:	04 c0       	rjmp	.+8      	; 0x1628 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1620:	e1 e3       	ldi	r30, 0x31	; 49
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	80 83       	st	Z, r24
			break;
		}
	}
}
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	00 d0       	rcall	.+0      	; 0x163c <GPIO_writePort+0x6>
    163c:	00 d0       	rcall	.+0      	; 0x163e <GPIO_writePort+0x8>
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	84 30       	cpi	r24, 0x04	; 4
    164a:	90 f5       	brcc	.+100    	; 0x16b0 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	3c 83       	std	Y+4, r19	; 0x04
    1654:	2b 83       	std	Y+3, r18	; 0x03
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	9c 81       	ldd	r25, Y+4	; 0x04
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	91 05       	cpc	r25, r1
    165e:	d1 f0       	breq	.+52     	; 0x1694 <GPIO_writePort+0x5e>
    1660:	2b 81       	ldd	r18, Y+3	; 0x03
    1662:	3c 81       	ldd	r19, Y+4	; 0x04
    1664:	22 30       	cpi	r18, 0x02	; 2
    1666:	31 05       	cpc	r19, r1
    1668:	2c f4       	brge	.+10     	; 0x1674 <GPIO_writePort+0x3e>
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	9c 81       	ldd	r25, Y+4	; 0x04
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	61 f0       	breq	.+24     	; 0x168a <GPIO_writePort+0x54>
    1672:	1e c0       	rjmp	.+60     	; 0x16b0 <GPIO_writePort+0x7a>
    1674:	2b 81       	ldd	r18, Y+3	; 0x03
    1676:	3c 81       	ldd	r19, Y+4	; 0x04
    1678:	22 30       	cpi	r18, 0x02	; 2
    167a:	31 05       	cpc	r19, r1
    167c:	81 f0       	breq	.+32     	; 0x169e <GPIO_writePort+0x68>
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	9c 81       	ldd	r25, Y+4	; 0x04
    1682:	83 30       	cpi	r24, 0x03	; 3
    1684:	91 05       	cpc	r25, r1
    1686:	81 f0       	breq	.+32     	; 0x16a8 <GPIO_writePort+0x72>
    1688:	13 c0       	rjmp	.+38     	; 0x16b0 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    168a:	eb e3       	ldi	r30, 0x3B	; 59
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	80 83       	st	Z, r24
    1692:	0e c0       	rjmp	.+28     	; 0x16b0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1694:	e8 e3       	ldi	r30, 0x38	; 56
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	80 83       	st	Z, r24
    169c:	09 c0       	rjmp	.+18     	; 0x16b0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    169e:	e5 e3       	ldi	r30, 0x35	; 53
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	80 83       	st	Z, r24
    16a6:	04 c0       	rjmp	.+8      	; 0x16b0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    16a8:	e2 e3       	ldi	r30, 0x32	; 50
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	80 83       	st	Z, r24
			break;
		}
	}
}
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	08 95       	ret

000016be <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <GPIO_readPort+0x6>
    16c4:	00 d0       	rcall	.+0      	; 0x16c6 <GPIO_readPort+0x8>
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    16cc:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	84 30       	cpi	r24, 0x04	; 4
    16d2:	90 f5       	brcc	.+100    	; 0x1738 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	3c 83       	std	Y+4, r19	; 0x04
    16dc:	2b 83       	std	Y+3, r18	; 0x03
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	9c 81       	ldd	r25, Y+4	; 0x04
    16e2:	81 30       	cpi	r24, 0x01	; 1
    16e4:	91 05       	cpc	r25, r1
    16e6:	d1 f0       	breq	.+52     	; 0x171c <GPIO_readPort+0x5e>
    16e8:	2b 81       	ldd	r18, Y+3	; 0x03
    16ea:	3c 81       	ldd	r19, Y+4	; 0x04
    16ec:	22 30       	cpi	r18, 0x02	; 2
    16ee:	31 05       	cpc	r19, r1
    16f0:	2c f4       	brge	.+10     	; 0x16fc <GPIO_readPort+0x3e>
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	9c 81       	ldd	r25, Y+4	; 0x04
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	61 f0       	breq	.+24     	; 0x1712 <GPIO_readPort+0x54>
    16fa:	1e c0       	rjmp	.+60     	; 0x1738 <GPIO_readPort+0x7a>
    16fc:	2b 81       	ldd	r18, Y+3	; 0x03
    16fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1700:	22 30       	cpi	r18, 0x02	; 2
    1702:	31 05       	cpc	r19, r1
    1704:	81 f0       	breq	.+32     	; 0x1726 <GPIO_readPort+0x68>
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	9c 81       	ldd	r25, Y+4	; 0x04
    170a:	83 30       	cpi	r24, 0x03	; 3
    170c:	91 05       	cpc	r25, r1
    170e:	81 f0       	breq	.+32     	; 0x1730 <GPIO_readPort+0x72>
    1710:	13 c0       	rjmp	.+38     	; 0x1738 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1712:	e9 e3       	ldi	r30, 0x39	; 57
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	0e c0       	rjmp	.+28     	; 0x1738 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    171c:	e6 e3       	ldi	r30, 0x36	; 54
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	09 c0       	rjmp	.+18     	; 0x1738 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1726:	e3 e3       	ldi	r30, 0x33	; 51
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	89 83       	std	Y+1, r24	; 0x01
    172e:	04 c0       	rjmp	.+8      	; 0x1738 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1730:	e0 e3       	ldi	r30, 0x30	; 48
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1738:	89 81       	ldd	r24, Y+1	; 0x01
}
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <EEPROM_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void EEPROM_init(void)
{
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	00 d0       	rcall	.+0      	; 0x174e <EEPROM_init+0x6>
    174e:	0f 92       	push	r0
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
	TWI_ConfigType twiConfig = {1 , 400};
    1754:	83 e0       	ldi	r24, 0x03	; 3
    1756:	fe 01       	movw	r30, r28
    1758:	31 96       	adiw	r30, 0x01	; 1
    175a:	df 01       	movw	r26, r30
    175c:	98 2f       	mov	r25, r24
    175e:	1d 92       	st	X+, r1
    1760:	9a 95       	dec	r25
    1762:	e9 f7       	brne	.-6      	; 0x175e <EEPROM_init+0x16>
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	89 83       	std	Y+1, r24	; 0x01
    1768:	80 e9       	ldi	r24, 0x90	; 144
    176a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_init(&twiConfig);
    176c:	ce 01       	movw	r24, r28
    176e:	01 96       	adiw	r24, 0x01	; 1
    1770:	0e 94 d6 07 	call	0xfac	; 0xfac <TWI_init>
}
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	08 95       	ret

00001780 <EEPROM_writeByte>:


uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	00 d0       	rcall	.+0      	; 0x1786 <EEPROM_writeByte+0x6>
    1786:	00 d0       	rcall	.+0      	; 0x1788 <EEPROM_writeByte+0x8>
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	9a 83       	std	Y+2, r25	; 0x02
    178e:	89 83       	std	Y+1, r24	; 0x01
    1790:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1792:	0e 94 ff 07 	call	0xffe	; 0xffe <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1796:	0e 94 57 08 	call	0x10ae	; 0x10ae <TWI_getStatus>
    179a:	88 30       	cpi	r24, 0x08	; 8
    179c:	11 f0       	breq	.+4      	; 0x17a2 <EEPROM_writeByte+0x22>
        return ERROR;
    179e:	1c 82       	std	Y+4, r1	; 0x04
    17a0:	28 c0       	rjmp	.+80     	; 0x17f2 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	9a 81       	ldd	r25, Y+2	; 0x02
    17a6:	80 70       	andi	r24, 0x00	; 0
    17a8:	97 70       	andi	r25, 0x07	; 7
    17aa:	88 0f       	add	r24, r24
    17ac:	89 2f       	mov	r24, r25
    17ae:	88 1f       	adc	r24, r24
    17b0:	99 0b       	sbc	r25, r25
    17b2:	91 95       	neg	r25
    17b4:	80 6a       	ori	r24, 0xA0	; 160
    17b6:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    17ba:	0e 94 57 08 	call	0x10ae	; 0x10ae <TWI_getStatus>
    17be:	88 31       	cpi	r24, 0x18	; 24
    17c0:	11 f0       	breq	.+4      	; 0x17c6 <EEPROM_writeByte+0x46>
        return ERROR; 
    17c2:	1c 82       	std	Y+4, r1	; 0x04
    17c4:	16 c0       	rjmp	.+44     	; 0x17f2 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    17cc:	0e 94 57 08 	call	0x10ae	; 0x10ae <TWI_getStatus>
    17d0:	88 32       	cpi	r24, 0x28	; 40
    17d2:	11 f0       	breq	.+4      	; 0x17d8 <EEPROM_writeByte+0x58>
        return ERROR;
    17d4:	1c 82       	std	Y+4, r1	; 0x04
    17d6:	0d c0       	rjmp	.+26     	; 0x17f2 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    17de:	0e 94 57 08 	call	0x10ae	; 0x10ae <TWI_getStatus>
    17e2:	88 32       	cpi	r24, 0x28	; 40
    17e4:	11 f0       	breq	.+4      	; 0x17ea <EEPROM_writeByte+0x6a>
        return ERROR;
    17e6:	1c 82       	std	Y+4, r1	; 0x04
    17e8:	04 c0       	rjmp	.+8      	; 0x17f2 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    17ea:	0e 94 0f 08 	call	0x101e	; 0x101e <TWI_stop>
	
    return SUCCESS;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	8c 83       	std	Y+4, r24	; 0x04
    17f2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	08 95       	ret

00001802 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1802:	df 93       	push	r29
    1804:	cf 93       	push	r28
    1806:	00 d0       	rcall	.+0      	; 0x1808 <EEPROM_readByte+0x6>
    1808:	00 d0       	rcall	.+0      	; 0x180a <EEPROM_readByte+0x8>
    180a:	0f 92       	push	r0
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
    1810:	9a 83       	std	Y+2, r25	; 0x02
    1812:	89 83       	std	Y+1, r24	; 0x01
    1814:	7c 83       	std	Y+4, r23	; 0x04
    1816:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1818:	0e 94 ff 07 	call	0xffe	; 0xffe <TWI_start>
    if (TWI_getStatus() != TWI_START)
    181c:	0e 94 57 08 	call	0x10ae	; 0x10ae <TWI_getStatus>
    1820:	88 30       	cpi	r24, 0x08	; 8
    1822:	11 f0       	breq	.+4      	; 0x1828 <EEPROM_readByte+0x26>
        return ERROR;
    1824:	1d 82       	std	Y+5, r1	; 0x05
    1826:	44 c0       	rjmp	.+136    	; 0x18b0 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	9a 81       	ldd	r25, Y+2	; 0x02
    182c:	80 70       	andi	r24, 0x00	; 0
    182e:	97 70       	andi	r25, 0x07	; 7
    1830:	88 0f       	add	r24, r24
    1832:	89 2f       	mov	r24, r25
    1834:	88 1f       	adc	r24, r24
    1836:	99 0b       	sbc	r25, r25
    1838:	91 95       	neg	r25
    183a:	80 6a       	ori	r24, 0xA0	; 160
    183c:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1840:	0e 94 57 08 	call	0x10ae	; 0x10ae <TWI_getStatus>
    1844:	88 31       	cpi	r24, 0x18	; 24
    1846:	11 f0       	breq	.+4      	; 0x184c <EEPROM_readByte+0x4a>
        return ERROR;
    1848:	1d 82       	std	Y+5, r1	; 0x05
    184a:	32 c0       	rjmp	.+100    	; 0x18b0 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1852:	0e 94 57 08 	call	0x10ae	; 0x10ae <TWI_getStatus>
    1856:	88 32       	cpi	r24, 0x28	; 40
    1858:	11 f0       	breq	.+4      	; 0x185e <EEPROM_readByte+0x5c>
        return ERROR;
    185a:	1d 82       	std	Y+5, r1	; 0x05
    185c:	29 c0       	rjmp	.+82     	; 0x18b0 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    185e:	0e 94 ff 07 	call	0xffe	; 0xffe <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1862:	0e 94 57 08 	call	0x10ae	; 0x10ae <TWI_getStatus>
    1866:	80 31       	cpi	r24, 0x10	; 16
    1868:	11 f0       	breq	.+4      	; 0x186e <EEPROM_readByte+0x6c>
        return ERROR;
    186a:	1d 82       	std	Y+5, r1	; 0x05
    186c:	21 c0       	rjmp	.+66     	; 0x18b0 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	9a 81       	ldd	r25, Y+2	; 0x02
    1872:	80 70       	andi	r24, 0x00	; 0
    1874:	97 70       	andi	r25, 0x07	; 7
    1876:	88 0f       	add	r24, r24
    1878:	89 2f       	mov	r24, r25
    187a:	88 1f       	adc	r24, r24
    187c:	99 0b       	sbc	r25, r25
    187e:	91 95       	neg	r25
    1880:	81 6a       	ori	r24, 0xA1	; 161
    1882:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1886:	0e 94 57 08 	call	0x10ae	; 0x10ae <TWI_getStatus>
    188a:	80 34       	cpi	r24, 0x40	; 64
    188c:	11 f0       	breq	.+4      	; 0x1892 <EEPROM_readByte+0x90>
        return ERROR;
    188e:	1d 82       	std	Y+5, r1	; 0x05
    1890:	0f c0       	rjmp	.+30     	; 0x18b0 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1892:	0e 94 44 08 	call	0x1088	; 0x1088 <TWI_readByteWithNACK>
    1896:	eb 81       	ldd	r30, Y+3	; 0x03
    1898:	fc 81       	ldd	r31, Y+4	; 0x04
    189a:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    189c:	0e 94 57 08 	call	0x10ae	; 0x10ae <TWI_getStatus>
    18a0:	88 35       	cpi	r24, 0x58	; 88
    18a2:	11 f0       	breq	.+4      	; 0x18a8 <EEPROM_readByte+0xa6>
        return ERROR;
    18a4:	1d 82       	std	Y+5, r1	; 0x05
    18a6:	04 c0       	rjmp	.+8      	; 0x18b0 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    18a8:	0e 94 0f 08 	call	0x101e	; 0x101e <TWI_stop>

    return SUCCESS;
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	8d 83       	std	Y+5, r24	; 0x05
    18b0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <DcMotor_Init>:
 * [Description] : Function that setup the direction for the two motor pins through the GPIO driver.
 *
 * [Returns]: void
 */
void DcMotor_Init(void)
{
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
	/*Set motor pins as output pins*/
	GPIO_setupPinDirection (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_1,PIN_OUTPUT);
    18ca:	82 e0       	ldi	r24, 0x02	; 2
    18cc:	64 e0       	ldi	r22, 0x04	; 4
    18ce:	41 e0       	ldi	r20, 0x01	; 1
    18d0:	0e 94 66 08 	call	0x10cc	; 0x10cc <GPIO_setupPinDirection>
	GPIO_setupPinDirection (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_2,PIN_OUTPUT);
    18d4:	82 e0       	ldi	r24, 0x02	; 2
    18d6:	65 e0       	ldi	r22, 0x05	; 5
    18d8:	41 e0       	ldi	r20, 0x01	; 1
    18da:	0e 94 66 08 	call	0x10cc	; 0x10cc <GPIO_setupPinDirection>



	/*Stop the motor at first*/
	GPIO_writePin (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_1,LOGIC_LOW);
    18de:	82 e0       	ldi	r24, 0x02	; 2
    18e0:	64 e0       	ldi	r22, 0x04	; 4
    18e2:	40 e0       	ldi	r20, 0x00	; 0
    18e4:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_writePin>
	GPIO_writePin (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_2,LOGIC_LOW);
    18e8:	82 e0       	ldi	r24, 0x02	; 2
    18ea:	65 e0       	ldi	r22, 0x05	; 5
    18ec:	40 e0       	ldi	r20, 0x00	; 0
    18ee:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_writePin>

}
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <DcMotor_Rotate>:
 * [Description] : Function that responsible for rotate the DC Motor CW/ or A-CW or stop the motor based on the state input state value.
 *
 * [Returns]: void
 */
void DcMotor_Rotate(DcMotor_State state)
{
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	0f 92       	push	r0
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	89 83       	std	Y+1, r24	; 0x01
	if (state == STOP)
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	88 23       	and	r24, r24
    1908:	59 f4       	brne	.+22     	; 0x1920 <DcMotor_Rotate+0x28>
	{
		/*Stop the motor*/
		GPIO_writePin (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_1,LOGIC_LOW);
    190a:	82 e0       	ldi	r24, 0x02	; 2
    190c:	64 e0       	ldi	r22, 0x04	; 4
    190e:	40 e0       	ldi	r20, 0x00	; 0
    1910:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_writePin>
		GPIO_writePin (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_2,LOGIC_LOW);
    1914:	82 e0       	ldi	r24, 0x02	; 2
    1916:	65 e0       	ldi	r22, 0x05	; 5
    1918:	40 e0       	ldi	r20, 0x00	; 0
    191a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_writePin>
    191e:	1b c0       	rjmp	.+54     	; 0x1956 <DcMotor_Rotate+0x5e>
	}

	else if (state == CLOCKWISE)
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	81 30       	cpi	r24, 0x01	; 1
    1924:	59 f4       	brne	.+22     	; 0x193c <DcMotor_Rotate+0x44>
	{
		/*Rotate Clockwise*/
		GPIO_writePin (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_1,LOGIC_LOW);
    1926:	82 e0       	ldi	r24, 0x02	; 2
    1928:	64 e0       	ldi	r22, 0x04	; 4
    192a:	40 e0       	ldi	r20, 0x00	; 0
    192c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_writePin>
		GPIO_writePin (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_2,LOGIC_HIGH);
    1930:	82 e0       	ldi	r24, 0x02	; 2
    1932:	65 e0       	ldi	r22, 0x05	; 5
    1934:	41 e0       	ldi	r20, 0x01	; 1
    1936:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_writePin>
    193a:	0d c0       	rjmp	.+26     	; 0x1956 <DcMotor_Rotate+0x5e>
	}

	else if (state == ANTICLOCKWISE)
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	82 30       	cpi	r24, 0x02	; 2
    1940:	51 f4       	brne	.+20     	; 0x1956 <DcMotor_Rotate+0x5e>
	{
		/*Rotate AntiClockwise*/
		GPIO_writePin (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_1,LOGIC_HIGH);
    1942:	82 e0       	ldi	r24, 0x02	; 2
    1944:	64 e0       	ldi	r22, 0x04	; 4
    1946:	41 e0       	ldi	r20, 0x01	; 1
    1948:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_writePin>
		GPIO_writePin (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_2,LOGIC_LOW);
    194c:	82 e0       	ldi	r24, 0x02	; 2
    194e:	65 e0       	ldi	r22, 0x05	; 5
    1950:	40 e0       	ldi	r20, 0x00	; 0
    1952:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_writePin>
	}
}
    1956:	0f 90       	pop	r0
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	08 95       	ret

0000195e <Buzzer_init>:
/*
 * Description: A function that initialize the buzzer.
 *
 */
void Buzzer_init(void)
{
    195e:	df 93       	push	r29
    1960:	cf 93       	push	r28
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection (BUZZER_PORT_ID , BUZZER_PIN_1 , PIN_OUTPUT);
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	60 e0       	ldi	r22, 0x00	; 0
    196a:	41 e0       	ldi	r20, 0x01	; 1
    196c:	0e 94 66 08 	call	0x10cc	; 0x10cc <GPIO_setupPinDirection>


	GPIO_writePin (BUZZER_PORT_ID , BUZZER_PIN_1 , LOGIC_LOW);
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	60 e0       	ldi	r22, 0x00	; 0
    1974:	40 e0       	ldi	r20, 0x00	; 0
    1976:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_writePin>
}
    197a:	cf 91       	pop	r28
    197c:	df 91       	pop	r29
    197e:	08 95       	ret

00001980 <Buzzer_on>:
/*
 * Description: A function that start the buzzer.
 *
 */
void Buzzer_on(void)
{
    1980:	df 93       	push	r29
    1982:	cf 93       	push	r28
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin (BUZZER_PORT_ID , BUZZER_PIN_1 , LOGIC_HIGH);
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	60 e0       	ldi	r22, 0x00	; 0
    198c:	41 e0       	ldi	r20, 0x01	; 1
    198e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_writePin>
}
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <Buzzer_off>:
/*
 * Description: A function that stop the buzzer.
 *
 */
void Buzzer_off(void)
{
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin (BUZZER_PORT_ID , BUZZER_PIN_1 , LOGIC_LOW);
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	60 e0       	ldi	r22, 0x00	; 0
    19a4:	40 e0       	ldi	r20, 0x00	; 0
    19a6:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_writePin>
}
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	08 95       	ret

000019b0 <start>:

Timer1_Configtype timerConfig = {COMPARE,0,7813,Prescale_1024};
UART_ConfigType uartConfig = {Asynchronous,Even,one};

void start(void)
{
    19b0:	0f 93       	push	r16
    19b2:	1f 93       	push	r17
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
    19bc:	c0 58       	subi	r28, 0x80	; 128
    19be:	d0 40       	sbci	r29, 0x00	; 0
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7);
    19ca:	af e5       	ldi	r26, 0x5F	; 95
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	ef e5       	ldi	r30, 0x5F	; 95
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	80 68       	ori	r24, 0x80	; 128
    19d6:	8c 93       	st	X, r24

	uint8 password[5] , confirmPassword[5] , passwordVerified , command;

	Buzzer_init();
    19d8:	0e 94 af 0c 	call	0x195e	; 0x195e <Buzzer_init>
	DcMotor_Init();
    19dc:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <DcMotor_Init>
	Timer1_setCallBack(timerHandler);
    19e0:	82 e4       	ldi	r24, 0x42	; 66
    19e2:	93 e1       	ldi	r25, 0x13	; 19
    19e4:	0e 94 a8 07 	call	0xf50	; 0xf50 <Timer1_setCallBack>
	UART_init(&uartConfig);
    19e8:	8e e6       	ldi	r24, 0x6E	; 110
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>
	EEPROM_init();
    19f0:	0e 94 a4 0b 	call	0x1748	; 0x1748 <EEPROM_init>
    19f4:	d1 c0       	rjmp	.+418    	; 0x1b98 <start+0x1e8>


	while(passwordVerified == 0)
	{
		receivePassword(password);
    19f6:	ce 01       	movw	r24, r28
    19f8:	8d 58       	subi	r24, 0x8D	; 141
    19fa:	9f 4f       	sbci	r25, 0xFF	; 255
    19fc:	0e 94 34 12 	call	0x2468	; 0x2468 <receivePassword>

		receivePassword(confirmPassword);
    1a00:	ce 01       	movw	r24, r28
    1a02:	88 58       	subi	r24, 0x88	; 136
    1a04:	9f 4f       	sbci	r25, 0xFF	; 255
    1a06:	0e 94 34 12 	call	0x2468	; 0x2468 <receivePassword>

		passwordVerified = verifyPassword(password, confirmPassword);
    1a0a:	ce 01       	movw	r24, r28
    1a0c:	8d 58       	subi	r24, 0x8D	; 141
    1a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a10:	9e 01       	movw	r18, r28
    1a12:	28 58       	subi	r18, 0x88	; 136
    1a14:	3f 4f       	sbci	r19, 0xFF	; 255
    1a16:	b9 01       	movw	r22, r18
    1a18:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <verifyPassword>
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	ee 58       	subi	r30, 0x8E	; 142
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	80 83       	st	Z, r24
		UART_sendByte(passwordVerified);
    1a24:	fe 01       	movw	r30, r28
    1a26:	ee 58       	subi	r30, 0x8E	; 142
    1a28:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2a:	80 81       	ld	r24, Z
    1a2c:	0e 94 26 06 	call	0xc4c	; 0xc4c <UART_sendByte>
    1a30:	fe 01       	movw	r30, r28
    1a32:	e3 59       	subi	r30, 0x93	; 147
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	a2 e0       	ldi	r26, 0x02	; 2
    1a3c:	b3 e4       	ldi	r27, 0x43	; 67
    1a3e:	80 83       	st	Z, r24
    1a40:	91 83       	std	Z+1, r25	; 0x01
    1a42:	a2 83       	std	Z+2, r26	; 0x02
    1a44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a46:	8e 01       	movw	r16, r28
    1a48:	07 59       	subi	r16, 0x97	; 151
    1a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4c:	fe 01       	movw	r30, r28
    1a4e:	e3 59       	subi	r30, 0x93	; 147
    1a50:	ff 4f       	sbci	r31, 0xFF	; 255
    1a52:	60 81       	ld	r22, Z
    1a54:	71 81       	ldd	r23, Z+1	; 0x01
    1a56:	82 81       	ldd	r24, Z+2	; 0x02
    1a58:	93 81       	ldd	r25, Z+3	; 0x03
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	4a ef       	ldi	r20, 0xFA	; 250
    1a60:	54 e4       	ldi	r21, 0x44	; 68
    1a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	f8 01       	movw	r30, r16
    1a6c:	80 83       	st	Z, r24
    1a6e:	91 83       	std	Z+1, r25	; 0x01
    1a70:	a2 83       	std	Z+2, r26	; 0x02
    1a72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a74:	fe 01       	movw	r30, r28
    1a76:	e7 59       	subi	r30, 0x97	; 151
    1a78:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7a:	60 81       	ld	r22, Z
    1a7c:	71 81       	ldd	r23, Z+1	; 0x01
    1a7e:	82 81       	ldd	r24, Z+2	; 0x02
    1a80:	93 81       	ldd	r25, Z+3	; 0x03
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	40 e8       	ldi	r20, 0x80	; 128
    1a88:	5f e3       	ldi	r21, 0x3F	; 63
    1a8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a8e:	88 23       	and	r24, r24
    1a90:	44 f4       	brge	.+16     	; 0x1aa2 <start+0xf2>
		__ticks = 1;
    1a92:	fe 01       	movw	r30, r28
    1a94:	e9 59       	subi	r30, 0x99	; 153
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	91 83       	std	Z+1, r25	; 0x01
    1a9e:	80 83       	st	Z, r24
    1aa0:	64 c0       	rjmp	.+200    	; 0x1b6a <start+0x1ba>
	else if (__tmp > 65535)
    1aa2:	fe 01       	movw	r30, r28
    1aa4:	e7 59       	subi	r30, 0x97	; 151
    1aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa8:	60 81       	ld	r22, Z
    1aaa:	71 81       	ldd	r23, Z+1	; 0x01
    1aac:	82 81       	ldd	r24, Z+2	; 0x02
    1aae:	93 81       	ldd	r25, Z+3	; 0x03
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	3f ef       	ldi	r19, 0xFF	; 255
    1ab4:	4f e7       	ldi	r20, 0x7F	; 127
    1ab6:	57 e4       	ldi	r21, 0x47	; 71
    1ab8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1abc:	18 16       	cp	r1, r24
    1abe:	0c f0       	brlt	.+2      	; 0x1ac2 <start+0x112>
    1ac0:	43 c0       	rjmp	.+134    	; 0x1b48 <start+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	e3 59       	subi	r30, 0x93	; 147
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	60 81       	ld	r22, Z
    1aca:	71 81       	ldd	r23, Z+1	; 0x01
    1acc:	82 81       	ldd	r24, Z+2	; 0x02
    1ace:	93 81       	ldd	r25, Z+3	; 0x03
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e2       	ldi	r20, 0x20	; 32
    1ad6:	51 e4       	ldi	r21, 0x41	; 65
    1ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	8e 01       	movw	r16, r28
    1ae2:	09 59       	subi	r16, 0x99	; 153
    1ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae6:	bc 01       	movw	r22, r24
    1ae8:	cd 01       	movw	r24, r26
    1aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	f8 01       	movw	r30, r16
    1af4:	91 83       	std	Z+1, r25	; 0x01
    1af6:	80 83       	st	Z, r24
    1af8:	1f c0       	rjmp	.+62     	; 0x1b38 <start+0x188>
    1afa:	fe 01       	movw	r30, r28
    1afc:	eb 59       	subi	r30, 0x9B	; 155
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	88 ec       	ldi	r24, 0xC8	; 200
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	91 83       	std	Z+1, r25	; 0x01
    1b06:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b08:	fe 01       	movw	r30, r28
    1b0a:	eb 59       	subi	r30, 0x9B	; 155
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	80 81       	ld	r24, Z
    1b10:	91 81       	ldd	r25, Z+1	; 0x01
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <start+0x162>
    1b16:	fe 01       	movw	r30, r28
    1b18:	eb 59       	subi	r30, 0x9B	; 155
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	91 83       	std	Z+1, r25	; 0x01
    1b1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b20:	de 01       	movw	r26, r28
    1b22:	a9 59       	subi	r26, 0x99	; 153
    1b24:	bf 4f       	sbci	r27, 0xFF	; 255
    1b26:	fe 01       	movw	r30, r28
    1b28:	e9 59       	subi	r30, 0x99	; 153
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	80 81       	ld	r24, Z
    1b2e:	91 81       	ldd	r25, Z+1	; 0x01
    1b30:	01 97       	sbiw	r24, 0x01	; 1
    1b32:	11 96       	adiw	r26, 0x01	; 1
    1b34:	9c 93       	st	X, r25
    1b36:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b38:	fe 01       	movw	r30, r28
    1b3a:	e9 59       	subi	r30, 0x99	; 153
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	80 81       	ld	r24, Z
    1b40:	91 81       	ldd	r25, Z+1	; 0x01
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	d1 f6       	brne	.-76     	; 0x1afa <start+0x14a>
    1b46:	28 c0       	rjmp	.+80     	; 0x1b98 <start+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b48:	8e 01       	movw	r16, r28
    1b4a:	09 59       	subi	r16, 0x99	; 153
    1b4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4e:	fe 01       	movw	r30, r28
    1b50:	e7 59       	subi	r30, 0x97	; 151
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	60 81       	ld	r22, Z
    1b56:	71 81       	ldd	r23, Z+1	; 0x01
    1b58:	82 81       	ldd	r24, Z+2	; 0x02
    1b5a:	93 81       	ldd	r25, Z+3	; 0x03
    1b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	f8 01       	movw	r30, r16
    1b66:	91 83       	std	Z+1, r25	; 0x01
    1b68:	80 83       	st	Z, r24
    1b6a:	de 01       	movw	r26, r28
    1b6c:	ad 59       	subi	r26, 0x9D	; 157
    1b6e:	bf 4f       	sbci	r27, 0xFF	; 255
    1b70:	fe 01       	movw	r30, r28
    1b72:	e9 59       	subi	r30, 0x99	; 153
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	80 81       	ld	r24, Z
    1b78:	91 81       	ldd	r25, Z+1	; 0x01
    1b7a:	11 96       	adiw	r26, 0x01	; 1
    1b7c:	9c 93       	st	X, r25
    1b7e:	8e 93       	st	-X, r24
    1b80:	fe 01       	movw	r30, r28
    1b82:	ed 59       	subi	r30, 0x9D	; 157
    1b84:	ff 4f       	sbci	r31, 0xFF	; 255
    1b86:	80 81       	ld	r24, Z
    1b88:	91 81       	ldd	r25, Z+1	; 0x01
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <start+0x1da>
    1b8e:	fe 01       	movw	r30, r28
    1b90:	ed 59       	subi	r30, 0x9D	; 157
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	91 83       	std	Z+1, r25	; 0x01
    1b96:	80 83       	st	Z, r24
	Timer1_setCallBack(timerHandler);
	UART_init(&uartConfig);
	EEPROM_init();


	while(passwordVerified == 0)
    1b98:	fe 01       	movw	r30, r28
    1b9a:	ee 58       	subi	r30, 0x8E	; 142
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	80 81       	ld	r24, Z
    1ba0:	88 23       	and	r24, r24
    1ba2:	09 f4       	brne	.+2      	; 0x1ba6 <start+0x1f6>
    1ba4:	28 cf       	rjmp	.-432    	; 0x19f6 <start+0x46>

		_delay_ms(UART_DELAY);
	}


	storePasswordeeprom(password);
    1ba6:	ce 01       	movw	r24, r28
    1ba8:	8d 58       	subi	r24, 0x8D	; 141
    1baa:	9f 4f       	sbci	r25, 0xFF	; 255
    1bac:	0e 94 79 13 	call	0x26f2	; 0x26f2 <storePasswordeeprom>


	while(1)
	{
		uint8 passwordEEPROM[4];
		readPasswordeeprom(passwordEEPROM);
    1bb0:	ce 01       	movw	r24, r28
    1bb2:	83 58       	subi	r24, 0x83	; 131
    1bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb6:	0e 94 1c 14 	call	0x2838	; 0x2838 <readPasswordeeprom>
		command = UART_recieveByte();
    1bba:	0e 94 3d 06 	call	0xc7a	; 0xc7a <UART_recieveByte>
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	ef 58       	subi	r30, 0x8F	; 143
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc4:	80 83       	st	Z, r24
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	e1 5a       	subi	r30, 0xA1	; 161
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	a2 e0       	ldi	r26, 0x02	; 2
    1bd2:	b3 e4       	ldi	r27, 0x43	; 67
    1bd4:	80 83       	st	Z, r24
    1bd6:	91 83       	std	Z+1, r25	; 0x01
    1bd8:	a2 83       	std	Z+2, r26	; 0x02
    1bda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bdc:	8e 01       	movw	r16, r28
    1bde:	05 5a       	subi	r16, 0xA5	; 165
    1be0:	1f 4f       	sbci	r17, 0xFF	; 255
    1be2:	fe 01       	movw	r30, r28
    1be4:	e1 5a       	subi	r30, 0xA1	; 161
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	60 81       	ld	r22, Z
    1bea:	71 81       	ldd	r23, Z+1	; 0x01
    1bec:	82 81       	ldd	r24, Z+2	; 0x02
    1bee:	93 81       	ldd	r25, Z+3	; 0x03
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	4a ef       	ldi	r20, 0xFA	; 250
    1bf6:	54 e4       	ldi	r21, 0x44	; 68
    1bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	f8 01       	movw	r30, r16
    1c02:	80 83       	st	Z, r24
    1c04:	91 83       	std	Z+1, r25	; 0x01
    1c06:	a2 83       	std	Z+2, r26	; 0x02
    1c08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	e5 5a       	subi	r30, 0xA5	; 165
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	60 81       	ld	r22, Z
    1c12:	71 81       	ldd	r23, Z+1	; 0x01
    1c14:	82 81       	ldd	r24, Z+2	; 0x02
    1c16:	93 81       	ldd	r25, Z+3	; 0x03
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e8       	ldi	r20, 0x80	; 128
    1c1e:	5f e3       	ldi	r21, 0x3F	; 63
    1c20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c24:	88 23       	and	r24, r24
    1c26:	44 f4       	brge	.+16     	; 0x1c38 <start+0x288>
		__ticks = 1;
    1c28:	fe 01       	movw	r30, r28
    1c2a:	e7 5a       	subi	r30, 0xA7	; 167
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	91 83       	std	Z+1, r25	; 0x01
    1c34:	80 83       	st	Z, r24
    1c36:	64 c0       	rjmp	.+200    	; 0x1d00 <start+0x350>
	else if (__tmp > 65535)
    1c38:	fe 01       	movw	r30, r28
    1c3a:	e5 5a       	subi	r30, 0xA5	; 165
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	60 81       	ld	r22, Z
    1c40:	71 81       	ldd	r23, Z+1	; 0x01
    1c42:	82 81       	ldd	r24, Z+2	; 0x02
    1c44:	93 81       	ldd	r25, Z+3	; 0x03
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	3f ef       	ldi	r19, 0xFF	; 255
    1c4a:	4f e7       	ldi	r20, 0x7F	; 127
    1c4c:	57 e4       	ldi	r21, 0x47	; 71
    1c4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c52:	18 16       	cp	r1, r24
    1c54:	0c f0       	brlt	.+2      	; 0x1c58 <start+0x2a8>
    1c56:	43 c0       	rjmp	.+134    	; 0x1cde <start+0x32e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c58:	fe 01       	movw	r30, r28
    1c5a:	e1 5a       	subi	r30, 0xA1	; 161
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	60 81       	ld	r22, Z
    1c60:	71 81       	ldd	r23, Z+1	; 0x01
    1c62:	82 81       	ldd	r24, Z+2	; 0x02
    1c64:	93 81       	ldd	r25, Z+3	; 0x03
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	40 e2       	ldi	r20, 0x20	; 32
    1c6c:	51 e4       	ldi	r21, 0x41	; 65
    1c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	8e 01       	movw	r16, r28
    1c78:	07 5a       	subi	r16, 0xA7	; 167
    1c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7c:	bc 01       	movw	r22, r24
    1c7e:	cd 01       	movw	r24, r26
    1c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	f8 01       	movw	r30, r16
    1c8a:	91 83       	std	Z+1, r25	; 0x01
    1c8c:	80 83       	st	Z, r24
    1c8e:	1f c0       	rjmp	.+62     	; 0x1cce <start+0x31e>
    1c90:	fe 01       	movw	r30, r28
    1c92:	e9 5a       	subi	r30, 0xA9	; 169
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	88 ec       	ldi	r24, 0xC8	; 200
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	91 83       	std	Z+1, r25	; 0x01
    1c9c:	80 83       	st	Z, r24
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	e9 5a       	subi	r30, 0xA9	; 169
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	80 81       	ld	r24, Z
    1ca6:	91 81       	ldd	r25, Z+1	; 0x01
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	f1 f7       	brne	.-4      	; 0x1ca8 <start+0x2f8>
    1cac:	fe 01       	movw	r30, r28
    1cae:	e9 5a       	subi	r30, 0xA9	; 169
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	91 83       	std	Z+1, r25	; 0x01
    1cb4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb6:	de 01       	movw	r26, r28
    1cb8:	a7 5a       	subi	r26, 0xA7	; 167
    1cba:	bf 4f       	sbci	r27, 0xFF	; 255
    1cbc:	fe 01       	movw	r30, r28
    1cbe:	e7 5a       	subi	r30, 0xA7	; 167
    1cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc2:	80 81       	ld	r24, Z
    1cc4:	91 81       	ldd	r25, Z+1	; 0x01
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	11 96       	adiw	r26, 0x01	; 1
    1cca:	9c 93       	st	X, r25
    1ccc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cce:	fe 01       	movw	r30, r28
    1cd0:	e7 5a       	subi	r30, 0xA7	; 167
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	80 81       	ld	r24, Z
    1cd6:	91 81       	ldd	r25, Z+1	; 0x01
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	d1 f6       	brne	.-76     	; 0x1c90 <start+0x2e0>
    1cdc:	28 c0       	rjmp	.+80     	; 0x1d2e <start+0x37e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cde:	8e 01       	movw	r16, r28
    1ce0:	07 5a       	subi	r16, 0xA7	; 167
    1ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	e5 5a       	subi	r30, 0xA5	; 165
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	60 81       	ld	r22, Z
    1cec:	71 81       	ldd	r23, Z+1	; 0x01
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	93 81       	ldd	r25, Z+3	; 0x03
    1cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	f8 01       	movw	r30, r16
    1cfc:	91 83       	std	Z+1, r25	; 0x01
    1cfe:	80 83       	st	Z, r24
    1d00:	de 01       	movw	r26, r28
    1d02:	ab 5a       	subi	r26, 0xAB	; 171
    1d04:	bf 4f       	sbci	r27, 0xFF	; 255
    1d06:	fe 01       	movw	r30, r28
    1d08:	e7 5a       	subi	r30, 0xA7	; 167
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	80 81       	ld	r24, Z
    1d0e:	91 81       	ldd	r25, Z+1	; 0x01
    1d10:	11 96       	adiw	r26, 0x01	; 1
    1d12:	9c 93       	st	X, r25
    1d14:	8e 93       	st	-X, r24
    1d16:	fe 01       	movw	r30, r28
    1d18:	eb 5a       	subi	r30, 0xAB	; 171
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	80 81       	ld	r24, Z
    1d1e:	91 81       	ldd	r25, Z+1	; 0x01
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	f1 f7       	brne	.-4      	; 0x1d20 <start+0x370>
    1d24:	fe 01       	movw	r30, r28
    1d26:	eb 5a       	subi	r30, 0xAB	; 171
    1d28:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2a:	91 83       	std	Z+1, r25	; 0x01
    1d2c:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);

		if(command == '+')
    1d2e:	fe 01       	movw	r30, r28
    1d30:	ef 58       	subi	r30, 0x8F	; 143
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	80 81       	ld	r24, Z
    1d36:	8b 32       	cpi	r24, 0x2B	; 43
    1d38:	09 f0       	breq	.+2      	; 0x1d3c <start+0x38c>
    1d3a:	da c1       	rjmp	.+948    	; 0x20f0 <start+0x740>
		{
			receivePassword(password);
    1d3c:	ce 01       	movw	r24, r28
    1d3e:	8d 58       	subi	r24, 0x8D	; 141
    1d40:	9f 4f       	sbci	r25, 0xFF	; 255
    1d42:	0e 94 34 12 	call	0x2468	; 0x2468 <receivePassword>

			if(verifyPassword(password, passwordEEPROM))
    1d46:	ce 01       	movw	r24, r28
    1d48:	8d 58       	subi	r24, 0x8D	; 141
    1d4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4c:	9e 01       	movw	r18, r28
    1d4e:	23 58       	subi	r18, 0x83	; 131
    1d50:	3f 4f       	sbci	r19, 0xFF	; 255
    1d52:	b9 01       	movw	r22, r18
    1d54:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <verifyPassword>
    1d58:	88 23       	and	r24, r24
    1d5a:	09 f4       	brne	.+2      	; 0x1d5e <start+0x3ae>
    1d5c:	bd c0       	rjmp	.+378    	; 0x1ed8 <start+0x528>
			{
				falsePasswords = 0;
    1d5e:	10 92 77 00 	sts	0x0077, r1
    1d62:	10 92 76 00 	sts	0x0076, r1
				UART_sendByte(1);
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	0e 94 26 06 	call	0xc4c	; 0xc4c <UART_sendByte>
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	ef 5a       	subi	r30, 0xAF	; 175
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	a2 e0       	ldi	r26, 0x02	; 2
    1d78:	b3 e4       	ldi	r27, 0x43	; 67
    1d7a:	80 83       	st	Z, r24
    1d7c:	91 83       	std	Z+1, r25	; 0x01
    1d7e:	a2 83       	std	Z+2, r26	; 0x02
    1d80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d82:	8e 01       	movw	r16, r28
    1d84:	03 5b       	subi	r16, 0xB3	; 179
    1d86:	1f 4f       	sbci	r17, 0xFF	; 255
    1d88:	fe 01       	movw	r30, r28
    1d8a:	ef 5a       	subi	r30, 0xAF	; 175
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	60 81       	ld	r22, Z
    1d90:	71 81       	ldd	r23, Z+1	; 0x01
    1d92:	82 81       	ldd	r24, Z+2	; 0x02
    1d94:	93 81       	ldd	r25, Z+3	; 0x03
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	4a ef       	ldi	r20, 0xFA	; 250
    1d9c:	54 e4       	ldi	r21, 0x44	; 68
    1d9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	f8 01       	movw	r30, r16
    1da8:	80 83       	st	Z, r24
    1daa:	91 83       	std	Z+1, r25	; 0x01
    1dac:	a2 83       	std	Z+2, r26	; 0x02
    1dae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1db0:	fe 01       	movw	r30, r28
    1db2:	e3 5b       	subi	r30, 0xB3	; 179
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	60 81       	ld	r22, Z
    1db8:	71 81       	ldd	r23, Z+1	; 0x01
    1dba:	82 81       	ldd	r24, Z+2	; 0x02
    1dbc:	93 81       	ldd	r25, Z+3	; 0x03
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	40 e8       	ldi	r20, 0x80	; 128
    1dc4:	5f e3       	ldi	r21, 0x3F	; 63
    1dc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dca:	88 23       	and	r24, r24
    1dcc:	44 f4       	brge	.+16     	; 0x1dde <start+0x42e>
		__ticks = 1;
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e5 5b       	subi	r30, 0xB5	; 181
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	91 83       	std	Z+1, r25	; 0x01
    1dda:	80 83       	st	Z, r24
    1ddc:	64 c0       	rjmp	.+200    	; 0x1ea6 <start+0x4f6>
	else if (__tmp > 65535)
    1dde:	fe 01       	movw	r30, r28
    1de0:	e3 5b       	subi	r30, 0xB3	; 179
    1de2:	ff 4f       	sbci	r31, 0xFF	; 255
    1de4:	60 81       	ld	r22, Z
    1de6:	71 81       	ldd	r23, Z+1	; 0x01
    1de8:	82 81       	ldd	r24, Z+2	; 0x02
    1dea:	93 81       	ldd	r25, Z+3	; 0x03
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	3f ef       	ldi	r19, 0xFF	; 255
    1df0:	4f e7       	ldi	r20, 0x7F	; 127
    1df2:	57 e4       	ldi	r21, 0x47	; 71
    1df4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1df8:	18 16       	cp	r1, r24
    1dfa:	0c f0       	brlt	.+2      	; 0x1dfe <start+0x44e>
    1dfc:	43 c0       	rjmp	.+134    	; 0x1e84 <start+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dfe:	fe 01       	movw	r30, r28
    1e00:	ef 5a       	subi	r30, 0xAF	; 175
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	60 81       	ld	r22, Z
    1e06:	71 81       	ldd	r23, Z+1	; 0x01
    1e08:	82 81       	ldd	r24, Z+2	; 0x02
    1e0a:	93 81       	ldd	r25, Z+3	; 0x03
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e2       	ldi	r20, 0x20	; 32
    1e12:	51 e4       	ldi	r21, 0x41	; 65
    1e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	8e 01       	movw	r16, r28
    1e1e:	05 5b       	subi	r16, 0xB5	; 181
    1e20:	1f 4f       	sbci	r17, 0xFF	; 255
    1e22:	bc 01       	movw	r22, r24
    1e24:	cd 01       	movw	r24, r26
    1e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	f8 01       	movw	r30, r16
    1e30:	91 83       	std	Z+1, r25	; 0x01
    1e32:	80 83       	st	Z, r24
    1e34:	1f c0       	rjmp	.+62     	; 0x1e74 <start+0x4c4>
    1e36:	fe 01       	movw	r30, r28
    1e38:	e7 5b       	subi	r30, 0xB7	; 183
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	88 ec       	ldi	r24, 0xC8	; 200
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	91 83       	std	Z+1, r25	; 0x01
    1e42:	80 83       	st	Z, r24
    1e44:	fe 01       	movw	r30, r28
    1e46:	e7 5b       	subi	r30, 0xB7	; 183
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	80 81       	ld	r24, Z
    1e4c:	91 81       	ldd	r25, Z+1	; 0x01
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	f1 f7       	brne	.-4      	; 0x1e4e <start+0x49e>
    1e52:	fe 01       	movw	r30, r28
    1e54:	e7 5b       	subi	r30, 0xB7	; 183
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	91 83       	std	Z+1, r25	; 0x01
    1e5a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e5c:	de 01       	movw	r26, r28
    1e5e:	a5 5b       	subi	r26, 0xB5	; 181
    1e60:	bf 4f       	sbci	r27, 0xFF	; 255
    1e62:	fe 01       	movw	r30, r28
    1e64:	e5 5b       	subi	r30, 0xB5	; 181
    1e66:	ff 4f       	sbci	r31, 0xFF	; 255
    1e68:	80 81       	ld	r24, Z
    1e6a:	91 81       	ldd	r25, Z+1	; 0x01
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	11 96       	adiw	r26, 0x01	; 1
    1e70:	9c 93       	st	X, r25
    1e72:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e74:	fe 01       	movw	r30, r28
    1e76:	e5 5b       	subi	r30, 0xB5	; 181
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	80 81       	ld	r24, Z
    1e7c:	91 81       	ldd	r25, Z+1	; 0x01
    1e7e:	00 97       	sbiw	r24, 0x00	; 0
    1e80:	d1 f6       	brne	.-76     	; 0x1e36 <start+0x486>
    1e82:	27 c0       	rjmp	.+78     	; 0x1ed2 <start+0x522>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e84:	8e 01       	movw	r16, r28
    1e86:	05 5b       	subi	r16, 0xB5	; 181
    1e88:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	e3 5b       	subi	r30, 0xB3	; 179
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	60 81       	ld	r22, Z
    1e92:	71 81       	ldd	r23, Z+1	; 0x01
    1e94:	82 81       	ldd	r24, Z+2	; 0x02
    1e96:	93 81       	ldd	r25, Z+3	; 0x03
    1e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	f8 01       	movw	r30, r16
    1ea2:	91 83       	std	Z+1, r25	; 0x01
    1ea4:	80 83       	st	Z, r24
    1ea6:	de 01       	movw	r26, r28
    1ea8:	a9 5b       	subi	r26, 0xB9	; 185
    1eaa:	bf 4f       	sbci	r27, 0xFF	; 255
    1eac:	fe 01       	movw	r30, r28
    1eae:	e5 5b       	subi	r30, 0xB5	; 181
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	80 81       	ld	r24, Z
    1eb4:	91 81       	ldd	r25, Z+1	; 0x01
    1eb6:	8d 93       	st	X+, r24
    1eb8:	9c 93       	st	X, r25
    1eba:	fe 01       	movw	r30, r28
    1ebc:	e9 5b       	subi	r30, 0xB9	; 185
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	80 81       	ld	r24, Z
    1ec2:	91 81       	ldd	r25, Z+1	; 0x01
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	f1 f7       	brne	.-4      	; 0x1ec4 <start+0x514>
    1ec8:	fe 01       	movw	r30, r28
    1eca:	e9 5b       	subi	r30, 0xB9	; 185
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	91 83       	std	Z+1, r25	; 0x01
    1ed0:	80 83       	st	Z, r24
				_delay_ms(UART_DELAY);
				openDoor();
    1ed2:	0e 94 08 13 	call	0x2610	; 0x2610 <openDoor>
    1ed6:	6c ce       	rjmp	.-808    	; 0x1bb0 <start+0x200>
			}

			else
			{
				UART_sendByte(0);
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	0e 94 26 06 	call	0xc4c	; 0xc4c <UART_sendByte>
    1ede:	fe 01       	movw	r30, r28
    1ee0:	ed 5b       	subi	r30, 0xBD	; 189
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	a2 e0       	ldi	r26, 0x02	; 2
    1eea:	b3 e4       	ldi	r27, 0x43	; 67
    1eec:	80 83       	st	Z, r24
    1eee:	91 83       	std	Z+1, r25	; 0x01
    1ef0:	a2 83       	std	Z+2, r26	; 0x02
    1ef2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef4:	8e 01       	movw	r16, r28
    1ef6:	01 5c       	subi	r16, 0xC1	; 193
    1ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    1efa:	fe 01       	movw	r30, r28
    1efc:	ed 5b       	subi	r30, 0xBD	; 189
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	60 81       	ld	r22, Z
    1f02:	71 81       	ldd	r23, Z+1	; 0x01
    1f04:	82 81       	ldd	r24, Z+2	; 0x02
    1f06:	93 81       	ldd	r25, Z+3	; 0x03
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	4a ef       	ldi	r20, 0xFA	; 250
    1f0e:	54 e4       	ldi	r21, 0x44	; 68
    1f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	f8 01       	movw	r30, r16
    1f1a:	80 83       	st	Z, r24
    1f1c:	91 83       	std	Z+1, r25	; 0x01
    1f1e:	a2 83       	std	Z+2, r26	; 0x02
    1f20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f22:	fe 01       	movw	r30, r28
    1f24:	ff 96       	adiw	r30, 0x3f	; 63
    1f26:	60 81       	ld	r22, Z
    1f28:	71 81       	ldd	r23, Z+1	; 0x01
    1f2a:	82 81       	ldd	r24, Z+2	; 0x02
    1f2c:	93 81       	ldd	r25, Z+3	; 0x03
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	40 e8       	ldi	r20, 0x80	; 128
    1f34:	5f e3       	ldi	r21, 0x3F	; 63
    1f36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f3a:	88 23       	and	r24, r24
    1f3c:	2c f4       	brge	.+10     	; 0x1f48 <start+0x598>
		__ticks = 1;
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	9e af       	std	Y+62, r25	; 0x3e
    1f44:	8d af       	std	Y+61, r24	; 0x3d
    1f46:	46 c0       	rjmp	.+140    	; 0x1fd4 <start+0x624>
	else if (__tmp > 65535)
    1f48:	fe 01       	movw	r30, r28
    1f4a:	ff 96       	adiw	r30, 0x3f	; 63
    1f4c:	60 81       	ld	r22, Z
    1f4e:	71 81       	ldd	r23, Z+1	; 0x01
    1f50:	82 81       	ldd	r24, Z+2	; 0x02
    1f52:	93 81       	ldd	r25, Z+3	; 0x03
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	3f ef       	ldi	r19, 0xFF	; 255
    1f58:	4f e7       	ldi	r20, 0x7F	; 127
    1f5a:	57 e4       	ldi	r21, 0x47	; 71
    1f5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f60:	18 16       	cp	r1, r24
    1f62:	64 f5       	brge	.+88     	; 0x1fbc <start+0x60c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f64:	fe 01       	movw	r30, r28
    1f66:	ed 5b       	subi	r30, 0xBD	; 189
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	60 81       	ld	r22, Z
    1f6c:	71 81       	ldd	r23, Z+1	; 0x01
    1f6e:	82 81       	ldd	r24, Z+2	; 0x02
    1f70:	93 81       	ldd	r25, Z+3	; 0x03
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e2       	ldi	r20, 0x20	; 32
    1f78:	51 e4       	ldi	r21, 0x41	; 65
    1f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	bc 01       	movw	r22, r24
    1f84:	cd 01       	movw	r24, r26
    1f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	9e af       	std	Y+62, r25	; 0x3e
    1f90:	8d af       	std	Y+61, r24	; 0x3d
    1f92:	0f c0       	rjmp	.+30     	; 0x1fb2 <start+0x602>
    1f94:	88 ec       	ldi	r24, 0xC8	; 200
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9c af       	std	Y+60, r25	; 0x3c
    1f9a:	8b af       	std	Y+59, r24	; 0x3b
    1f9c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f9e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	f1 f7       	brne	.-4      	; 0x1fa0 <start+0x5f0>
    1fa4:	9c af       	std	Y+60, r25	; 0x3c
    1fa6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1faa:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fac:	01 97       	sbiw	r24, 0x01	; 1
    1fae:	9e af       	std	Y+62, r25	; 0x3e
    1fb0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fb4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fb6:	00 97       	sbiw	r24, 0x00	; 0
    1fb8:	69 f7       	brne	.-38     	; 0x1f94 <start+0x5e4>
    1fba:	16 c0       	rjmp	.+44     	; 0x1fe8 <start+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	ff 96       	adiw	r30, 0x3f	; 63
    1fc0:	60 81       	ld	r22, Z
    1fc2:	71 81       	ldd	r23, Z+1	; 0x01
    1fc4:	82 81       	ldd	r24, Z+2	; 0x02
    1fc6:	93 81       	ldd	r25, Z+3	; 0x03
    1fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	9e af       	std	Y+62, r25	; 0x3e
    1fd2:	8d af       	std	Y+61, r24	; 0x3d
    1fd4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fd6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fd8:	9a af       	std	Y+58, r25	; 0x3a
    1fda:	89 af       	std	Y+57, r24	; 0x39
    1fdc:	89 ad       	ldd	r24, Y+57	; 0x39
    1fde:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fe0:	01 97       	sbiw	r24, 0x01	; 1
    1fe2:	f1 f7       	brne	.-4      	; 0x1fe0 <start+0x630>
    1fe4:	9a af       	std	Y+58, r25	; 0x3a
    1fe6:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(UART_DELAY);
				falsePasswords++;
    1fe8:	80 91 76 00 	lds	r24, 0x0076
    1fec:	90 91 77 00 	lds	r25, 0x0077
    1ff0:	01 96       	adiw	r24, 0x01	; 1
    1ff2:	90 93 77 00 	sts	0x0077, r25
    1ff6:	80 93 76 00 	sts	0x0076, r24
				UART_sendByte(falsePasswords);
    1ffa:	80 91 76 00 	lds	r24, 0x0076
    1ffe:	90 91 77 00 	lds	r25, 0x0077
    2002:	0e 94 26 06 	call	0xc4c	; 0xc4c <UART_sendByte>
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	a2 e0       	ldi	r26, 0x02	; 2
    200c:	b3 e4       	ldi	r27, 0x43	; 67
    200e:	8d ab       	std	Y+53, r24	; 0x35
    2010:	9e ab       	std	Y+54, r25	; 0x36
    2012:	af ab       	std	Y+55, r26	; 0x37
    2014:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2016:	6d a9       	ldd	r22, Y+53	; 0x35
    2018:	7e a9       	ldd	r23, Y+54	; 0x36
    201a:	8f a9       	ldd	r24, Y+55	; 0x37
    201c:	98 ad       	ldd	r25, Y+56	; 0x38
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	4a ef       	ldi	r20, 0xFA	; 250
    2024:	54 e4       	ldi	r21, 0x44	; 68
    2026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	89 ab       	std	Y+49, r24	; 0x31
    2030:	9a ab       	std	Y+50, r25	; 0x32
    2032:	ab ab       	std	Y+51, r26	; 0x33
    2034:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2036:	69 a9       	ldd	r22, Y+49	; 0x31
    2038:	7a a9       	ldd	r23, Y+50	; 0x32
    203a:	8b a9       	ldd	r24, Y+51	; 0x33
    203c:	9c a9       	ldd	r25, Y+52	; 0x34
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e8       	ldi	r20, 0x80	; 128
    2044:	5f e3       	ldi	r21, 0x3F	; 63
    2046:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    204a:	88 23       	and	r24, r24
    204c:	2c f4       	brge	.+10     	; 0x2058 <start+0x6a8>
		__ticks = 1;
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	98 ab       	std	Y+48, r25	; 0x30
    2054:	8f a7       	std	Y+47, r24	; 0x2f
    2056:	3f c0       	rjmp	.+126    	; 0x20d6 <start+0x726>
	else if (__tmp > 65535)
    2058:	69 a9       	ldd	r22, Y+49	; 0x31
    205a:	7a a9       	ldd	r23, Y+50	; 0x32
    205c:	8b a9       	ldd	r24, Y+51	; 0x33
    205e:	9c a9       	ldd	r25, Y+52	; 0x34
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	3f ef       	ldi	r19, 0xFF	; 255
    2064:	4f e7       	ldi	r20, 0x7F	; 127
    2066:	57 e4       	ldi	r21, 0x47	; 71
    2068:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    206c:	18 16       	cp	r1, r24
    206e:	4c f5       	brge	.+82     	; 0x20c2 <start+0x712>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2070:	6d a9       	ldd	r22, Y+53	; 0x35
    2072:	7e a9       	ldd	r23, Y+54	; 0x36
    2074:	8f a9       	ldd	r24, Y+55	; 0x37
    2076:	98 ad       	ldd	r25, Y+56	; 0x38
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e2       	ldi	r20, 0x20	; 32
    207e:	51 e4       	ldi	r21, 0x41	; 65
    2080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	bc 01       	movw	r22, r24
    208a:	cd 01       	movw	r24, r26
    208c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	98 ab       	std	Y+48, r25	; 0x30
    2096:	8f a7       	std	Y+47, r24	; 0x2f
    2098:	0f c0       	rjmp	.+30     	; 0x20b8 <start+0x708>
    209a:	88 ec       	ldi	r24, 0xC8	; 200
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	9e a7       	std	Y+46, r25	; 0x2e
    20a0:	8d a7       	std	Y+45, r24	; 0x2d
    20a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    20a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <start+0x6f6>
    20aa:	9e a7       	std	Y+46, r25	; 0x2e
    20ac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    20b0:	98 a9       	ldd	r25, Y+48	; 0x30
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	98 ab       	std	Y+48, r25	; 0x30
    20b6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ba:	98 a9       	ldd	r25, Y+48	; 0x30
    20bc:	00 97       	sbiw	r24, 0x00	; 0
    20be:	69 f7       	brne	.-38     	; 0x209a <start+0x6ea>
    20c0:	14 c0       	rjmp	.+40     	; 0x20ea <start+0x73a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c2:	69 a9       	ldd	r22, Y+49	; 0x31
    20c4:	7a a9       	ldd	r23, Y+50	; 0x32
    20c6:	8b a9       	ldd	r24, Y+51	; 0x33
    20c8:	9c a9       	ldd	r25, Y+52	; 0x34
    20ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	98 ab       	std	Y+48, r25	; 0x30
    20d4:	8f a7       	std	Y+47, r24	; 0x2f
    20d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20d8:	98 a9       	ldd	r25, Y+48	; 0x30
    20da:	9c a7       	std	Y+44, r25	; 0x2c
    20dc:	8b a7       	std	Y+43, r24	; 0x2b
    20de:	8b a5       	ldd	r24, Y+43	; 0x2b
    20e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	f1 f7       	brne	.-4      	; 0x20e2 <start+0x732>
    20e6:	9c a7       	std	Y+44, r25	; 0x2c
    20e8:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(UART_DELAY);
				falsePassword();
    20ea:	0e 94 52 13 	call	0x26a4	; 0x26a4 <falsePassword>
    20ee:	60 cd       	rjmp	.-1344   	; 0x1bb0 <start+0x200>

			}
		}

		else if(command == '-')
    20f0:	fe 01       	movw	r30, r28
    20f2:	ef 58       	subi	r30, 0x8F	; 143
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	80 81       	ld	r24, Z
    20f8:	8d 32       	cpi	r24, 0x2D	; 45
    20fa:	09 f0       	breq	.+2      	; 0x20fe <start+0x74e>
    20fc:	59 cd       	rjmp	.-1358   	; 0x1bb0 <start+0x200>
		{
			receivePassword(password);
    20fe:	ce 01       	movw	r24, r28
    2100:	8d 58       	subi	r24, 0x8D	; 141
    2102:	9f 4f       	sbci	r25, 0xFF	; 255
    2104:	0e 94 34 12 	call	0x2468	; 0x2468 <receivePassword>


			passwordVerified = verifyPassword(password, passwordEEPROM);
    2108:	ce 01       	movw	r24, r28
    210a:	8d 58       	subi	r24, 0x8D	; 141
    210c:	9f 4f       	sbci	r25, 0xFF	; 255
    210e:	9e 01       	movw	r18, r28
    2110:	23 58       	subi	r18, 0x83	; 131
    2112:	3f 4f       	sbci	r19, 0xFF	; 255
    2114:	b9 01       	movw	r22, r18
    2116:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <verifyPassword>
    211a:	fe 01       	movw	r30, r28
    211c:	ee 58       	subi	r30, 0x8E	; 142
    211e:	ff 4f       	sbci	r31, 0xFF	; 255
    2120:	80 83       	st	Z, r24
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	a2 e0       	ldi	r26, 0x02	; 2
    2128:	b3 e4       	ldi	r27, 0x43	; 67
    212a:	8f a3       	std	Y+39, r24	; 0x27
    212c:	98 a7       	std	Y+40, r25	; 0x28
    212e:	a9 a7       	std	Y+41, r26	; 0x29
    2130:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2132:	6f a1       	ldd	r22, Y+39	; 0x27
    2134:	78 a5       	ldd	r23, Y+40	; 0x28
    2136:	89 a5       	ldd	r24, Y+41	; 0x29
    2138:	9a a5       	ldd	r25, Y+42	; 0x2a
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	4a ef       	ldi	r20, 0xFA	; 250
    2140:	54 e4       	ldi	r21, 0x44	; 68
    2142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	8b a3       	std	Y+35, r24	; 0x23
    214c:	9c a3       	std	Y+36, r25	; 0x24
    214e:	ad a3       	std	Y+37, r26	; 0x25
    2150:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2152:	6b a1       	ldd	r22, Y+35	; 0x23
    2154:	7c a1       	ldd	r23, Y+36	; 0x24
    2156:	8d a1       	ldd	r24, Y+37	; 0x25
    2158:	9e a1       	ldd	r25, Y+38	; 0x26
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	40 e8       	ldi	r20, 0x80	; 128
    2160:	5f e3       	ldi	r21, 0x3F	; 63
    2162:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2166:	88 23       	and	r24, r24
    2168:	2c f4       	brge	.+10     	; 0x2174 <start+0x7c4>
		__ticks = 1;
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	9a a3       	std	Y+34, r25	; 0x22
    2170:	89 a3       	std	Y+33, r24	; 0x21
    2172:	3f c0       	rjmp	.+126    	; 0x21f2 <start+0x842>
	else if (__tmp > 65535)
    2174:	6b a1       	ldd	r22, Y+35	; 0x23
    2176:	7c a1       	ldd	r23, Y+36	; 0x24
    2178:	8d a1       	ldd	r24, Y+37	; 0x25
    217a:	9e a1       	ldd	r25, Y+38	; 0x26
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	3f ef       	ldi	r19, 0xFF	; 255
    2180:	4f e7       	ldi	r20, 0x7F	; 127
    2182:	57 e4       	ldi	r21, 0x47	; 71
    2184:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2188:	18 16       	cp	r1, r24
    218a:	4c f5       	brge	.+82     	; 0x21de <start+0x82e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218c:	6f a1       	ldd	r22, Y+39	; 0x27
    218e:	78 a5       	ldd	r23, Y+40	; 0x28
    2190:	89 a5       	ldd	r24, Y+41	; 0x29
    2192:	9a a5       	ldd	r25, Y+42	; 0x2a
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e2       	ldi	r20, 0x20	; 32
    219a:	51 e4       	ldi	r21, 0x41	; 65
    219c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	bc 01       	movw	r22, r24
    21a6:	cd 01       	movw	r24, r26
    21a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	9a a3       	std	Y+34, r25	; 0x22
    21b2:	89 a3       	std	Y+33, r24	; 0x21
    21b4:	0f c0       	rjmp	.+30     	; 0x21d4 <start+0x824>
    21b6:	88 ec       	ldi	r24, 0xC8	; 200
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	98 a3       	std	Y+32, r25	; 0x20
    21bc:	8f 8f       	std	Y+31, r24	; 0x1f
    21be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21c0:	98 a1       	ldd	r25, Y+32	; 0x20
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	f1 f7       	brne	.-4      	; 0x21c2 <start+0x812>
    21c6:	98 a3       	std	Y+32, r25	; 0x20
    21c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ca:	89 a1       	ldd	r24, Y+33	; 0x21
    21cc:	9a a1       	ldd	r25, Y+34	; 0x22
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	9a a3       	std	Y+34, r25	; 0x22
    21d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d4:	89 a1       	ldd	r24, Y+33	; 0x21
    21d6:	9a a1       	ldd	r25, Y+34	; 0x22
    21d8:	00 97       	sbiw	r24, 0x00	; 0
    21da:	69 f7       	brne	.-38     	; 0x21b6 <start+0x806>
    21dc:	14 c0       	rjmp	.+40     	; 0x2206 <start+0x856>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21de:	6b a1       	ldd	r22, Y+35	; 0x23
    21e0:	7c a1       	ldd	r23, Y+36	; 0x24
    21e2:	8d a1       	ldd	r24, Y+37	; 0x25
    21e4:	9e a1       	ldd	r25, Y+38	; 0x26
    21e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	9a a3       	std	Y+34, r25	; 0x22
    21f0:	89 a3       	std	Y+33, r24	; 0x21
    21f2:	89 a1       	ldd	r24, Y+33	; 0x21
    21f4:	9a a1       	ldd	r25, Y+34	; 0x22
    21f6:	9e 8f       	std	Y+30, r25	; 0x1e
    21f8:	8d 8f       	std	Y+29, r24	; 0x1d
    21fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	f1 f7       	brne	.-4      	; 0x21fe <start+0x84e>
    2202:	9e 8f       	std	Y+30, r25	; 0x1e
    2204:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(UART_DELAY);
			UART_sendByte(passwordVerified);
    2206:	fe 01       	movw	r30, r28
    2208:	ee 58       	subi	r30, 0x8E	; 142
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	80 81       	ld	r24, Z
    220e:	0e 94 26 06 	call	0xc4c	; 0xc4c <UART_sendByte>

			if(passwordVerified)
    2212:	fe 01       	movw	r30, r28
    2214:	ee 58       	subi	r30, 0x8E	; 142
    2216:	ff 4f       	sbci	r31, 0xFF	; 255
    2218:	80 81       	ld	r24, Z
    221a:	88 23       	and	r24, r24
    221c:	09 f4       	brne	.+2      	; 0x2220 <start+0x870>
    221e:	a0 c0       	rjmp	.+320    	; 0x2360 <start+0x9b0>
			{
				falsePasswords = 0;
    2220:	10 92 77 00 	sts	0x0077, r1
    2224:	10 92 76 00 	sts	0x0076, r1
				receivePassword(password);
    2228:	ce 01       	movw	r24, r28
    222a:	8d 58       	subi	r24, 0x8D	; 141
    222c:	9f 4f       	sbci	r25, 0xFF	; 255
    222e:	0e 94 34 12 	call	0x2468	; 0x2468 <receivePassword>


				receivePassword(confirmPassword);
    2232:	ce 01       	movw	r24, r28
    2234:	88 58       	subi	r24, 0x88	; 136
    2236:	9f 4f       	sbci	r25, 0xFF	; 255
    2238:	0e 94 34 12 	call	0x2468	; 0x2468 <receivePassword>

				passwordVerified = verifyPassword(password, confirmPassword);
    223c:	ce 01       	movw	r24, r28
    223e:	8d 58       	subi	r24, 0x8D	; 141
    2240:	9f 4f       	sbci	r25, 0xFF	; 255
    2242:	9e 01       	movw	r18, r28
    2244:	28 58       	subi	r18, 0x88	; 136
    2246:	3f 4f       	sbci	r19, 0xFF	; 255
    2248:	b9 01       	movw	r22, r18
    224a:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <verifyPassword>
    224e:	fe 01       	movw	r30, r28
    2250:	ee 58       	subi	r30, 0x8E	; 142
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	80 83       	st	Z, r24
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	a2 e0       	ldi	r26, 0x02	; 2
    225c:	b3 e4       	ldi	r27, 0x43	; 67
    225e:	89 8f       	std	Y+25, r24	; 0x19
    2260:	9a 8f       	std	Y+26, r25	; 0x1a
    2262:	ab 8f       	std	Y+27, r26	; 0x1b
    2264:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2266:	69 8d       	ldd	r22, Y+25	; 0x19
    2268:	7a 8d       	ldd	r23, Y+26	; 0x1a
    226a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    226c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	4a ef       	ldi	r20, 0xFA	; 250
    2274:	54 e4       	ldi	r21, 0x44	; 68
    2276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	8d 8b       	std	Y+21, r24	; 0x15
    2280:	9e 8b       	std	Y+22, r25	; 0x16
    2282:	af 8b       	std	Y+23, r26	; 0x17
    2284:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2286:	6d 89       	ldd	r22, Y+21	; 0x15
    2288:	7e 89       	ldd	r23, Y+22	; 0x16
    228a:	8f 89       	ldd	r24, Y+23	; 0x17
    228c:	98 8d       	ldd	r25, Y+24	; 0x18
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e8       	ldi	r20, 0x80	; 128
    2294:	5f e3       	ldi	r21, 0x3F	; 63
    2296:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    229a:	88 23       	and	r24, r24
    229c:	2c f4       	brge	.+10     	; 0x22a8 <start+0x8f8>
		__ticks = 1;
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	9c 8b       	std	Y+20, r25	; 0x14
    22a4:	8b 8b       	std	Y+19, r24	; 0x13
    22a6:	3f c0       	rjmp	.+126    	; 0x2326 <start+0x976>
	else if (__tmp > 65535)
    22a8:	6d 89       	ldd	r22, Y+21	; 0x15
    22aa:	7e 89       	ldd	r23, Y+22	; 0x16
    22ac:	8f 89       	ldd	r24, Y+23	; 0x17
    22ae:	98 8d       	ldd	r25, Y+24	; 0x18
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	3f ef       	ldi	r19, 0xFF	; 255
    22b4:	4f e7       	ldi	r20, 0x7F	; 127
    22b6:	57 e4       	ldi	r21, 0x47	; 71
    22b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22bc:	18 16       	cp	r1, r24
    22be:	4c f5       	brge	.+82     	; 0x2312 <start+0x962>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c0:	69 8d       	ldd	r22, Y+25	; 0x19
    22c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 e2       	ldi	r20, 0x20	; 32
    22ce:	51 e4       	ldi	r21, 0x41	; 65
    22d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	bc 01       	movw	r22, r24
    22da:	cd 01       	movw	r24, r26
    22dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	9c 8b       	std	Y+20, r25	; 0x14
    22e6:	8b 8b       	std	Y+19, r24	; 0x13
    22e8:	0f c0       	rjmp	.+30     	; 0x2308 <start+0x958>
    22ea:	88 ec       	ldi	r24, 0xC8	; 200
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	9a 8b       	std	Y+18, r25	; 0x12
    22f0:	89 8b       	std	Y+17, r24	; 0x11
    22f2:	89 89       	ldd	r24, Y+17	; 0x11
    22f4:	9a 89       	ldd	r25, Y+18	; 0x12
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	f1 f7       	brne	.-4      	; 0x22f6 <start+0x946>
    22fa:	9a 8b       	std	Y+18, r25	; 0x12
    22fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2300:	9c 89       	ldd	r25, Y+20	; 0x14
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	9c 8b       	std	Y+20, r25	; 0x14
    2306:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2308:	8b 89       	ldd	r24, Y+19	; 0x13
    230a:	9c 89       	ldd	r25, Y+20	; 0x14
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	69 f7       	brne	.-38     	; 0x22ea <start+0x93a>
    2310:	14 c0       	rjmp	.+40     	; 0x233a <start+0x98a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2312:	6d 89       	ldd	r22, Y+21	; 0x15
    2314:	7e 89       	ldd	r23, Y+22	; 0x16
    2316:	8f 89       	ldd	r24, Y+23	; 0x17
    2318:	98 8d       	ldd	r25, Y+24	; 0x18
    231a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	9c 8b       	std	Y+20, r25	; 0x14
    2324:	8b 8b       	std	Y+19, r24	; 0x13
    2326:	8b 89       	ldd	r24, Y+19	; 0x13
    2328:	9c 89       	ldd	r25, Y+20	; 0x14
    232a:	98 8b       	std	Y+16, r25	; 0x10
    232c:	8f 87       	std	Y+15, r24	; 0x0f
    232e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2330:	98 89       	ldd	r25, Y+16	; 0x10
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	f1 f7       	brne	.-4      	; 0x2332 <start+0x982>
    2336:	98 8b       	std	Y+16, r25	; 0x10
    2338:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(UART_DELAY);
				UART_sendByte(passwordVerified);
    233a:	fe 01       	movw	r30, r28
    233c:	ee 58       	subi	r30, 0x8E	; 142
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	80 81       	ld	r24, Z
    2342:	0e 94 26 06 	call	0xc4c	; 0xc4c <UART_sendByte>

				if(passwordVerified)
    2346:	fe 01       	movw	r30, r28
    2348:	ee 58       	subi	r30, 0x8E	; 142
    234a:	ff 4f       	sbci	r31, 0xFF	; 255
    234c:	80 81       	ld	r24, Z
    234e:	88 23       	and	r24, r24
    2350:	09 f4       	brne	.+2      	; 0x2354 <start+0x9a4>
    2352:	2e cc       	rjmp	.-1956   	; 0x1bb0 <start+0x200>
				{
					storePasswordeeprom(password);
    2354:	ce 01       	movw	r24, r28
    2356:	8d 58       	subi	r24, 0x8D	; 141
    2358:	9f 4f       	sbci	r25, 0xFF	; 255
    235a:	0e 94 79 13 	call	0x26f2	; 0x26f2 <storePasswordeeprom>
    235e:	28 cc       	rjmp	.-1968   	; 0x1bb0 <start+0x200>

			}

			else
			{
				falsePasswords++;
    2360:	80 91 76 00 	lds	r24, 0x0076
    2364:	90 91 77 00 	lds	r25, 0x0077
    2368:	01 96       	adiw	r24, 0x01	; 1
    236a:	90 93 77 00 	sts	0x0077, r25
    236e:	80 93 76 00 	sts	0x0076, r24
				UART_sendByte(falsePasswords);
    2372:	80 91 76 00 	lds	r24, 0x0076
    2376:	90 91 77 00 	lds	r25, 0x0077
    237a:	0e 94 26 06 	call	0xc4c	; 0xc4c <UART_sendByte>
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	a2 e0       	ldi	r26, 0x02	; 2
    2384:	b3 e4       	ldi	r27, 0x43	; 67
    2386:	8b 87       	std	Y+11, r24	; 0x0b
    2388:	9c 87       	std	Y+12, r25	; 0x0c
    238a:	ad 87       	std	Y+13, r26	; 0x0d
    238c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    238e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2390:	7c 85       	ldd	r23, Y+12	; 0x0c
    2392:	8d 85       	ldd	r24, Y+13	; 0x0d
    2394:	9e 85       	ldd	r25, Y+14	; 0x0e
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	4a ef       	ldi	r20, 0xFA	; 250
    239c:	54 e4       	ldi	r21, 0x44	; 68
    239e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	8f 83       	std	Y+7, r24	; 0x07
    23a8:	98 87       	std	Y+8, r25	; 0x08
    23aa:	a9 87       	std	Y+9, r26	; 0x09
    23ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23ae:	6f 81       	ldd	r22, Y+7	; 0x07
    23b0:	78 85       	ldd	r23, Y+8	; 0x08
    23b2:	89 85       	ldd	r24, Y+9	; 0x09
    23b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 e8       	ldi	r20, 0x80	; 128
    23bc:	5f e3       	ldi	r21, 0x3F	; 63
    23be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c2:	88 23       	and	r24, r24
    23c4:	2c f4       	brge	.+10     	; 0x23d0 <start+0xa20>
		__ticks = 1;
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	9e 83       	std	Y+6, r25	; 0x06
    23cc:	8d 83       	std	Y+5, r24	; 0x05
    23ce:	3f c0       	rjmp	.+126    	; 0x244e <start+0xa9e>
	else if (__tmp > 65535)
    23d0:	6f 81       	ldd	r22, Y+7	; 0x07
    23d2:	78 85       	ldd	r23, Y+8	; 0x08
    23d4:	89 85       	ldd	r24, Y+9	; 0x09
    23d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	3f ef       	ldi	r19, 0xFF	; 255
    23dc:	4f e7       	ldi	r20, 0x7F	; 127
    23de:	57 e4       	ldi	r21, 0x47	; 71
    23e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e4:	18 16       	cp	r1, r24
    23e6:	4c f5       	brge	.+82     	; 0x243a <start+0xa8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e2       	ldi	r20, 0x20	; 32
    23f6:	51 e4       	ldi	r21, 0x41	; 65
    23f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	bc 01       	movw	r22, r24
    2402:	cd 01       	movw	r24, r26
    2404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	9e 83       	std	Y+6, r25	; 0x06
    240e:	8d 83       	std	Y+5, r24	; 0x05
    2410:	0f c0       	rjmp	.+30     	; 0x2430 <start+0xa80>
    2412:	88 ec       	ldi	r24, 0xC8	; 200
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	9c 83       	std	Y+4, r25	; 0x04
    2418:	8b 83       	std	Y+3, r24	; 0x03
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	9c 81       	ldd	r25, Y+4	; 0x04
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	f1 f7       	brne	.-4      	; 0x241e <start+0xa6e>
    2422:	9c 83       	std	Y+4, r25	; 0x04
    2424:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2426:	8d 81       	ldd	r24, Y+5	; 0x05
    2428:	9e 81       	ldd	r25, Y+6	; 0x06
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	9e 83       	std	Y+6, r25	; 0x06
    242e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2430:	8d 81       	ldd	r24, Y+5	; 0x05
    2432:	9e 81       	ldd	r25, Y+6	; 0x06
    2434:	00 97       	sbiw	r24, 0x00	; 0
    2436:	69 f7       	brne	.-38     	; 0x2412 <start+0xa62>
    2438:	14 c0       	rjmp	.+40     	; 0x2462 <start+0xab2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243a:	6f 81       	ldd	r22, Y+7	; 0x07
    243c:	78 85       	ldd	r23, Y+8	; 0x08
    243e:	89 85       	ldd	r24, Y+9	; 0x09
    2440:	9a 85       	ldd	r25, Y+10	; 0x0a
    2442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	9e 83       	std	Y+6, r25	; 0x06
    244c:	8d 83       	std	Y+5, r24	; 0x05
    244e:	8d 81       	ldd	r24, Y+5	; 0x05
    2450:	9e 81       	ldd	r25, Y+6	; 0x06
    2452:	9a 83       	std	Y+2, r25	; 0x02
    2454:	89 83       	std	Y+1, r24	; 0x01
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	9a 81       	ldd	r25, Y+2	; 0x02
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	f1 f7       	brne	.-4      	; 0x245a <start+0xaaa>
    245e:	9a 83       	std	Y+2, r25	; 0x02
    2460:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(UART_DELAY);
				falsePassword();
    2462:	0e 94 52 13 	call	0x26a4	; 0x26a4 <falsePassword>
    2466:	a4 cb       	rjmp	.-2232   	; 0x1bb0 <start+0x200>

00002468 <receivePassword>:
	}
}


void receivePassword (uint8 password[])
{
    2468:	0f 93       	push	r16
    246a:	1f 93       	push	r17
    246c:	df 93       	push	r29
    246e:	cf 93       	push	r28
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    2474:	61 97       	sbiw	r28, 0x11	; 17
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	f8 94       	cli
    247a:	de bf       	out	0x3e, r29	; 62
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	cd bf       	out	0x3d, r28	; 61
    2480:	99 8b       	std	Y+17, r25	; 0x11
    2482:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    2484:	1f 86       	std	Y+15, r1	; 0x0f
    2486:	0f c0       	rjmp	.+30     	; 0x24a6 <receivePassword+0x3e>
	{
		password [i] = UART_recieveByte();
    2488:	8f 85       	ldd	r24, Y+15	; 0x0f
    248a:	28 2f       	mov	r18, r24
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	88 89       	ldd	r24, Y+16	; 0x10
    2490:	99 89       	ldd	r25, Y+17	; 0x11
    2492:	8c 01       	movw	r16, r24
    2494:	02 0f       	add	r16, r18
    2496:	13 1f       	adc	r17, r19
    2498:	0e 94 3d 06 	call	0xc7a	; 0xc7a <UART_recieveByte>
    249c:	f8 01       	movw	r30, r16
    249e:	80 83       	st	Z, r24

void receivePassword (uint8 password[])
{
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    24a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24a2:	8f 5f       	subi	r24, 0xFF	; 255
    24a4:	8f 87       	std	Y+15, r24	; 0x0f
    24a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    24a8:	85 30       	cpi	r24, 0x05	; 5
    24aa:	70 f3       	brcs	.-36     	; 0x2488 <receivePassword+0x20>
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	a2 e0       	ldi	r26, 0x02	; 2
    24b2:	b3 e4       	ldi	r27, 0x43	; 67
    24b4:	8b 87       	std	Y+11, r24	; 0x0b
    24b6:	9c 87       	std	Y+12, r25	; 0x0c
    24b8:	ad 87       	std	Y+13, r26	; 0x0d
    24ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24be:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	4a ef       	ldi	r20, 0xFA	; 250
    24ca:	54 e4       	ldi	r21, 0x44	; 68
    24cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	8f 83       	std	Y+7, r24	; 0x07
    24d6:	98 87       	std	Y+8, r25	; 0x08
    24d8:	a9 87       	std	Y+9, r26	; 0x09
    24da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24dc:	6f 81       	ldd	r22, Y+7	; 0x07
    24de:	78 85       	ldd	r23, Y+8	; 0x08
    24e0:	89 85       	ldd	r24, Y+9	; 0x09
    24e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	40 e8       	ldi	r20, 0x80	; 128
    24ea:	5f e3       	ldi	r21, 0x3F	; 63
    24ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24f0:	88 23       	and	r24, r24
    24f2:	2c f4       	brge	.+10     	; 0x24fe <receivePassword+0x96>
		__ticks = 1;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	9e 83       	std	Y+6, r25	; 0x06
    24fa:	8d 83       	std	Y+5, r24	; 0x05
    24fc:	3f c0       	rjmp	.+126    	; 0x257c <receivePassword+0x114>
	else if (__tmp > 65535)
    24fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2500:	78 85       	ldd	r23, Y+8	; 0x08
    2502:	89 85       	ldd	r24, Y+9	; 0x09
    2504:	9a 85       	ldd	r25, Y+10	; 0x0a
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	3f ef       	ldi	r19, 0xFF	; 255
    250a:	4f e7       	ldi	r20, 0x7F	; 127
    250c:	57 e4       	ldi	r21, 0x47	; 71
    250e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2512:	18 16       	cp	r1, r24
    2514:	4c f5       	brge	.+82     	; 0x2568 <receivePassword+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2516:	6b 85       	ldd	r22, Y+11	; 0x0b
    2518:	7c 85       	ldd	r23, Y+12	; 0x0c
    251a:	8d 85       	ldd	r24, Y+13	; 0x0d
    251c:	9e 85       	ldd	r25, Y+14	; 0x0e
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	40 e2       	ldi	r20, 0x20	; 32
    2524:	51 e4       	ldi	r21, 0x41	; 65
    2526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	bc 01       	movw	r22, r24
    2530:	cd 01       	movw	r24, r26
    2532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	9e 83       	std	Y+6, r25	; 0x06
    253c:	8d 83       	std	Y+5, r24	; 0x05
    253e:	0f c0       	rjmp	.+30     	; 0x255e <receivePassword+0xf6>
    2540:	88 ec       	ldi	r24, 0xC8	; 200
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	9c 83       	std	Y+4, r25	; 0x04
    2546:	8b 83       	std	Y+3, r24	; 0x03
    2548:	8b 81       	ldd	r24, Y+3	; 0x03
    254a:	9c 81       	ldd	r25, Y+4	; 0x04
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <receivePassword+0xe4>
    2550:	9c 83       	std	Y+4, r25	; 0x04
    2552:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2554:	8d 81       	ldd	r24, Y+5	; 0x05
    2556:	9e 81       	ldd	r25, Y+6	; 0x06
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	9e 83       	std	Y+6, r25	; 0x06
    255c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255e:	8d 81       	ldd	r24, Y+5	; 0x05
    2560:	9e 81       	ldd	r25, Y+6	; 0x06
    2562:	00 97       	sbiw	r24, 0x00	; 0
    2564:	69 f7       	brne	.-38     	; 0x2540 <receivePassword+0xd8>
    2566:	14 c0       	rjmp	.+40     	; 0x2590 <receivePassword+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2568:	6f 81       	ldd	r22, Y+7	; 0x07
    256a:	78 85       	ldd	r23, Y+8	; 0x08
    256c:	89 85       	ldd	r24, Y+9	; 0x09
    256e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	9e 83       	std	Y+6, r25	; 0x06
    257a:	8d 83       	std	Y+5, r24	; 0x05
    257c:	8d 81       	ldd	r24, Y+5	; 0x05
    257e:	9e 81       	ldd	r25, Y+6	; 0x06
    2580:	9a 83       	std	Y+2, r25	; 0x02
    2582:	89 83       	std	Y+1, r24	; 0x01
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	9a 81       	ldd	r25, Y+2	; 0x02
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	f1 f7       	brne	.-4      	; 0x2588 <receivePassword+0x120>
    258c:	9a 83       	std	Y+2, r25	; 0x02
    258e:	89 83       	std	Y+1, r24	; 0x01
	{
		password [i] = UART_recieveByte();
	}
	_delay_ms (UART_DELAY);
}
    2590:	61 96       	adiw	r28, 0x11	; 17
    2592:	0f b6       	in	r0, 0x3f	; 63
    2594:	f8 94       	cli
    2596:	de bf       	out	0x3e, r29	; 62
    2598:	0f be       	out	0x3f, r0	; 63
    259a:	cd bf       	out	0x3d, r28	; 61
    259c:	cf 91       	pop	r28
    259e:	df 91       	pop	r29
    25a0:	1f 91       	pop	r17
    25a2:	0f 91       	pop	r16
    25a4:	08 95       	ret

000025a6 <verifyPassword>:



uint8 verifyPassword (uint8 password[] , uint8 confirmPassword[])
{
    25a6:	df 93       	push	r29
    25a8:	cf 93       	push	r28
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <verifyPassword+0x6>
    25ac:	00 d0       	rcall	.+0      	; 0x25ae <verifyPassword+0x8>
    25ae:	00 d0       	rcall	.+0      	; 0x25b0 <verifyPassword+0xa>
    25b0:	cd b7       	in	r28, 0x3d	; 61
    25b2:	de b7       	in	r29, 0x3e	; 62
    25b4:	9b 83       	std	Y+3, r25	; 0x03
    25b6:	8a 83       	std	Y+2, r24	; 0x02
    25b8:	7d 83       	std	Y+5, r23	; 0x05
    25ba:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    25bc:	19 82       	std	Y+1, r1	; 0x01
    25be:	19 c0       	rjmp	.+50     	; 0x25f2 <verifyPassword+0x4c>
	{
		if (password[i] != confirmPassword[i])
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	28 2f       	mov	r18, r24
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	9b 81       	ldd	r25, Y+3	; 0x03
    25ca:	fc 01       	movw	r30, r24
    25cc:	e2 0f       	add	r30, r18
    25ce:	f3 1f       	adc	r31, r19
    25d0:	40 81       	ld	r20, Z
    25d2:	89 81       	ldd	r24, Y+1	; 0x01
    25d4:	28 2f       	mov	r18, r24
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	8c 81       	ldd	r24, Y+4	; 0x04
    25da:	9d 81       	ldd	r25, Y+5	; 0x05
    25dc:	fc 01       	movw	r30, r24
    25de:	e2 0f       	add	r30, r18
    25e0:	f3 1f       	adc	r31, r19
    25e2:	80 81       	ld	r24, Z
    25e4:	48 17       	cp	r20, r24
    25e6:	11 f0       	breq	.+4      	; 0x25ec <verifyPassword+0x46>
		{
			return 0;
    25e8:	1e 82       	std	Y+6, r1	; 0x06
    25ea:	08 c0       	rjmp	.+16     	; 0x25fc <verifyPassword+0x56>

uint8 verifyPassword (uint8 password[] , uint8 confirmPassword[])
{
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	8f 5f       	subi	r24, 0xFF	; 255
    25f0:	89 83       	std	Y+1, r24	; 0x01
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	85 30       	cpi	r24, 0x05	; 5
    25f6:	20 f3       	brcs	.-56     	; 0x25c0 <verifyPassword+0x1a>
		if (password[i] != confirmPassword[i])
		{
			return 0;
		}
	}
	return 1;
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	8e 83       	std	Y+6, r24	; 0x06
    25fc:	8e 81       	ldd	r24, Y+6	; 0x06
}
    25fe:	26 96       	adiw	r28, 0x06	; 6
    2600:	0f b6       	in	r0, 0x3f	; 63
    2602:	f8 94       	cli
    2604:	de bf       	out	0x3e, r29	; 62
    2606:	0f be       	out	0x3f, r0	; 63
    2608:	cd bf       	out	0x3d, r28	; 61
    260a:	cf 91       	pop	r28
    260c:	df 91       	pop	r29
    260e:	08 95       	ret

00002610 <openDoor>:




void openDoor (void)
{
    2610:	df 93       	push	r29
    2612:	cf 93       	push	r28
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
	Timer1_init(&timerConfig);
    2618:	88 e6       	ldi	r24, 0x68	; 104
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <Timer1_init>

	DcMotor_Rotate(CLOCKWISE);
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DcMotor_Rotate>
	while (counter < 15);
    2626:	80 91 74 00 	lds	r24, 0x0074
    262a:	90 91 75 00 	lds	r25, 0x0075
    262e:	8f 30       	cpi	r24, 0x0F	; 15
    2630:	91 05       	cpc	r25, r1
    2632:	cc f3       	brlt	.-14     	; 0x2626 <openDoor+0x16>
	counter = 0;
    2634:	10 92 75 00 	sts	0x0075, r1
    2638:	10 92 74 00 	sts	0x0074, r1
	DcMotor_Rotate(STOP);
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DcMotor_Rotate>


	while (counter < 3);
    2642:	80 91 74 00 	lds	r24, 0x0074
    2646:	90 91 75 00 	lds	r25, 0x0075
    264a:	83 30       	cpi	r24, 0x03	; 3
    264c:	91 05       	cpc	r25, r1
    264e:	cc f3       	brlt	.-14     	; 0x2642 <openDoor+0x32>
	counter = 0;
    2650:	10 92 75 00 	sts	0x0075, r1
    2654:	10 92 74 00 	sts	0x0074, r1
	DcMotor_Rotate(ANTICLOCKWISE);
    2658:	82 e0       	ldi	r24, 0x02	; 2
    265a:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DcMotor_Rotate>


	while (counter < 15);
    265e:	80 91 74 00 	lds	r24, 0x0074
    2662:	90 91 75 00 	lds	r25, 0x0075
    2666:	8f 30       	cpi	r24, 0x0F	; 15
    2668:	91 05       	cpc	r25, r1
    266a:	cc f3       	brlt	.-14     	; 0x265e <openDoor+0x4e>
	counter = 0;
    266c:	10 92 75 00 	sts	0x0075, r1
    2670:	10 92 74 00 	sts	0x0074, r1
	DcMotor_Rotate(STOP);
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DcMotor_Rotate>
	Timer1_deInit();
    267a:	0e 94 81 07 	call	0xf02	; 0xf02 <Timer1_deInit>
}
    267e:	cf 91       	pop	r28
    2680:	df 91       	pop	r29
    2682:	08 95       	ret

00002684 <timerHandler>:




void timerHandler(void)
{
    2684:	df 93       	push	r29
    2686:	cf 93       	push	r28
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
	counter++;
    268c:	80 91 74 00 	lds	r24, 0x0074
    2690:	90 91 75 00 	lds	r25, 0x0075
    2694:	01 96       	adiw	r24, 0x01	; 1
    2696:	90 93 75 00 	sts	0x0075, r25
    269a:	80 93 74 00 	sts	0x0074, r24
}
    269e:	cf 91       	pop	r28
    26a0:	df 91       	pop	r29
    26a2:	08 95       	ret

000026a4 <falsePassword>:




void falsePassword (void)
{
    26a4:	df 93       	push	r29
    26a6:	cf 93       	push	r28
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
	if (falsePasswords >= 3)
    26ac:	80 91 76 00 	lds	r24, 0x0076
    26b0:	90 91 77 00 	lds	r25, 0x0077
    26b4:	83 30       	cpi	r24, 0x03	; 3
    26b6:	91 05       	cpc	r25, r1
    26b8:	cc f0       	brlt	.+50     	; 0x26ec <falsePassword+0x48>
	{
		falsePasswords = 0;
    26ba:	10 92 77 00 	sts	0x0077, r1
    26be:	10 92 76 00 	sts	0x0076, r1
		Timer1_init (&timerConfig);
    26c2:	88 e6       	ldi	r24, 0x68	; 104
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	0e 94 1e 07 	call	0xe3c	; 0xe3c <Timer1_init>
		Buzzer_on();
    26ca:	0e 94 c0 0c 	call	0x1980	; 0x1980 <Buzzer_on>
		while (counter < 60);
    26ce:	80 91 74 00 	lds	r24, 0x0074
    26d2:	90 91 75 00 	lds	r25, 0x0075
    26d6:	8c 33       	cpi	r24, 0x3C	; 60
    26d8:	91 05       	cpc	r25, r1
    26da:	cc f3       	brlt	.-14     	; 0x26ce <falsePassword+0x2a>
		Buzzer_off();
    26dc:	0e 94 cc 0c 	call	0x1998	; 0x1998 <Buzzer_off>
		counter = 0;
    26e0:	10 92 75 00 	sts	0x0075, r1
    26e4:	10 92 74 00 	sts	0x0074, r1
		Timer1_deInit();
    26e8:	0e 94 81 07 	call	0xf02	; 0xf02 <Timer1_deInit>
	}
}
    26ec:	cf 91       	pop	r28
    26ee:	df 91       	pop	r29
    26f0:	08 95       	ret

000026f2 <storePasswordeeprom>:



void storePasswordeeprom (uint8 password[])
{
    26f2:	df 93       	push	r29
    26f4:	cf 93       	push	r28
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
    26fa:	61 97       	sbiw	r28, 0x11	; 17
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	f8 94       	cli
    2700:	de bf       	out	0x3e, r29	; 62
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	cd bf       	out	0x3d, r28	; 61
    2706:	99 8b       	std	Y+17, r25	; 0x11
    2708:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for (i=0 ; i<5 ; ++i)
    270a:	1f 86       	std	Y+15, r1	; 0x0f
    270c:	88 c0       	rjmp	.+272    	; 0x281e <storePasswordeeprom+0x12c>
	{
	EEPROM_writeByte ((0X0090 + i) , (password[i]));
    270e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2710:	88 2f       	mov	r24, r24
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	80 57       	subi	r24, 0x70	; 112
    2716:	9f 4f       	sbci	r25, 0xFF	; 255
    2718:	ac 01       	movw	r20, r24
    271a:	8f 85       	ldd	r24, Y+15	; 0x0f
    271c:	28 2f       	mov	r18, r24
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	88 89       	ldd	r24, Y+16	; 0x10
    2722:	99 89       	ldd	r25, Y+17	; 0x11
    2724:	fc 01       	movw	r30, r24
    2726:	e2 0f       	add	r30, r18
    2728:	f3 1f       	adc	r31, r19
    272a:	20 81       	ld	r18, Z
    272c:	ca 01       	movw	r24, r20
    272e:	62 2f       	mov	r22, r18
    2730:	0e 94 c0 0b 	call	0x1780	; 0x1780 <EEPROM_writeByte>
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	a2 e0       	ldi	r26, 0x02	; 2
    273a:	b3 e4       	ldi	r27, 0x43	; 67
    273c:	8b 87       	std	Y+11, r24	; 0x0b
    273e:	9c 87       	std	Y+12, r25	; 0x0c
    2740:	ad 87       	std	Y+13, r26	; 0x0d
    2742:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2744:	6b 85       	ldd	r22, Y+11	; 0x0b
    2746:	7c 85       	ldd	r23, Y+12	; 0x0c
    2748:	8d 85       	ldd	r24, Y+13	; 0x0d
    274a:	9e 85       	ldd	r25, Y+14	; 0x0e
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	4a ef       	ldi	r20, 0xFA	; 250
    2752:	54 e4       	ldi	r21, 0x44	; 68
    2754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	8f 83       	std	Y+7, r24	; 0x07
    275e:	98 87       	std	Y+8, r25	; 0x08
    2760:	a9 87       	std	Y+9, r26	; 0x09
    2762:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2764:	6f 81       	ldd	r22, Y+7	; 0x07
    2766:	78 85       	ldd	r23, Y+8	; 0x08
    2768:	89 85       	ldd	r24, Y+9	; 0x09
    276a:	9a 85       	ldd	r25, Y+10	; 0x0a
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	40 e8       	ldi	r20, 0x80	; 128
    2772:	5f e3       	ldi	r21, 0x3F	; 63
    2774:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2778:	88 23       	and	r24, r24
    277a:	2c f4       	brge	.+10     	; 0x2786 <storePasswordeeprom+0x94>
		__ticks = 1;
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	9e 83       	std	Y+6, r25	; 0x06
    2782:	8d 83       	std	Y+5, r24	; 0x05
    2784:	3f c0       	rjmp	.+126    	; 0x2804 <storePasswordeeprom+0x112>
	else if (__tmp > 65535)
    2786:	6f 81       	ldd	r22, Y+7	; 0x07
    2788:	78 85       	ldd	r23, Y+8	; 0x08
    278a:	89 85       	ldd	r24, Y+9	; 0x09
    278c:	9a 85       	ldd	r25, Y+10	; 0x0a
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	3f ef       	ldi	r19, 0xFF	; 255
    2792:	4f e7       	ldi	r20, 0x7F	; 127
    2794:	57 e4       	ldi	r21, 0x47	; 71
    2796:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    279a:	18 16       	cp	r1, r24
    279c:	4c f5       	brge	.+82     	; 0x27f0 <storePasswordeeprom+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    279e:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    27a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	40 e2       	ldi	r20, 0x20	; 32
    27ac:	51 e4       	ldi	r21, 0x41	; 65
    27ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	bc 01       	movw	r22, r24
    27b8:	cd 01       	movw	r24, r26
    27ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	9e 83       	std	Y+6, r25	; 0x06
    27c4:	8d 83       	std	Y+5, r24	; 0x05
    27c6:	0f c0       	rjmp	.+30     	; 0x27e6 <storePasswordeeprom+0xf4>
    27c8:	88 ec       	ldi	r24, 0xC8	; 200
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	9c 83       	std	Y+4, r25	; 0x04
    27ce:	8b 83       	std	Y+3, r24	; 0x03
    27d0:	8b 81       	ldd	r24, Y+3	; 0x03
    27d2:	9c 81       	ldd	r25, Y+4	; 0x04
    27d4:	01 97       	sbiw	r24, 0x01	; 1
    27d6:	f1 f7       	brne	.-4      	; 0x27d4 <storePasswordeeprom+0xe2>
    27d8:	9c 83       	std	Y+4, r25	; 0x04
    27da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27dc:	8d 81       	ldd	r24, Y+5	; 0x05
    27de:	9e 81       	ldd	r25, Y+6	; 0x06
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	9e 83       	std	Y+6, r25	; 0x06
    27e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e6:	8d 81       	ldd	r24, Y+5	; 0x05
    27e8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ea:	00 97       	sbiw	r24, 0x00	; 0
    27ec:	69 f7       	brne	.-38     	; 0x27c8 <storePasswordeeprom+0xd6>
    27ee:	14 c0       	rjmp	.+40     	; 0x2818 <storePasswordeeprom+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f0:	6f 81       	ldd	r22, Y+7	; 0x07
    27f2:	78 85       	ldd	r23, Y+8	; 0x08
    27f4:	89 85       	ldd	r24, Y+9	; 0x09
    27f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	9e 83       	std	Y+6, r25	; 0x06
    2802:	8d 83       	std	Y+5, r24	; 0x05
    2804:	8d 81       	ldd	r24, Y+5	; 0x05
    2806:	9e 81       	ldd	r25, Y+6	; 0x06
    2808:	9a 83       	std	Y+2, r25	; 0x02
    280a:	89 83       	std	Y+1, r24	; 0x01
    280c:	89 81       	ldd	r24, Y+1	; 0x01
    280e:	9a 81       	ldd	r25, Y+2	; 0x02
    2810:	01 97       	sbiw	r24, 0x01	; 1
    2812:	f1 f7       	brne	.-4      	; 0x2810 <storePasswordeeprom+0x11e>
    2814:	9a 83       	std	Y+2, r25	; 0x02
    2816:	89 83       	std	Y+1, r24	; 0x01


void storePasswordeeprom (uint8 password[])
{
	uint8 i;
	for (i=0 ; i<5 ; ++i)
    2818:	8f 85       	ldd	r24, Y+15	; 0x0f
    281a:	8f 5f       	subi	r24, 0xFF	; 255
    281c:	8f 87       	std	Y+15, r24	; 0x0f
    281e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2820:	85 30       	cpi	r24, 0x05	; 5
    2822:	08 f4       	brcc	.+2      	; 0x2826 <storePasswordeeprom+0x134>
    2824:	74 cf       	rjmp	.-280    	; 0x270e <storePasswordeeprom+0x1c>
	{
	EEPROM_writeByte ((0X0090 + i) , (password[i]));
	_delay_ms(UART_DELAY);
	}
}
    2826:	61 96       	adiw	r28, 0x11	; 17
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	de bf       	out	0x3e, r29	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	cd bf       	out	0x3d, r28	; 61
    2832:	cf 91       	pop	r28
    2834:	df 91       	pop	r29
    2836:	08 95       	ret

00002838 <readPasswordeeprom>:



void readPasswordeeprom (uint8 password [])
{
    2838:	df 93       	push	r29
    283a:	cf 93       	push	r28
    283c:	cd b7       	in	r28, 0x3d	; 61
    283e:	de b7       	in	r29, 0x3e	; 62
    2840:	61 97       	sbiw	r28, 0x11	; 17
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	f8 94       	cli
    2846:	de bf       	out	0x3e, r29	; 62
    2848:	0f be       	out	0x3f, r0	; 63
    284a:	cd bf       	out	0x3d, r28	; 61
    284c:	99 8b       	std	Y+17, r25	; 0x11
    284e:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for (i=0 ; i<5 ; ++i)
    2850:	1f 86       	std	Y+15, r1	; 0x0f
    2852:	86 c0       	rjmp	.+268    	; 0x2960 <readPasswordeeprom+0x128>
	{
		EEPROM_readByte ((0x0090 + i) , (password + i));
    2854:	8f 85       	ldd	r24, Y+15	; 0x0f
    2856:	88 2f       	mov	r24, r24
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	80 57       	subi	r24, 0x70	; 112
    285c:	9f 4f       	sbci	r25, 0xFF	; 255
    285e:	ac 01       	movw	r20, r24
    2860:	8f 85       	ldd	r24, Y+15	; 0x0f
    2862:	28 2f       	mov	r18, r24
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	88 89       	ldd	r24, Y+16	; 0x10
    2868:	99 89       	ldd	r25, Y+17	; 0x11
    286a:	28 0f       	add	r18, r24
    286c:	39 1f       	adc	r19, r25
    286e:	ca 01       	movw	r24, r20
    2870:	b9 01       	movw	r22, r18
    2872:	0e 94 01 0c 	call	0x1802	; 0x1802 <EEPROM_readByte>
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	a8 ec       	ldi	r26, 0xC8	; 200
    287c:	b2 e4       	ldi	r27, 0x42	; 66
    287e:	8b 87       	std	Y+11, r24	; 0x0b
    2880:	9c 87       	std	Y+12, r25	; 0x0c
    2882:	ad 87       	std	Y+13, r26	; 0x0d
    2884:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2886:	6b 85       	ldd	r22, Y+11	; 0x0b
    2888:	7c 85       	ldd	r23, Y+12	; 0x0c
    288a:	8d 85       	ldd	r24, Y+13	; 0x0d
    288c:	9e 85       	ldd	r25, Y+14	; 0x0e
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	4a ef       	ldi	r20, 0xFA	; 250
    2894:	54 e4       	ldi	r21, 0x44	; 68
    2896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	8f 83       	std	Y+7, r24	; 0x07
    28a0:	98 87       	std	Y+8, r25	; 0x08
    28a2:	a9 87       	std	Y+9, r26	; 0x09
    28a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28a6:	6f 81       	ldd	r22, Y+7	; 0x07
    28a8:	78 85       	ldd	r23, Y+8	; 0x08
    28aa:	89 85       	ldd	r24, Y+9	; 0x09
    28ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	40 e8       	ldi	r20, 0x80	; 128
    28b4:	5f e3       	ldi	r21, 0x3F	; 63
    28b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ba:	88 23       	and	r24, r24
    28bc:	2c f4       	brge	.+10     	; 0x28c8 <readPasswordeeprom+0x90>
		__ticks = 1;
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	9e 83       	std	Y+6, r25	; 0x06
    28c4:	8d 83       	std	Y+5, r24	; 0x05
    28c6:	3f c0       	rjmp	.+126    	; 0x2946 <readPasswordeeprom+0x10e>
	else if (__tmp > 65535)
    28c8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ca:	78 85       	ldd	r23, Y+8	; 0x08
    28cc:	89 85       	ldd	r24, Y+9	; 0x09
    28ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	3f ef       	ldi	r19, 0xFF	; 255
    28d4:	4f e7       	ldi	r20, 0x7F	; 127
    28d6:	57 e4       	ldi	r21, 0x47	; 71
    28d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28dc:	18 16       	cp	r1, r24
    28de:	4c f5       	brge	.+82     	; 0x2932 <readPasswordeeprom+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	40 e2       	ldi	r20, 0x20	; 32
    28ee:	51 e4       	ldi	r21, 0x41	; 65
    28f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	bc 01       	movw	r22, r24
    28fa:	cd 01       	movw	r24, r26
    28fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	9e 83       	std	Y+6, r25	; 0x06
    2906:	8d 83       	std	Y+5, r24	; 0x05
    2908:	0f c0       	rjmp	.+30     	; 0x2928 <readPasswordeeprom+0xf0>
    290a:	88 ec       	ldi	r24, 0xC8	; 200
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	9c 83       	std	Y+4, r25	; 0x04
    2910:	8b 83       	std	Y+3, r24	; 0x03
    2912:	8b 81       	ldd	r24, Y+3	; 0x03
    2914:	9c 81       	ldd	r25, Y+4	; 0x04
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	f1 f7       	brne	.-4      	; 0x2916 <readPasswordeeprom+0xde>
    291a:	9c 83       	std	Y+4, r25	; 0x04
    291c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    291e:	8d 81       	ldd	r24, Y+5	; 0x05
    2920:	9e 81       	ldd	r25, Y+6	; 0x06
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	9e 83       	std	Y+6, r25	; 0x06
    2926:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2928:	8d 81       	ldd	r24, Y+5	; 0x05
    292a:	9e 81       	ldd	r25, Y+6	; 0x06
    292c:	00 97       	sbiw	r24, 0x00	; 0
    292e:	69 f7       	brne	.-38     	; 0x290a <readPasswordeeprom+0xd2>
    2930:	14 c0       	rjmp	.+40     	; 0x295a <readPasswordeeprom+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2932:	6f 81       	ldd	r22, Y+7	; 0x07
    2934:	78 85       	ldd	r23, Y+8	; 0x08
    2936:	89 85       	ldd	r24, Y+9	; 0x09
    2938:	9a 85       	ldd	r25, Y+10	; 0x0a
    293a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	9e 83       	std	Y+6, r25	; 0x06
    2944:	8d 83       	std	Y+5, r24	; 0x05
    2946:	8d 81       	ldd	r24, Y+5	; 0x05
    2948:	9e 81       	ldd	r25, Y+6	; 0x06
    294a:	9a 83       	std	Y+2, r25	; 0x02
    294c:	89 83       	std	Y+1, r24	; 0x01
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	9a 81       	ldd	r25, Y+2	; 0x02
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	f1 f7       	brne	.-4      	; 0x2952 <readPasswordeeprom+0x11a>
    2956:	9a 83       	std	Y+2, r25	; 0x02
    2958:	89 83       	std	Y+1, r24	; 0x01


void readPasswordeeprom (uint8 password [])
{
	uint8 i;
	for (i=0 ; i<5 ; ++i)
    295a:	8f 85       	ldd	r24, Y+15	; 0x0f
    295c:	8f 5f       	subi	r24, 0xFF	; 255
    295e:	8f 87       	std	Y+15, r24	; 0x0f
    2960:	8f 85       	ldd	r24, Y+15	; 0x0f
    2962:	85 30       	cpi	r24, 0x05	; 5
    2964:	08 f4       	brcc	.+2      	; 0x2968 <readPasswordeeprom+0x130>
    2966:	76 cf       	rjmp	.-276    	; 0x2854 <readPasswordeeprom+0x1c>
	{
		EEPROM_readByte ((0x0090 + i) , (password + i));
		_delay_ms(100);
	}
}
    2968:	61 96       	adiw	r28, 0x11	; 17
    296a:	0f b6       	in	r0, 0x3f	; 63
    296c:	f8 94       	cli
    296e:	de bf       	out	0x3e, r29	; 62
    2970:	0f be       	out	0x3f, r0	; 63
    2972:	cd bf       	out	0x3d, r28	; 61
    2974:	cf 91       	pop	r28
    2976:	df 91       	pop	r29
    2978:	08 95       	ret

0000297a <main>:
#include "APP/Control_ECU.h"



int main()
{
    297a:	df 93       	push	r29
    297c:	cf 93       	push	r28
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62
	start();
    2982:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <start>
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	90 e0       	ldi	r25, 0x00	; 0
}
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	08 95       	ret

00002990 <__prologue_saves__>:
    2990:	2f 92       	push	r2
    2992:	3f 92       	push	r3
    2994:	4f 92       	push	r4
    2996:	5f 92       	push	r5
    2998:	6f 92       	push	r6
    299a:	7f 92       	push	r7
    299c:	8f 92       	push	r8
    299e:	9f 92       	push	r9
    29a0:	af 92       	push	r10
    29a2:	bf 92       	push	r11
    29a4:	cf 92       	push	r12
    29a6:	df 92       	push	r13
    29a8:	ef 92       	push	r14
    29aa:	ff 92       	push	r15
    29ac:	0f 93       	push	r16
    29ae:	1f 93       	push	r17
    29b0:	cf 93       	push	r28
    29b2:	df 93       	push	r29
    29b4:	cd b7       	in	r28, 0x3d	; 61
    29b6:	de b7       	in	r29, 0x3e	; 62
    29b8:	ca 1b       	sub	r28, r26
    29ba:	db 0b       	sbc	r29, r27
    29bc:	0f b6       	in	r0, 0x3f	; 63
    29be:	f8 94       	cli
    29c0:	de bf       	out	0x3e, r29	; 62
    29c2:	0f be       	out	0x3f, r0	; 63
    29c4:	cd bf       	out	0x3d, r28	; 61
    29c6:	09 94       	ijmp

000029c8 <__epilogue_restores__>:
    29c8:	2a 88       	ldd	r2, Y+18	; 0x12
    29ca:	39 88       	ldd	r3, Y+17	; 0x11
    29cc:	48 88       	ldd	r4, Y+16	; 0x10
    29ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    29d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    29d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    29d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    29d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    29d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    29da:	b9 84       	ldd	r11, Y+9	; 0x09
    29dc:	c8 84       	ldd	r12, Y+8	; 0x08
    29de:	df 80       	ldd	r13, Y+7	; 0x07
    29e0:	ee 80       	ldd	r14, Y+6	; 0x06
    29e2:	fd 80       	ldd	r15, Y+5	; 0x05
    29e4:	0c 81       	ldd	r16, Y+4	; 0x04
    29e6:	1b 81       	ldd	r17, Y+3	; 0x03
    29e8:	aa 81       	ldd	r26, Y+2	; 0x02
    29ea:	b9 81       	ldd	r27, Y+1	; 0x01
    29ec:	ce 0f       	add	r28, r30
    29ee:	d1 1d       	adc	r29, r1
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	f8 94       	cli
    29f4:	de bf       	out	0x3e, r29	; 62
    29f6:	0f be       	out	0x3f, r0	; 63
    29f8:	cd bf       	out	0x3d, r28	; 61
    29fa:	ed 01       	movw	r28, r26
    29fc:	08 95       	ret

000029fe <_exit>:
    29fe:	f8 94       	cli

00002a00 <__stop_program>:
    2a00:	ff cf       	rjmp	.-2      	; 0x2a00 <__stop_program>
