
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e6  00800060  00003e46  00003eda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800146  00800146  00003fc0  2**0
                  ALLOC
  3 .stab         00003930  00000000  00000000  00003fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019ac  00000000  00000000  000078f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000929c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000093dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000954c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b195  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c080  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ce30  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000cf90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d21d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d9eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 b8 06 	jmp	0xd70	; 0xd70 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 34       	cpi	r26, 0x46	; 70
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e4       	ldi	r26, 0x46	; 70
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 34       	cpi	r26, 0x4A	; 74
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <main>
      8a:	0c 94 21 1f 	jmp	0x3e42	; 0x3e42 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a5 1e 	jmp	0x3d4a	; 0x3d4a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e3       	ldi	r26, 0x35	; 53
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c1 1e 	jmp	0x3d82	; 0x3d82 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cd 1e 	jmp	0x3d9a	; 0x3d9a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cd 1e 	jmp	0x3d9a	; 0x3d9a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a5 1e 	jmp	0x3d4a	; 0x3d4a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e3       	ldi	r24, 0x35	; 53
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c1 1e 	jmp	0x3d82	; 0x3d82 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cd 1e 	jmp	0x3d9a	; 0x3d9a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cd 1e 	jmp	0x3d9a	; 0x3d9a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cd 1e 	jmp	0x3d9a	; 0x3d9a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b5 1e 	jmp	0x3d6a	; 0x3d6a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d1 1e 	jmp	0x3da2	; 0x3da2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB |= (1<<RXEN) | (1<<TXEN);
     b54:	aa e2       	ldi	r26, 0x2A	; 42
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	ea e2       	ldi	r30, 0x2A	; 42
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	80 81       	ld	r24, Z
     b5e:	88 61       	ori	r24, 0x18	; 24
     b60:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC |= (1<<URSEL);
     b62:	a0 e4       	ldi	r26, 0x40	; 64
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e0 e4       	ldi	r30, 0x40	; 64
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	80 68       	ori	r24, 0x80	; 128
     b6e:	8c 93       	st	X, r24
    UCSRC |= (1<<UCSZ0) | (1<<UCSZ1);
     b70:	a0 e4       	ldi	r26, 0x40	; 64
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	e0 e4       	ldi	r30, 0x40	; 64
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	86 60       	ori	r24, 0x06	; 6
     b7c:	8c 93       	st	X, r24

    UCSRC |= ((Config_Ptr->parity) << 4); //Choose Parity Bits
     b7e:	a0 e4       	ldi	r26, 0x40	; 64
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	e0 e4       	ldi	r30, 0x40	; 64
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	28 2f       	mov	r18, r24
     b8a:	e9 81       	ldd	r30, Y+1	; 0x01
     b8c:	fa 81       	ldd	r31, Y+2	; 0x02
     b8e:	81 81       	ldd	r24, Z+1	; 0x01
     b90:	88 2f       	mov	r24, r24
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	82 95       	swap	r24
     b96:	92 95       	swap	r25
     b98:	90 7f       	andi	r25, 0xF0	; 240
     b9a:	98 27       	eor	r25, r24
     b9c:	80 7f       	andi	r24, 0xF0	; 240
     b9e:	98 27       	eor	r25, r24
     ba0:	82 2b       	or	r24, r18
     ba2:	8c 93       	st	X, r24


    if(Config_Ptr->bit_data)
     ba4:	e9 81       	ldd	r30, Y+1	; 0x01
     ba6:	fa 81       	ldd	r31, Y+2	; 0x02
     ba8:	80 81       	ld	r24, Z
     baa:	88 23       	and	r24, r24
     bac:	29 f1       	breq	.+74     	; 0xbf8 <UART_init+0xb2>
    {
    	UCSRC |= ((Config_Ptr->bit_data) << 6);
     bae:	a0 e4       	ldi	r26, 0x40	; 64
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e0 e4       	ldi	r30, 0x40	; 64
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	28 2f       	mov	r18, r24
     bba:	e9 81       	ldd	r30, Y+1	; 0x01
     bbc:	fa 81       	ldd	r31, Y+2	; 0x02
     bbe:	80 81       	ld	r24, Z
     bc0:	88 2f       	mov	r24, r24
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	00 24       	eor	r0, r0
     bc6:	96 95       	lsr	r25
     bc8:	87 95       	ror	r24
     bca:	07 94       	ror	r0
     bcc:	96 95       	lsr	r25
     bce:	87 95       	ror	r24
     bd0:	07 94       	ror	r0
     bd2:	98 2f       	mov	r25, r24
     bd4:	80 2d       	mov	r24, r0
     bd6:	82 2b       	or	r24, r18
     bd8:	8c 93       	st	X, r24

    	UCSRC |= (1<<UCPOL);
     bda:	a0 e4       	ldi	r26, 0x40	; 64
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e0 e4       	ldi	r30, 0x40	; 64
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	81 60       	ori	r24, 0x01	; 1
     be6:	8c 93       	st	X, r24

    	UBRRH = (Asynchronous_Normal >> 8);
     be8:	e0 e4       	ldi	r30, 0x40	; 64
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	10 82       	st	Z, r1
    	UBRRL = Asynchronous_Normal;
     bee:	e9 e2       	ldi	r30, 0x29	; 41
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	87 e6       	ldi	r24, 0x67	; 103
     bf4:	80 83       	st	Z, r24
     bf6:	25 c0       	rjmp	.+74     	; 0xc42 <UART_init+0xfc>
    }
	
    else
    {
    	UCSRC &= ~((Config_Ptr->bit_data) << 6);
     bf8:	a0 e4       	ldi	r26, 0x40	; 64
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	e0 e4       	ldi	r30, 0x40	; 64
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	28 2f       	mov	r18, r24
     c04:	e9 81       	ldd	r30, Y+1	; 0x01
     c06:	fa 81       	ldd	r31, Y+2	; 0x02
     c08:	80 81       	ld	r24, Z
     c0a:	88 2f       	mov	r24, r24
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	00 24       	eor	r0, r0
     c10:	96 95       	lsr	r25
     c12:	87 95       	ror	r24
     c14:	07 94       	ror	r0
     c16:	96 95       	lsr	r25
     c18:	87 95       	ror	r24
     c1a:	07 94       	ror	r0
     c1c:	98 2f       	mov	r25, r24
     c1e:	80 2d       	mov	r24, r0
     c20:	80 95       	com	r24
     c22:	82 23       	and	r24, r18
     c24:	8c 93       	st	X, r24
    	UCSRA |= (1<<U2X);
     c26:	ab e2       	ldi	r26, 0x2B	; 43
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	eb e2       	ldi	r30, 0x2B	; 43
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	82 60       	ori	r24, 0x02	; 2
     c32:	8c 93       	st	X, r24
    	UBRRH = (Asynchronous_doubleSpeed >> 8);
     c34:	e0 e4       	ldi	r30, 0x40	; 64
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	10 82       	st	Z, r1
    	UBRRL =Asynchronous_doubleSpeed;
     c3a:	e9 e2       	ldi	r30, 0x29	; 41
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	83 e3       	ldi	r24, 0x33	; 51
     c40:	80 83       	st	Z, r24
    }
}
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	0f 92       	push	r0
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
     c56:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     c58:	eb e2       	ldi	r30, 0x2B	; 43
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	88 2f       	mov	r24, r24
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	80 72       	andi	r24, 0x20	; 32
     c64:	90 70       	andi	r25, 0x00	; 0
     c66:	00 97       	sbiw	r24, 0x00	; 0
     c68:	b9 f3       	breq	.-18     	; 0xc58 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     c6a:	ec e2       	ldi	r30, 0x2C	; 44
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     c72:	0f 90       	pop	r0
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	08 95       	ret

00000c7a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     c7a:	df 93       	push	r29
     c7c:	cf 93       	push	r28
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     c82:	eb e2       	ldi	r30, 0x2B	; 43
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	88 23       	and	r24, r24
     c8a:	dc f7       	brge	.-10     	; 0xc82 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
     c8c:	ec e2       	ldi	r30, 0x2C	; 44
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
}
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	08 95       	ret

00000c98 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	00 d0       	rcall	.+0      	; 0xc9e <UART_sendString+0x6>
     c9e:	0f 92       	push	r0
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	9b 83       	std	Y+3, r25	; 0x03
     ca6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     ca8:	19 82       	std	Y+1, r1	; 0x01
     caa:	0e c0       	rjmp	.+28     	; 0xcc8 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	28 2f       	mov	r18, r24
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	9b 81       	ldd	r25, Y+3	; 0x03
     cb6:	fc 01       	movw	r30, r24
     cb8:	e2 0f       	add	r30, r18
     cba:	f3 1f       	adc	r31, r19
     cbc:	80 81       	ld	r24, Z
     cbe:	0e 94 26 06 	call	0xc4c	; 0xc4c <UART_sendByte>
		i++;
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	8f 5f       	subi	r24, 0xFF	; 255
     cc6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	9b 81       	ldd	r25, Y+3	; 0x03
     cd2:	fc 01       	movw	r30, r24
     cd4:	e2 0f       	add	r30, r18
     cd6:	f3 1f       	adc	r31, r19
     cd8:	80 81       	ld	r24, Z
     cda:	88 23       	and	r24, r24
     cdc:	39 f7       	brne	.-50     	; 0xcac <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	08 95       	ret

00000cea <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	00 d0       	rcall	.+0      	; 0xcf4 <UART_receiveString+0xa>
     cf4:	0f 92       	push	r0
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
     cfa:	9b 83       	std	Y+3, r25	; 0x03
     cfc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     cfe:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	9b 81       	ldd	r25, Y+3	; 0x03
     d0a:	8c 01       	movw	r16, r24
     d0c:	02 0f       	add	r16, r18
     d0e:	13 1f       	adc	r17, r19
     d10:	0e 94 3d 06 	call	0xc7a	; 0xc7a <UART_recieveByte>
     d14:	f8 01       	movw	r30, r16
     d16:	80 83       	st	Z, r24
     d18:	0f c0       	rjmp	.+30     	; 0xd38 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	8f 5f       	subi	r24, 0xFF	; 255
     d1e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	28 2f       	mov	r18, r24
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	9b 81       	ldd	r25, Y+3	; 0x03
     d2a:	8c 01       	movw	r16, r24
     d2c:	02 0f       	add	r16, r18
     d2e:	13 1f       	adc	r17, r19
     d30:	0e 94 3d 06 	call	0xc7a	; 0xc7a <UART_recieveByte>
     d34:	f8 01       	movw	r30, r16
     d36:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	9b 81       	ldd	r25, Y+3	; 0x03
     d42:	fc 01       	movw	r30, r24
     d44:	e2 0f       	add	r30, r18
     d46:	f3 1f       	adc	r31, r19
     d48:	80 81       	ld	r24, Z
     d4a:	83 32       	cpi	r24, 0x23	; 35
     d4c:	31 f7       	brne	.-52     	; 0xd1a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	8a 81       	ldd	r24, Y+2	; 0x02
     d56:	9b 81       	ldd	r25, Y+3	; 0x03
     d58:	fc 01       	movw	r30, r24
     d5a:	e2 0f       	add	r30, r18
     d5c:	f3 1f       	adc	r31, r19
     d5e:	10 82       	st	Z, r1
}
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	08 95       	ret

00000d70 <__vector_9>:
/*******************************************************************************
 *                                ISR                                          *
 *******************************************************************************/
/* Timer1 OVERFLOW mode */
ISR(TIMER1_OVF_vect)
{
     d70:	1f 92       	push	r1
     d72:	0f 92       	push	r0
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	0f 92       	push	r0
     d78:	11 24       	eor	r1, r1
     d7a:	2f 93       	push	r18
     d7c:	3f 93       	push	r19
     d7e:	4f 93       	push	r20
     d80:	5f 93       	push	r21
     d82:	6f 93       	push	r22
     d84:	7f 93       	push	r23
     d86:	8f 93       	push	r24
     d88:	9f 93       	push	r25
     d8a:	af 93       	push	r26
     d8c:	bf 93       	push	r27
     d8e:	ef 93       	push	r30
     d90:	ff 93       	push	r31
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
	if (*g_Timer1CallBackPtr != NULL_PTR)
     d9a:	80 91 46 01 	lds	r24, 0x0146
     d9e:	90 91 47 01 	lds	r25, 0x0147
     da2:	00 97       	sbiw	r24, 0x00	; 0
     da4:	29 f0       	breq	.+10     	; 0xdb0 <__vector_9+0x40>
	{
		(*g_Timer1CallBackPtr)();
     da6:	e0 91 46 01 	lds	r30, 0x0146
     daa:	f0 91 47 01 	lds	r31, 0x0147
     dae:	09 95       	icall
	}
}
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	ff 91       	pop	r31
     db6:	ef 91       	pop	r30
     db8:	bf 91       	pop	r27
     dba:	af 91       	pop	r26
     dbc:	9f 91       	pop	r25
     dbe:	8f 91       	pop	r24
     dc0:	7f 91       	pop	r23
     dc2:	6f 91       	pop	r22
     dc4:	5f 91       	pop	r21
     dc6:	4f 91       	pop	r20
     dc8:	3f 91       	pop	r19
     dca:	2f 91       	pop	r18
     dcc:	0f 90       	pop	r0
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	0f 90       	pop	r0
     dd2:	1f 90       	pop	r1
     dd4:	18 95       	reti

00000dd6 <__vector_7>:

/* Timer1 COMPARE mode */
ISR(TIMER1_COMPA_vect)
{
     dd6:	1f 92       	push	r1
     dd8:	0f 92       	push	r0
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	0f 92       	push	r0
     dde:	11 24       	eor	r1, r1
     de0:	2f 93       	push	r18
     de2:	3f 93       	push	r19
     de4:	4f 93       	push	r20
     de6:	5f 93       	push	r21
     de8:	6f 93       	push	r22
     dea:	7f 93       	push	r23
     dec:	8f 93       	push	r24
     dee:	9f 93       	push	r25
     df0:	af 93       	push	r26
     df2:	bf 93       	push	r27
     df4:	ef 93       	push	r30
     df6:	ff 93       	push	r31
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	if (*g_Timer1CallBackPtr != NULL_PTR)
     e00:	80 91 46 01 	lds	r24, 0x0146
     e04:	90 91 47 01 	lds	r25, 0x0147
     e08:	00 97       	sbiw	r24, 0x00	; 0
     e0a:	29 f0       	breq	.+10     	; 0xe16 <__vector_7+0x40>
	{
		(*g_Timer1CallBackPtr)();
     e0c:	e0 91 46 01 	lds	r30, 0x0146
     e10:	f0 91 47 01 	lds	r31, 0x0147
     e14:	09 95       	icall
	}
}
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	ff 91       	pop	r31
     e1c:	ef 91       	pop	r30
     e1e:	bf 91       	pop	r27
     e20:	af 91       	pop	r26
     e22:	9f 91       	pop	r25
     e24:	8f 91       	pop	r24
     e26:	7f 91       	pop	r23
     e28:	6f 91       	pop	r22
     e2a:	5f 91       	pop	r21
     e2c:	4f 91       	pop	r20
     e2e:	3f 91       	pop	r19
     e30:	2f 91       	pop	r18
     e32:	0f 90       	pop	r0
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	0f 90       	pop	r0
     e38:	1f 90       	pop	r1
     e3a:	18 95       	reti

00000e3c <Timer1_init>:
/*
 * Description: A function that initialize a timer1 with dynamic configurations.
 *
 */
void Timer1_init(const Timer1_Configtype * Config_Ptr)
{
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	00 d0       	rcall	.+0      	; 0xe42 <Timer1_init+0x6>
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	9a 83       	std	Y+2, r25	; 0x02
     e48:	89 83       	std	Y+1, r24	; 0x01
        TCCR1A =0;
     e4a:	ef e4       	ldi	r30, 0x4F	; 79
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	10 82       	st	Z, r1
		SET_BIT(TCCR1A,FOC1A); /* for non-PWM mode */
     e50:	af e4       	ldi	r26, 0x4F	; 79
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	ef e4       	ldi	r30, 0x4F	; 79
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	88 60       	ori	r24, 0x08	; 8
     e5c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
     e5e:	af e4       	ldi	r26, 0x4F	; 79
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	ef e4       	ldi	r30, 0x4F	; 79
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	84 60       	ori	r24, 0x04	; 4
     e6a:	8c 93       	st	X, r24
		TCCR1B = Config_Ptr->prescale;
     e6c:	ae e4       	ldi	r26, 0x4E	; 78
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e9 81       	ldd	r30, Y+1	; 0x01
     e72:	fa 81       	ldd	r31, Y+2	; 0x02
     e74:	85 81       	ldd	r24, Z+5	; 0x05
     e76:	8c 93       	st	X, r24
		TCNT1 = Config_Ptr->initialvalue;
     e78:	ac e4       	ldi	r26, 0x4C	; 76
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e9 81       	ldd	r30, Y+1	; 0x01
     e7e:	fa 81       	ldd	r31, Y+2	; 0x02
     e80:	81 81       	ldd	r24, Z+1	; 0x01
     e82:	92 81       	ldd	r25, Z+2	; 0x02
     e84:	11 96       	adiw	r26, 0x01	; 1
     e86:	9c 93       	st	X, r25
     e88:	8e 93       	st	-X, r24

		if( (Config_Ptr -> mode) == NORMAL )
     e8a:	e9 81       	ldd	r30, Y+1	; 0x01
     e8c:	fa 81       	ldd	r31, Y+2	; 0x02
     e8e:	80 81       	ld	r24, Z
     e90:	88 23       	and	r24, r24
     e92:	79 f4       	brne	.+30     	; 0xeb2 <Timer1_init+0x76>
		{
			/* Enable interrupts for overflow mode */
			SET_BIT(TIMSK,TOIE1);
     e94:	a9 e5       	ldi	r26, 0x59	; 89
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e9 e5       	ldi	r30, 0x59	; 89
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	84 60       	ori	r24, 0x04	; 4
     ea0:	8c 93       	st	X, r24
			/* Enable overflow flag */
			SET_BIT(TIFR,TOV1);
     ea2:	a8 e5       	ldi	r26, 0x58	; 88
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e8 e5       	ldi	r30, 0x58	; 88
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	84 60       	ori	r24, 0x04	; 4
     eae:	8c 93       	st	X, r24
     eb0:	23 c0       	rjmp	.+70     	; 0xef8 <Timer1_init+0xbc>
		}
		else if ( (Config_Ptr -> mode) == COMPARE )
     eb2:	e9 81       	ldd	r30, Y+1	; 0x01
     eb4:	fa 81       	ldd	r31, Y+2	; 0x02
     eb6:	80 81       	ld	r24, Z
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	f1 f4       	brne	.+60     	; 0xef8 <Timer1_init+0xbc>
		{
			SET_BIT(TCCR1B,WGM12);
     ebc:	ae e4       	ldi	r26, 0x4E	; 78
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	ee e4       	ldi	r30, 0x4E	; 78
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	88 60       	ori	r24, 0x08	; 8
     ec8:	8c 93       	st	X, r24
			OCR1A = Config_Ptr -> comparevalue;
     eca:	aa e4       	ldi	r26, 0x4A	; 74
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e9 81       	ldd	r30, Y+1	; 0x01
     ed0:	fa 81       	ldd	r31, Y+2	; 0x02
     ed2:	83 81       	ldd	r24, Z+3	; 0x03
     ed4:	94 81       	ldd	r25, Z+4	; 0x04
     ed6:	11 96       	adiw	r26, 0x01	; 1
     ed8:	9c 93       	st	X, r25
     eda:	8e 93       	st	-X, r24
			SET_BIT(TIMSK,OCIE1A); /* enable interrupts for CTC mode */
     edc:	a9 e5       	ldi	r26, 0x59	; 89
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e9 e5       	ldi	r30, 0x59	; 89
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	80 61       	ori	r24, 0x10	; 16
     ee8:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF1A); /* enable CTC flag */
     eea:	a8 e5       	ldi	r26, 0x58	; 88
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e8 e5       	ldi	r30, 0x58	; 88
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	80 61       	ori	r24, 0x10	; 16
     ef6:	8c 93       	st	X, r24
		}
}
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <Timer1_deInit>:
/*
 * Description: A function that Deinitialize a timer1 with dynamic configurations.
 *
 */
void Timer1_deInit(void)
{
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
	TCCR1A =0;
     f0a:	ef e4       	ldi	r30, 0x4F	; 79
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	10 82       	st	Z, r1
	TCCR1B = 0; /* disable clock */
     f10:	ee e4       	ldi	r30, 0x4E	; 78
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	10 82       	st	Z, r1
	TCNT1 = 0;
     f16:	ec e4       	ldi	r30, 0x4C	; 76
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	11 82       	std	Z+1, r1	; 0x01
     f1c:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK, TOIE1); /* disable interrupts for overflow mode */
     f1e:	a9 e5       	ldi	r26, 0x59	; 89
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e9 e5       	ldi	r30, 0x59	; 89
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	8b 7f       	andi	r24, 0xFB	; 251
     f2a:	8c 93       	st	X, r24
	OCR1A = 0;  /* clear compare value for CTC mode */
     f2c:	ea e4       	ldi	r30, 0x4A	; 74
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	11 82       	std	Z+1, r1	; 0x01
     f32:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK, OCIE1A); /* disable interrupts for CTC mode */
     f34:	a9 e5       	ldi	r26, 0x59	; 89
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e9 e5       	ldi	r30, 0x59	; 89
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	8f 7e       	andi	r24, 0xEF	; 239
     f40:	8c 93       	st	X, r24
	g_Timer1CallBackPtr = NULL_PTR;
     f42:	10 92 47 01 	sts	0x0147, r1
     f46:	10 92 46 01 	sts	0x0146, r1
}
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <Timer1_setCallBack>:
/*
 * Description: A function that Call Back A Function.
 *
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	00 d0       	rcall	.+0      	; 0xf56 <Timer1_setCallBack+0x6>
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	9a 83       	std	Y+2, r25	; 0x02
     f5c:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1CallBackPtr = a_ptr;
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	9a 81       	ldd	r25, Y+2	; 0x02
     f62:	90 93 47 01 	sts	0x0147, r25
     f66:	80 93 46 01 	sts	0x0146, r24
}
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <Timer1_setValue>:
/*
 * Description: A function that set a new value.
 *
 */
void Timer1_setValue (uint8 newValue)
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	0f 92       	push	r0
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = newValue;
     f80:	ec e4       	ldi	r30, 0x4C	; 76
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	88 2f       	mov	r24, r24
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	91 83       	std	Z+1, r25	; 0x01
     f8c:	80 83       	st	Z, r24
}
     f8e:	0f 90       	pop	r0
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <Timer1_clearValue>:
/*
 * Description: A function that clear the value.
 *
 */
void Timer1_clearValue(void)
{
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
     f9e:	ec e4       	ldi	r30, 0x4C	; 76
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	11 82       	std	Z+1, r1	; 0x01
     fa4:	10 82       	st	Z, r1
}
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <GPIO_setupPinDirection+0x6>
     fb2:	00 d0       	rcall	.+0      	; 0xfb4 <GPIO_setupPinDirection+0x8>
     fb4:	0f 92       	push	r0
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	6a 83       	std	Y+2, r22	; 0x02
     fbe:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	88 30       	cpi	r24, 0x08	; 8
     fc4:	08 f0       	brcs	.+2      	; 0xfc8 <GPIO_setupPinDirection+0x1c>
     fc6:	d5 c0       	rjmp	.+426    	; 0x1172 <GPIO_setupPinDirection+0x1c6>
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	84 30       	cpi	r24, 0x04	; 4
     fcc:	08 f0       	brcs	.+2      	; 0xfd0 <GPIO_setupPinDirection+0x24>
     fce:	d1 c0       	rjmp	.+418    	; 0x1172 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	3d 83       	std	Y+5, r19	; 0x05
     fd8:	2c 83       	std	Y+4, r18	; 0x04
     fda:	8c 81       	ldd	r24, Y+4	; 0x04
     fdc:	9d 81       	ldd	r25, Y+5	; 0x05
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	91 05       	cpc	r25, r1
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <GPIO_setupPinDirection+0x3a>
     fe4:	43 c0       	rjmp	.+134    	; 0x106c <GPIO_setupPinDirection+0xc0>
     fe6:	2c 81       	ldd	r18, Y+4	; 0x04
     fe8:	3d 81       	ldd	r19, Y+5	; 0x05
     fea:	22 30       	cpi	r18, 0x02	; 2
     fec:	31 05       	cpc	r19, r1
     fee:	2c f4       	brge	.+10     	; 0xffa <GPIO_setupPinDirection+0x4e>
     ff0:	8c 81       	ldd	r24, Y+4	; 0x04
     ff2:	9d 81       	ldd	r25, Y+5	; 0x05
     ff4:	00 97       	sbiw	r24, 0x00	; 0
     ff6:	71 f0       	breq	.+28     	; 0x1014 <GPIO_setupPinDirection+0x68>
     ff8:	bc c0       	rjmp	.+376    	; 0x1172 <GPIO_setupPinDirection+0x1c6>
     ffa:	2c 81       	ldd	r18, Y+4	; 0x04
     ffc:	3d 81       	ldd	r19, Y+5	; 0x05
     ffe:	22 30       	cpi	r18, 0x02	; 2
    1000:	31 05       	cpc	r19, r1
    1002:	09 f4       	brne	.+2      	; 0x1006 <GPIO_setupPinDirection+0x5a>
    1004:	5f c0       	rjmp	.+190    	; 0x10c4 <GPIO_setupPinDirection+0x118>
    1006:	8c 81       	ldd	r24, Y+4	; 0x04
    1008:	9d 81       	ldd	r25, Y+5	; 0x05
    100a:	83 30       	cpi	r24, 0x03	; 3
    100c:	91 05       	cpc	r25, r1
    100e:	09 f4       	brne	.+2      	; 0x1012 <GPIO_setupPinDirection+0x66>
    1010:	85 c0       	rjmp	.+266    	; 0x111c <GPIO_setupPinDirection+0x170>
    1012:	af c0       	rjmp	.+350    	; 0x1172 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	81 30       	cpi	r24, 0x01	; 1
    1018:	a1 f4       	brne	.+40     	; 0x1042 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    101a:	aa e3       	ldi	r26, 0x3A	; 58
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	ea e3       	ldi	r30, 0x3A	; 58
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	48 2f       	mov	r20, r24
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	02 2e       	mov	r0, r18
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <GPIO_setupPinDirection+0x8c>
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	0a 94       	dec	r0
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <GPIO_setupPinDirection+0x88>
    103c:	84 2b       	or	r24, r20
    103e:	8c 93       	st	X, r24
    1040:	98 c0       	rjmp	.+304    	; 0x1172 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1042:	aa e3       	ldi	r26, 0x3A	; 58
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	ea e3       	ldi	r30, 0x3A	; 58
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	48 2f       	mov	r20, r24
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 2e       	mov	r0, r18
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <GPIO_setupPinDirection+0xb4>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	0a 94       	dec	r0
    1062:	e2 f7       	brpl	.-8      	; 0x105c <GPIO_setupPinDirection+0xb0>
    1064:	80 95       	com	r24
    1066:	84 23       	and	r24, r20
    1068:	8c 93       	st	X, r24
    106a:	83 c0       	rjmp	.+262    	; 0x1172 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	a1 f4       	brne	.+40     	; 0x109a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1072:	a7 e3       	ldi	r26, 0x37	; 55
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e7 e3       	ldi	r30, 0x37	; 55
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <GPIO_setupPinDirection+0xe4>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <GPIO_setupPinDirection+0xe0>
    1094:	84 2b       	or	r24, r20
    1096:	8c 93       	st	X, r24
    1098:	6c c0       	rjmp	.+216    	; 0x1172 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    109a:	a7 e3       	ldi	r26, 0x37	; 55
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e7 e3       	ldi	r30, 0x37	; 55
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	48 2f       	mov	r20, r24
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 2e       	mov	r0, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <GPIO_setupPinDirection+0x10c>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	0a 94       	dec	r0
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <GPIO_setupPinDirection+0x108>
    10bc:	80 95       	com	r24
    10be:	84 23       	and	r24, r20
    10c0:	8c 93       	st	X, r24
    10c2:	57 c0       	rjmp	.+174    	; 0x1172 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	a1 f4       	brne	.+40     	; 0x10f2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    10ca:	a4 e3       	ldi	r26, 0x34	; 52
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e4 e3       	ldi	r30, 0x34	; 52
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	48 2f       	mov	r20, r24
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 2e       	mov	r0, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <GPIO_setupPinDirection+0x13c>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	0a 94       	dec	r0
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <GPIO_setupPinDirection+0x138>
    10ec:	84 2b       	or	r24, r20
    10ee:	8c 93       	st	X, r24
    10f0:	40 c0       	rjmp	.+128    	; 0x1172 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    10f2:	a4 e3       	ldi	r26, 0x34	; 52
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e4 e3       	ldi	r30, 0x34	; 52
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	48 2f       	mov	r20, r24
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 2e       	mov	r0, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <GPIO_setupPinDirection+0x164>
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	0a 94       	dec	r0
    1112:	e2 f7       	brpl	.-8      	; 0x110c <GPIO_setupPinDirection+0x160>
    1114:	80 95       	com	r24
    1116:	84 23       	and	r24, r20
    1118:	8c 93       	st	X, r24
    111a:	2b c0       	rjmp	.+86     	; 0x1172 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	a1 f4       	brne	.+40     	; 0x114a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1122:	a1 e3       	ldi	r26, 0x31	; 49
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e1 e3       	ldi	r30, 0x31	; 49
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	48 2f       	mov	r20, r24
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 2e       	mov	r0, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <GPIO_setupPinDirection+0x194>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	0a 94       	dec	r0
    1142:	e2 f7       	brpl	.-8      	; 0x113c <GPIO_setupPinDirection+0x190>
    1144:	84 2b       	or	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	14 c0       	rjmp	.+40     	; 0x1172 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    114a:	a1 e3       	ldi	r26, 0x31	; 49
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e1 e3       	ldi	r30, 0x31	; 49
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	48 2f       	mov	r20, r24
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 2e       	mov	r0, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <GPIO_setupPinDirection+0x1bc>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	0a 94       	dec	r0
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <GPIO_setupPinDirection+0x1b8>
    116c:	80 95       	com	r24
    116e:	84 23       	and	r24, r20
    1170:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	08 95       	ret

00001182 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	00 d0       	rcall	.+0      	; 0x1188 <GPIO_writePin+0x6>
    1188:	00 d0       	rcall	.+0      	; 0x118a <GPIO_writePin+0x8>
    118a:	0f 92       	push	r0
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	89 83       	std	Y+1, r24	; 0x01
    1192:	6a 83       	std	Y+2, r22	; 0x02
    1194:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	88 30       	cpi	r24, 0x08	; 8
    119a:	08 f0       	brcs	.+2      	; 0x119e <GPIO_writePin+0x1c>
    119c:	d5 c0       	rjmp	.+426    	; 0x1348 <GPIO_writePin+0x1c6>
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	84 30       	cpi	r24, 0x04	; 4
    11a2:	08 f0       	brcs	.+2      	; 0x11a6 <GPIO_writePin+0x24>
    11a4:	d1 c0       	rjmp	.+418    	; 0x1348 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	3d 83       	std	Y+5, r19	; 0x05
    11ae:	2c 83       	std	Y+4, r18	; 0x04
    11b0:	8c 81       	ldd	r24, Y+4	; 0x04
    11b2:	9d 81       	ldd	r25, Y+5	; 0x05
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	91 05       	cpc	r25, r1
    11b8:	09 f4       	brne	.+2      	; 0x11bc <GPIO_writePin+0x3a>
    11ba:	43 c0       	rjmp	.+134    	; 0x1242 <GPIO_writePin+0xc0>
    11bc:	2c 81       	ldd	r18, Y+4	; 0x04
    11be:	3d 81       	ldd	r19, Y+5	; 0x05
    11c0:	22 30       	cpi	r18, 0x02	; 2
    11c2:	31 05       	cpc	r19, r1
    11c4:	2c f4       	brge	.+10     	; 0x11d0 <GPIO_writePin+0x4e>
    11c6:	8c 81       	ldd	r24, Y+4	; 0x04
    11c8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	71 f0       	breq	.+28     	; 0x11ea <GPIO_writePin+0x68>
    11ce:	bc c0       	rjmp	.+376    	; 0x1348 <GPIO_writePin+0x1c6>
    11d0:	2c 81       	ldd	r18, Y+4	; 0x04
    11d2:	3d 81       	ldd	r19, Y+5	; 0x05
    11d4:	22 30       	cpi	r18, 0x02	; 2
    11d6:	31 05       	cpc	r19, r1
    11d8:	09 f4       	brne	.+2      	; 0x11dc <GPIO_writePin+0x5a>
    11da:	5f c0       	rjmp	.+190    	; 0x129a <GPIO_writePin+0x118>
    11dc:	8c 81       	ldd	r24, Y+4	; 0x04
    11de:	9d 81       	ldd	r25, Y+5	; 0x05
    11e0:	83 30       	cpi	r24, 0x03	; 3
    11e2:	91 05       	cpc	r25, r1
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <GPIO_writePin+0x66>
    11e6:	85 c0       	rjmp	.+266    	; 0x12f2 <GPIO_writePin+0x170>
    11e8:	af c0       	rjmp	.+350    	; 0x1348 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	a1 f4       	brne	.+40     	; 0x1218 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    11f0:	ab e3       	ldi	r26, 0x3B	; 59
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	eb e3       	ldi	r30, 0x3B	; 59
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	48 2f       	mov	r20, r24
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 2e       	mov	r0, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <GPIO_writePin+0x8c>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	0a 94       	dec	r0
    1210:	e2 f7       	brpl	.-8      	; 0x120a <GPIO_writePin+0x88>
    1212:	84 2b       	or	r24, r20
    1214:	8c 93       	st	X, r24
    1216:	98 c0       	rjmp	.+304    	; 0x1348 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1218:	ab e3       	ldi	r26, 0x3B	; 59
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	eb e3       	ldi	r30, 0x3B	; 59
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 2e       	mov	r0, r18
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <GPIO_writePin+0xb4>
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	0a 94       	dec	r0
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <GPIO_writePin+0xb0>
    123a:	80 95       	com	r24
    123c:	84 23       	and	r24, r20
    123e:	8c 93       	st	X, r24
    1240:	83 c0       	rjmp	.+262    	; 0x1348 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	81 30       	cpi	r24, 0x01	; 1
    1246:	a1 f4       	brne	.+40     	; 0x1270 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1248:	a8 e3       	ldi	r26, 0x38	; 56
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e8 e3       	ldi	r30, 0x38	; 56
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <GPIO_writePin+0xe4>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <GPIO_writePin+0xe0>
    126a:	84 2b       	or	r24, r20
    126c:	8c 93       	st	X, r24
    126e:	6c c0       	rjmp	.+216    	; 0x1348 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1270:	a8 e3       	ldi	r26, 0x38	; 56
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e8 e3       	ldi	r30, 0x38	; 56
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	48 2f       	mov	r20, r24
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	02 2e       	mov	r0, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <GPIO_writePin+0x10c>
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	0a 94       	dec	r0
    1290:	e2 f7       	brpl	.-8      	; 0x128a <GPIO_writePin+0x108>
    1292:	80 95       	com	r24
    1294:	84 23       	and	r24, r20
    1296:	8c 93       	st	X, r24
    1298:	57 c0       	rjmp	.+174    	; 0x1348 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	81 30       	cpi	r24, 0x01	; 1
    129e:	a1 f4       	brne	.+40     	; 0x12c8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    12a0:	a5 e3       	ldi	r26, 0x35	; 53
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e5 e3       	ldi	r30, 0x35	; 53
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <GPIO_writePin+0x13c>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <GPIO_writePin+0x138>
    12c2:	84 2b       	or	r24, r20
    12c4:	8c 93       	st	X, r24
    12c6:	40 c0       	rjmp	.+128    	; 0x1348 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    12c8:	a5 e3       	ldi	r26, 0x35	; 53
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e5 e3       	ldi	r30, 0x35	; 53
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	48 2f       	mov	r20, r24
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	02 2e       	mov	r0, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <GPIO_writePin+0x164>
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	0a 94       	dec	r0
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <GPIO_writePin+0x160>
    12ea:	80 95       	com	r24
    12ec:	84 23       	and	r24, r20
    12ee:	8c 93       	st	X, r24
    12f0:	2b c0       	rjmp	.+86     	; 0x1348 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	a1 f4       	brne	.+40     	; 0x1320 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    12f8:	a2 e3       	ldi	r26, 0x32	; 50
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e2 e3       	ldi	r30, 0x32	; 50
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <GPIO_writePin+0x194>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <GPIO_writePin+0x190>
    131a:	84 2b       	or	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	14 c0       	rjmp	.+40     	; 0x1348 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1320:	a2 e3       	ldi	r26, 0x32	; 50
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e2 e3       	ldi	r30, 0x32	; 50
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	48 2f       	mov	r20, r24
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 2e       	mov	r0, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <GPIO_writePin+0x1bc>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	0a 94       	dec	r0
    1340:	e2 f7       	brpl	.-8      	; 0x133a <GPIO_writePin+0x1b8>
    1342:	80 95       	com	r24
    1344:	84 23       	and	r24, r20
    1346:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	00 d0       	rcall	.+0      	; 0x135e <GPIO_readPin+0x6>
    135e:	00 d0       	rcall	.+0      	; 0x1360 <GPIO_readPin+0x8>
    1360:	0f 92       	push	r0
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	8a 83       	std	Y+2, r24	; 0x02
    1368:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    136a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	88 30       	cpi	r24, 0x08	; 8
    1370:	08 f0       	brcs	.+2      	; 0x1374 <GPIO_readPin+0x1c>
    1372:	84 c0       	rjmp	.+264    	; 0x147c <GPIO_readPin+0x124>
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	84 30       	cpi	r24, 0x04	; 4
    1378:	08 f0       	brcs	.+2      	; 0x137c <GPIO_readPin+0x24>
    137a:	80 c0       	rjmp	.+256    	; 0x147c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	3d 83       	std	Y+5, r19	; 0x05
    1384:	2c 83       	std	Y+4, r18	; 0x04
    1386:	4c 81       	ldd	r20, Y+4	; 0x04
    1388:	5d 81       	ldd	r21, Y+5	; 0x05
    138a:	41 30       	cpi	r20, 0x01	; 1
    138c:	51 05       	cpc	r21, r1
    138e:	79 f1       	breq	.+94     	; 0x13ee <GPIO_readPin+0x96>
    1390:	8c 81       	ldd	r24, Y+4	; 0x04
    1392:	9d 81       	ldd	r25, Y+5	; 0x05
    1394:	82 30       	cpi	r24, 0x02	; 2
    1396:	91 05       	cpc	r25, r1
    1398:	34 f4       	brge	.+12     	; 0x13a6 <GPIO_readPin+0x4e>
    139a:	2c 81       	ldd	r18, Y+4	; 0x04
    139c:	3d 81       	ldd	r19, Y+5	; 0x05
    139e:	21 15       	cp	r18, r1
    13a0:	31 05       	cpc	r19, r1
    13a2:	69 f0       	breq	.+26     	; 0x13be <GPIO_readPin+0x66>
    13a4:	6b c0       	rjmp	.+214    	; 0x147c <GPIO_readPin+0x124>
    13a6:	4c 81       	ldd	r20, Y+4	; 0x04
    13a8:	5d 81       	ldd	r21, Y+5	; 0x05
    13aa:	42 30       	cpi	r20, 0x02	; 2
    13ac:	51 05       	cpc	r21, r1
    13ae:	b9 f1       	breq	.+110    	; 0x141e <GPIO_readPin+0xc6>
    13b0:	8c 81       	ldd	r24, Y+4	; 0x04
    13b2:	9d 81       	ldd	r25, Y+5	; 0x05
    13b4:	83 30       	cpi	r24, 0x03	; 3
    13b6:	91 05       	cpc	r25, r1
    13b8:	09 f4       	brne	.+2      	; 0x13bc <GPIO_readPin+0x64>
    13ba:	49 c0       	rjmp	.+146    	; 0x144e <GPIO_readPin+0xf6>
    13bc:	5f c0       	rjmp	.+190    	; 0x147c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    13be:	e9 e3       	ldi	r30, 0x39	; 57
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	88 2f       	mov	r24, r24
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	a9 01       	movw	r20, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <GPIO_readPin+0x7e>
    13d2:	55 95       	asr	r21
    13d4:	47 95       	ror	r20
    13d6:	8a 95       	dec	r24
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <GPIO_readPin+0x7a>
    13da:	ca 01       	movw	r24, r20
    13dc:	81 70       	andi	r24, 0x01	; 1
    13de:	90 70       	andi	r25, 0x00	; 0
    13e0:	88 23       	and	r24, r24
    13e2:	19 f0       	breq	.+6      	; 0x13ea <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	89 83       	std	Y+1, r24	; 0x01
    13e8:	49 c0       	rjmp	.+146    	; 0x147c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13ea:	19 82       	std	Y+1, r1	; 0x01
    13ec:	47 c0       	rjmp	.+142    	; 0x147c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    13ee:	e6 e3       	ldi	r30, 0x36	; 54
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	88 2f       	mov	r24, r24
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	a9 01       	movw	r20, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <GPIO_readPin+0xae>
    1402:	55 95       	asr	r21
    1404:	47 95       	ror	r20
    1406:	8a 95       	dec	r24
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <GPIO_readPin+0xaa>
    140a:	ca 01       	movw	r24, r20
    140c:	81 70       	andi	r24, 0x01	; 1
    140e:	90 70       	andi	r25, 0x00	; 0
    1410:	88 23       	and	r24, r24
    1412:	19 f0       	breq	.+6      	; 0x141a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	89 83       	std	Y+1, r24	; 0x01
    1418:	31 c0       	rjmp	.+98     	; 0x147c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    141a:	19 82       	std	Y+1, r1	; 0x01
    141c:	2f c0       	rjmp	.+94     	; 0x147c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    141e:	e3 e3       	ldi	r30, 0x33	; 51
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	88 2f       	mov	r24, r24
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	a9 01       	movw	r20, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <GPIO_readPin+0xde>
    1432:	55 95       	asr	r21
    1434:	47 95       	ror	r20
    1436:	8a 95       	dec	r24
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <GPIO_readPin+0xda>
    143a:	ca 01       	movw	r24, r20
    143c:	81 70       	andi	r24, 0x01	; 1
    143e:	90 70       	andi	r25, 0x00	; 0
    1440:	88 23       	and	r24, r24
    1442:	19 f0       	breq	.+6      	; 0x144a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	89 83       	std	Y+1, r24	; 0x01
    1448:	19 c0       	rjmp	.+50     	; 0x147c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    144a:	19 82       	std	Y+1, r1	; 0x01
    144c:	17 c0       	rjmp	.+46     	; 0x147c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    144e:	e0 e3       	ldi	r30, 0x30	; 48
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	88 2f       	mov	r24, r24
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	a9 01       	movw	r20, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <GPIO_readPin+0x10e>
    1462:	55 95       	asr	r21
    1464:	47 95       	ror	r20
    1466:	8a 95       	dec	r24
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <GPIO_readPin+0x10a>
    146a:	ca 01       	movw	r24, r20
    146c:	81 70       	andi	r24, 0x01	; 1
    146e:	90 70       	andi	r25, 0x00	; 0
    1470:	88 23       	and	r24, r24
    1472:	19 f0       	breq	.+6      	; 0x147a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	01 c0       	rjmp	.+2      	; 0x147c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    147a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    147c:	89 81       	ldd	r24, Y+1	; 0x01
}
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	00 d0       	rcall	.+0      	; 0x1494 <GPIO_setupPortDirection+0x6>
    1494:	00 d0       	rcall	.+0      	; 0x1496 <GPIO_setupPortDirection+0x8>
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	89 83       	std	Y+1, r24	; 0x01
    149c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	84 30       	cpi	r24, 0x04	; 4
    14a2:	90 f5       	brcc	.+100    	; 0x1508 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	3c 83       	std	Y+4, r19	; 0x04
    14ac:	2b 83       	std	Y+3, r18	; 0x03
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	9c 81       	ldd	r25, Y+4	; 0x04
    14b2:	81 30       	cpi	r24, 0x01	; 1
    14b4:	91 05       	cpc	r25, r1
    14b6:	d1 f0       	breq	.+52     	; 0x14ec <GPIO_setupPortDirection+0x5e>
    14b8:	2b 81       	ldd	r18, Y+3	; 0x03
    14ba:	3c 81       	ldd	r19, Y+4	; 0x04
    14bc:	22 30       	cpi	r18, 0x02	; 2
    14be:	31 05       	cpc	r19, r1
    14c0:	2c f4       	brge	.+10     	; 0x14cc <GPIO_setupPortDirection+0x3e>
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	9c 81       	ldd	r25, Y+4	; 0x04
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	61 f0       	breq	.+24     	; 0x14e2 <GPIO_setupPortDirection+0x54>
    14ca:	1e c0       	rjmp	.+60     	; 0x1508 <GPIO_setupPortDirection+0x7a>
    14cc:	2b 81       	ldd	r18, Y+3	; 0x03
    14ce:	3c 81       	ldd	r19, Y+4	; 0x04
    14d0:	22 30       	cpi	r18, 0x02	; 2
    14d2:	31 05       	cpc	r19, r1
    14d4:	81 f0       	breq	.+32     	; 0x14f6 <GPIO_setupPortDirection+0x68>
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	9c 81       	ldd	r25, Y+4	; 0x04
    14da:	83 30       	cpi	r24, 0x03	; 3
    14dc:	91 05       	cpc	r25, r1
    14de:	81 f0       	breq	.+32     	; 0x1500 <GPIO_setupPortDirection+0x72>
    14e0:	13 c0       	rjmp	.+38     	; 0x1508 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    14e2:	ea e3       	ldi	r30, 0x3A	; 58
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	80 83       	st	Z, r24
    14ea:	0e c0       	rjmp	.+28     	; 0x1508 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    14ec:	e7 e3       	ldi	r30, 0x37	; 55
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	80 83       	st	Z, r24
    14f4:	09 c0       	rjmp	.+18     	; 0x1508 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    14f6:	e4 e3       	ldi	r30, 0x34	; 52
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	80 83       	st	Z, r24
    14fe:	04 c0       	rjmp	.+8      	; 0x1508 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1500:	e1 e3       	ldi	r30, 0x31	; 49
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	80 83       	st	Z, r24
			break;
		}
	}
}
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	00 d0       	rcall	.+0      	; 0x151c <GPIO_writePort+0x6>
    151c:	00 d0       	rcall	.+0      	; 0x151e <GPIO_writePort+0x8>
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	84 30       	cpi	r24, 0x04	; 4
    152a:	90 f5       	brcc	.+100    	; 0x1590 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	3c 83       	std	Y+4, r19	; 0x04
    1534:	2b 83       	std	Y+3, r18	; 0x03
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	9c 81       	ldd	r25, Y+4	; 0x04
    153a:	81 30       	cpi	r24, 0x01	; 1
    153c:	91 05       	cpc	r25, r1
    153e:	d1 f0       	breq	.+52     	; 0x1574 <GPIO_writePort+0x5e>
    1540:	2b 81       	ldd	r18, Y+3	; 0x03
    1542:	3c 81       	ldd	r19, Y+4	; 0x04
    1544:	22 30       	cpi	r18, 0x02	; 2
    1546:	31 05       	cpc	r19, r1
    1548:	2c f4       	brge	.+10     	; 0x1554 <GPIO_writePort+0x3e>
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	9c 81       	ldd	r25, Y+4	; 0x04
    154e:	00 97       	sbiw	r24, 0x00	; 0
    1550:	61 f0       	breq	.+24     	; 0x156a <GPIO_writePort+0x54>
    1552:	1e c0       	rjmp	.+60     	; 0x1590 <GPIO_writePort+0x7a>
    1554:	2b 81       	ldd	r18, Y+3	; 0x03
    1556:	3c 81       	ldd	r19, Y+4	; 0x04
    1558:	22 30       	cpi	r18, 0x02	; 2
    155a:	31 05       	cpc	r19, r1
    155c:	81 f0       	breq	.+32     	; 0x157e <GPIO_writePort+0x68>
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	9c 81       	ldd	r25, Y+4	; 0x04
    1562:	83 30       	cpi	r24, 0x03	; 3
    1564:	91 05       	cpc	r25, r1
    1566:	81 f0       	breq	.+32     	; 0x1588 <GPIO_writePort+0x72>
    1568:	13 c0       	rjmp	.+38     	; 0x1590 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    156a:	eb e3       	ldi	r30, 0x3B	; 59
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	80 83       	st	Z, r24
    1572:	0e c0       	rjmp	.+28     	; 0x1590 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1574:	e8 e3       	ldi	r30, 0x38	; 56
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	80 83       	st	Z, r24
    157c:	09 c0       	rjmp	.+18     	; 0x1590 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    157e:	e5 e3       	ldi	r30, 0x35	; 53
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	80 83       	st	Z, r24
    1586:	04 c0       	rjmp	.+8      	; 0x1590 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1588:	e2 e3       	ldi	r30, 0x32	; 50
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <GPIO_readPort+0x6>
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <GPIO_readPort+0x8>
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    15ac:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	84 30       	cpi	r24, 0x04	; 4
    15b2:	90 f5       	brcc	.+100    	; 0x1618 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	3c 83       	std	Y+4, r19	; 0x04
    15bc:	2b 83       	std	Y+3, r18	; 0x03
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	9c 81       	ldd	r25, Y+4	; 0x04
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	91 05       	cpc	r25, r1
    15c6:	d1 f0       	breq	.+52     	; 0x15fc <GPIO_readPort+0x5e>
    15c8:	2b 81       	ldd	r18, Y+3	; 0x03
    15ca:	3c 81       	ldd	r19, Y+4	; 0x04
    15cc:	22 30       	cpi	r18, 0x02	; 2
    15ce:	31 05       	cpc	r19, r1
    15d0:	2c f4       	brge	.+10     	; 0x15dc <GPIO_readPort+0x3e>
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	61 f0       	breq	.+24     	; 0x15f2 <GPIO_readPort+0x54>
    15da:	1e c0       	rjmp	.+60     	; 0x1618 <GPIO_readPort+0x7a>
    15dc:	2b 81       	ldd	r18, Y+3	; 0x03
    15de:	3c 81       	ldd	r19, Y+4	; 0x04
    15e0:	22 30       	cpi	r18, 0x02	; 2
    15e2:	31 05       	cpc	r19, r1
    15e4:	81 f0       	breq	.+32     	; 0x1606 <GPIO_readPort+0x68>
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	83 30       	cpi	r24, 0x03	; 3
    15ec:	91 05       	cpc	r25, r1
    15ee:	81 f0       	breq	.+32     	; 0x1610 <GPIO_readPort+0x72>
    15f0:	13 c0       	rjmp	.+38     	; 0x1618 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    15f2:	e9 e3       	ldi	r30, 0x39	; 57
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	89 83       	std	Y+1, r24	; 0x01
    15fa:	0e c0       	rjmp	.+28     	; 0x1618 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    15fc:	e6 e3       	ldi	r30, 0x36	; 54
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	09 c0       	rjmp	.+18     	; 0x1618 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1606:	e3 e3       	ldi	r30, 0x33	; 51
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	04 c0       	rjmp	.+8      	; 0x1618 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1610:	e0 e3       	ldi	r30, 0x30	; 48
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1618:	89 81       	ldd	r24, Y+1	; 0x01
}
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	2e 97       	sbiw	r28, 0x0e	; 14
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	41 e0       	ldi	r20, 0x01	; 1
    1642:	0e 94 d6 07 	call	0xfac	; 0xfac <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	61 e0       	ldi	r22, 0x01	; 1
    164a:	41 e0       	ldi	r20, 0x01	; 1
    164c:	0e 94 d6 07 	call	0xfac	; 0xfac <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	62 e0       	ldi	r22, 0x02	; 2
    1654:	41 e0       	ldi	r20, 0x01	; 1
    1656:	0e 94 d6 07 	call	0xfac	; 0xfac <GPIO_setupPinDirection>
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	a0 ea       	ldi	r26, 0xA0	; 160
    1660:	b1 e4       	ldi	r27, 0x41	; 65
    1662:	8b 87       	std	Y+11, r24	; 0x0b
    1664:	9c 87       	std	Y+12, r25	; 0x0c
    1666:	ad 87       	std	Y+13, r26	; 0x0d
    1668:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    166a:	6b 85       	ldd	r22, Y+11	; 0x0b
    166c:	7c 85       	ldd	r23, Y+12	; 0x0c
    166e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1670:	9e 85       	ldd	r25, Y+14	; 0x0e
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	4a ef       	ldi	r20, 0xFA	; 250
    1678:	54 e4       	ldi	r21, 0x44	; 68
    167a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	8f 83       	std	Y+7, r24	; 0x07
    1684:	98 87       	std	Y+8, r25	; 0x08
    1686:	a9 87       	std	Y+9, r26	; 0x09
    1688:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    168a:	6f 81       	ldd	r22, Y+7	; 0x07
    168c:	78 85       	ldd	r23, Y+8	; 0x08
    168e:	89 85       	ldd	r24, Y+9	; 0x09
    1690:	9a 85       	ldd	r25, Y+10	; 0x0a
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e8       	ldi	r20, 0x80	; 128
    1698:	5f e3       	ldi	r21, 0x3F	; 63
    169a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    169e:	88 23       	and	r24, r24
    16a0:	2c f4       	brge	.+10     	; 0x16ac <LCD_init+0x84>
		__ticks = 1;
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	9e 83       	std	Y+6, r25	; 0x06
    16a8:	8d 83       	std	Y+5, r24	; 0x05
    16aa:	3f c0       	rjmp	.+126    	; 0x172a <LCD_init+0x102>
	else if (__tmp > 65535)
    16ac:	6f 81       	ldd	r22, Y+7	; 0x07
    16ae:	78 85       	ldd	r23, Y+8	; 0x08
    16b0:	89 85       	ldd	r24, Y+9	; 0x09
    16b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	3f ef       	ldi	r19, 0xFF	; 255
    16b8:	4f e7       	ldi	r20, 0x7F	; 127
    16ba:	57 e4       	ldi	r21, 0x47	; 71
    16bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16c0:	18 16       	cp	r1, r24
    16c2:	4c f5       	brge	.+82     	; 0x1716 <LCD_init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e2       	ldi	r20, 0x20	; 32
    16d2:	51 e4       	ldi	r21, 0x41	; 65
    16d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	bc 01       	movw	r22, r24
    16de:	cd 01       	movw	r24, r26
    16e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	9e 83       	std	Y+6, r25	; 0x06
    16ea:	8d 83       	std	Y+5, r24	; 0x05
    16ec:	0f c0       	rjmp	.+30     	; 0x170c <LCD_init+0xe4>
    16ee:	88 ec       	ldi	r24, 0xC8	; 200
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	9c 83       	std	Y+4, r25	; 0x04
    16f4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	9c 81       	ldd	r25, Y+4	; 0x04
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <LCD_init+0xd2>
    16fe:	9c 83       	std	Y+4, r25	; 0x04
    1700:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1702:	8d 81       	ldd	r24, Y+5	; 0x05
    1704:	9e 81       	ldd	r25, Y+6	; 0x06
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	9e 83       	std	Y+6, r25	; 0x06
    170a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170c:	8d 81       	ldd	r24, Y+5	; 0x05
    170e:	9e 81       	ldd	r25, Y+6	; 0x06
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	69 f7       	brne	.-38     	; 0x16ee <LCD_init+0xc6>
    1714:	14 c0       	rjmp	.+40     	; 0x173e <LCD_init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1716:	6f 81       	ldd	r22, Y+7	; 0x07
    1718:	78 85       	ldd	r23, Y+8	; 0x08
    171a:	89 85       	ldd	r24, Y+9	; 0x09
    171c:	9a 85       	ldd	r25, Y+10	; 0x0a
    171e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	9e 83       	std	Y+6, r25	; 0x06
    1728:	8d 83       	std	Y+5, r24	; 0x05
    172a:	8d 81       	ldd	r24, Y+5	; 0x05
    172c:	9e 81       	ldd	r25, Y+6	; 0x06
    172e:	9a 83       	std	Y+2, r25	; 0x02
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	9a 81       	ldd	r25, Y+2	; 0x02
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	f1 f7       	brne	.-4      	; 0x1736 <LCD_init+0x10e>
    173a:	9a 83       	std	Y+2, r25	; 0x02
    173c:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	6f ef       	ldi	r22, 0xFF	; 255
    1742:	0e 94 47 0a 	call	0x148e	; 0x148e <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1746:	88 e3       	ldi	r24, 0x38	; 56
    1748:	0e 94 b5 0b 	call	0x176a	; 0x176a <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    174c:	8c e0       	ldi	r24, 0x0C	; 12
    174e:	0e 94 b5 0b 	call	0x176a	; 0x176a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	0e 94 b5 0b 	call	0x176a	; 0x176a <LCD_sendCommand>
}
    1758:	2e 96       	adiw	r28, 0x0e	; 14
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	de bf       	out	0x3e, r29	; 62
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	cd bf       	out	0x3d, r28	; 61
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	e9 97       	sbiw	r28, 0x39	; 57
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	60 e0       	ldi	r22, 0x00	; 0
    1784:	40 e0       	ldi	r20, 0x00	; 0
    1786:	0e 94 c1 08 	call	0x1182	; 0x1182 <GPIO_writePin>
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	a0 e8       	ldi	r26, 0x80	; 128
    1790:	bf e3       	ldi	r27, 0x3F	; 63
    1792:	8d ab       	std	Y+53, r24	; 0x35
    1794:	9e ab       	std	Y+54, r25	; 0x36
    1796:	af ab       	std	Y+55, r26	; 0x37
    1798:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    179a:	6d a9       	ldd	r22, Y+53	; 0x35
    179c:	7e a9       	ldd	r23, Y+54	; 0x36
    179e:	8f a9       	ldd	r24, Y+55	; 0x37
    17a0:	98 ad       	ldd	r25, Y+56	; 0x38
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	4a ef       	ldi	r20, 0xFA	; 250
    17a8:	54 e4       	ldi	r21, 0x44	; 68
    17aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	89 ab       	std	Y+49, r24	; 0x31
    17b4:	9a ab       	std	Y+50, r25	; 0x32
    17b6:	ab ab       	std	Y+51, r26	; 0x33
    17b8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17ba:	69 a9       	ldd	r22, Y+49	; 0x31
    17bc:	7a a9       	ldd	r23, Y+50	; 0x32
    17be:	8b a9       	ldd	r24, Y+51	; 0x33
    17c0:	9c a9       	ldd	r25, Y+52	; 0x34
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	40 e8       	ldi	r20, 0x80	; 128
    17c8:	5f e3       	ldi	r21, 0x3F	; 63
    17ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ce:	88 23       	and	r24, r24
    17d0:	2c f4       	brge	.+10     	; 0x17dc <LCD_sendCommand+0x72>
		__ticks = 1;
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	98 ab       	std	Y+48, r25	; 0x30
    17d8:	8f a7       	std	Y+47, r24	; 0x2f
    17da:	3f c0       	rjmp	.+126    	; 0x185a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    17dc:	69 a9       	ldd	r22, Y+49	; 0x31
    17de:	7a a9       	ldd	r23, Y+50	; 0x32
    17e0:	8b a9       	ldd	r24, Y+51	; 0x33
    17e2:	9c a9       	ldd	r25, Y+52	; 0x34
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	3f ef       	ldi	r19, 0xFF	; 255
    17e8:	4f e7       	ldi	r20, 0x7F	; 127
    17ea:	57 e4       	ldi	r21, 0x47	; 71
    17ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17f0:	18 16       	cp	r1, r24
    17f2:	4c f5       	brge	.+82     	; 0x1846 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f4:	6d a9       	ldd	r22, Y+53	; 0x35
    17f6:	7e a9       	ldd	r23, Y+54	; 0x36
    17f8:	8f a9       	ldd	r24, Y+55	; 0x37
    17fa:	98 ad       	ldd	r25, Y+56	; 0x38
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e2       	ldi	r20, 0x20	; 32
    1802:	51 e4       	ldi	r21, 0x41	; 65
    1804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	bc 01       	movw	r22, r24
    180e:	cd 01       	movw	r24, r26
    1810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	98 ab       	std	Y+48, r25	; 0x30
    181a:	8f a7       	std	Y+47, r24	; 0x2f
    181c:	0f c0       	rjmp	.+30     	; 0x183c <LCD_sendCommand+0xd2>
    181e:	88 ec       	ldi	r24, 0xC8	; 200
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	9e a7       	std	Y+46, r25	; 0x2e
    1824:	8d a7       	std	Y+45, r24	; 0x2d
    1826:	8d a5       	ldd	r24, Y+45	; 0x2d
    1828:	9e a5       	ldd	r25, Y+46	; 0x2e
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	f1 f7       	brne	.-4      	; 0x182a <LCD_sendCommand+0xc0>
    182e:	9e a7       	std	Y+46, r25	; 0x2e
    1830:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1832:	8f a5       	ldd	r24, Y+47	; 0x2f
    1834:	98 a9       	ldd	r25, Y+48	; 0x30
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	98 ab       	std	Y+48, r25	; 0x30
    183a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183c:	8f a5       	ldd	r24, Y+47	; 0x2f
    183e:	98 a9       	ldd	r25, Y+48	; 0x30
    1840:	00 97       	sbiw	r24, 0x00	; 0
    1842:	69 f7       	brne	.-38     	; 0x181e <LCD_sendCommand+0xb4>
    1844:	14 c0       	rjmp	.+40     	; 0x186e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1846:	69 a9       	ldd	r22, Y+49	; 0x31
    1848:	7a a9       	ldd	r23, Y+50	; 0x32
    184a:	8b a9       	ldd	r24, Y+51	; 0x33
    184c:	9c a9       	ldd	r25, Y+52	; 0x34
    184e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	98 ab       	std	Y+48, r25	; 0x30
    1858:	8f a7       	std	Y+47, r24	; 0x2f
    185a:	8f a5       	ldd	r24, Y+47	; 0x2f
    185c:	98 a9       	ldd	r25, Y+48	; 0x30
    185e:	9c a7       	std	Y+44, r25	; 0x2c
    1860:	8b a7       	std	Y+43, r24	; 0x2b
    1862:	8b a5       	ldd	r24, Y+43	; 0x2b
    1864:	9c a5       	ldd	r25, Y+44	; 0x2c
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	f1 f7       	brne	.-4      	; 0x1866 <LCD_sendCommand+0xfc>
    186a:	9c a7       	std	Y+44, r25	; 0x2c
    186c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	62 e0       	ldi	r22, 0x02	; 2
    1872:	41 e0       	ldi	r20, 0x01	; 1
    1874:	0e 94 c1 08 	call	0x1182	; 0x1182 <GPIO_writePin>
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	a0 e8       	ldi	r26, 0x80	; 128
    187e:	bf e3       	ldi	r27, 0x3F	; 63
    1880:	8f a3       	std	Y+39, r24	; 0x27
    1882:	98 a7       	std	Y+40, r25	; 0x28
    1884:	a9 a7       	std	Y+41, r26	; 0x29
    1886:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1888:	6f a1       	ldd	r22, Y+39	; 0x27
    188a:	78 a5       	ldd	r23, Y+40	; 0x28
    188c:	89 a5       	ldd	r24, Y+41	; 0x29
    188e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	4a ef       	ldi	r20, 0xFA	; 250
    1896:	54 e4       	ldi	r21, 0x44	; 68
    1898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	8b a3       	std	Y+35, r24	; 0x23
    18a2:	9c a3       	std	Y+36, r25	; 0x24
    18a4:	ad a3       	std	Y+37, r26	; 0x25
    18a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18a8:	6b a1       	ldd	r22, Y+35	; 0x23
    18aa:	7c a1       	ldd	r23, Y+36	; 0x24
    18ac:	8d a1       	ldd	r24, Y+37	; 0x25
    18ae:	9e a1       	ldd	r25, Y+38	; 0x26
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	40 e8       	ldi	r20, 0x80	; 128
    18b6:	5f e3       	ldi	r21, 0x3F	; 63
    18b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18bc:	88 23       	and	r24, r24
    18be:	2c f4       	brge	.+10     	; 0x18ca <LCD_sendCommand+0x160>
		__ticks = 1;
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	9a a3       	std	Y+34, r25	; 0x22
    18c6:	89 a3       	std	Y+33, r24	; 0x21
    18c8:	3f c0       	rjmp	.+126    	; 0x1948 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    18ca:	6b a1       	ldd	r22, Y+35	; 0x23
    18cc:	7c a1       	ldd	r23, Y+36	; 0x24
    18ce:	8d a1       	ldd	r24, Y+37	; 0x25
    18d0:	9e a1       	ldd	r25, Y+38	; 0x26
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	3f ef       	ldi	r19, 0xFF	; 255
    18d6:	4f e7       	ldi	r20, 0x7F	; 127
    18d8:	57 e4       	ldi	r21, 0x47	; 71
    18da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18de:	18 16       	cp	r1, r24
    18e0:	4c f5       	brge	.+82     	; 0x1934 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e2:	6f a1       	ldd	r22, Y+39	; 0x27
    18e4:	78 a5       	ldd	r23, Y+40	; 0x28
    18e6:	89 a5       	ldd	r24, Y+41	; 0x29
    18e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	40 e2       	ldi	r20, 0x20	; 32
    18f0:	51 e4       	ldi	r21, 0x41	; 65
    18f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	bc 01       	movw	r22, r24
    18fc:	cd 01       	movw	r24, r26
    18fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	9a a3       	std	Y+34, r25	; 0x22
    1908:	89 a3       	std	Y+33, r24	; 0x21
    190a:	0f c0       	rjmp	.+30     	; 0x192a <LCD_sendCommand+0x1c0>
    190c:	88 ec       	ldi	r24, 0xC8	; 200
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	98 a3       	std	Y+32, r25	; 0x20
    1912:	8f 8f       	std	Y+31, r24	; 0x1f
    1914:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1916:	98 a1       	ldd	r25, Y+32	; 0x20
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	f1 f7       	brne	.-4      	; 0x1918 <LCD_sendCommand+0x1ae>
    191c:	98 a3       	std	Y+32, r25	; 0x20
    191e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1920:	89 a1       	ldd	r24, Y+33	; 0x21
    1922:	9a a1       	ldd	r25, Y+34	; 0x22
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	9a a3       	std	Y+34, r25	; 0x22
    1928:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    192a:	89 a1       	ldd	r24, Y+33	; 0x21
    192c:	9a a1       	ldd	r25, Y+34	; 0x22
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	69 f7       	brne	.-38     	; 0x190c <LCD_sendCommand+0x1a2>
    1932:	14 c0       	rjmp	.+40     	; 0x195c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1934:	6b a1       	ldd	r22, Y+35	; 0x23
    1936:	7c a1       	ldd	r23, Y+36	; 0x24
    1938:	8d a1       	ldd	r24, Y+37	; 0x25
    193a:	9e a1       	ldd	r25, Y+38	; 0x26
    193c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	9a a3       	std	Y+34, r25	; 0x22
    1946:	89 a3       	std	Y+33, r24	; 0x21
    1948:	89 a1       	ldd	r24, Y+33	; 0x21
    194a:	9a a1       	ldd	r25, Y+34	; 0x22
    194c:	9e 8f       	std	Y+30, r25	; 0x1e
    194e:	8d 8f       	std	Y+29, r24	; 0x1d
    1950:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1952:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	f1 f7       	brne	.-4      	; 0x1954 <LCD_sendCommand+0x1ea>
    1958:	9e 8f       	std	Y+30, r25	; 0x1e
    195a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	69 ad       	ldd	r22, Y+57	; 0x39
    1960:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_writePort>
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	a0 e8       	ldi	r26, 0x80	; 128
    196a:	bf e3       	ldi	r27, 0x3F	; 63
    196c:	89 8f       	std	Y+25, r24	; 0x19
    196e:	9a 8f       	std	Y+26, r25	; 0x1a
    1970:	ab 8f       	std	Y+27, r26	; 0x1b
    1972:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1974:	69 8d       	ldd	r22, Y+25	; 0x19
    1976:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1978:	8b 8d       	ldd	r24, Y+27	; 0x1b
    197a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	4a ef       	ldi	r20, 0xFA	; 250
    1982:	54 e4       	ldi	r21, 0x44	; 68
    1984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	8d 8b       	std	Y+21, r24	; 0x15
    198e:	9e 8b       	std	Y+22, r25	; 0x16
    1990:	af 8b       	std	Y+23, r26	; 0x17
    1992:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1994:	6d 89       	ldd	r22, Y+21	; 0x15
    1996:	7e 89       	ldd	r23, Y+22	; 0x16
    1998:	8f 89       	ldd	r24, Y+23	; 0x17
    199a:	98 8d       	ldd	r25, Y+24	; 0x18
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	40 e8       	ldi	r20, 0x80	; 128
    19a2:	5f e3       	ldi	r21, 0x3F	; 63
    19a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19a8:	88 23       	and	r24, r24
    19aa:	2c f4       	brge	.+10     	; 0x19b6 <LCD_sendCommand+0x24c>
		__ticks = 1;
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	9c 8b       	std	Y+20, r25	; 0x14
    19b2:	8b 8b       	std	Y+19, r24	; 0x13
    19b4:	3f c0       	rjmp	.+126    	; 0x1a34 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    19b6:	6d 89       	ldd	r22, Y+21	; 0x15
    19b8:	7e 89       	ldd	r23, Y+22	; 0x16
    19ba:	8f 89       	ldd	r24, Y+23	; 0x17
    19bc:	98 8d       	ldd	r25, Y+24	; 0x18
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	3f ef       	ldi	r19, 0xFF	; 255
    19c2:	4f e7       	ldi	r20, 0x7F	; 127
    19c4:	57 e4       	ldi	r21, 0x47	; 71
    19c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19ca:	18 16       	cp	r1, r24
    19cc:	4c f5       	brge	.+82     	; 0x1a20 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ce:	69 8d       	ldd	r22, Y+25	; 0x19
    19d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e2       	ldi	r20, 0x20	; 32
    19dc:	51 e4       	ldi	r21, 0x41	; 65
    19de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	bc 01       	movw	r22, r24
    19e8:	cd 01       	movw	r24, r26
    19ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	9c 8b       	std	Y+20, r25	; 0x14
    19f4:	8b 8b       	std	Y+19, r24	; 0x13
    19f6:	0f c0       	rjmp	.+30     	; 0x1a16 <LCD_sendCommand+0x2ac>
    19f8:	88 ec       	ldi	r24, 0xC8	; 200
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	9a 8b       	std	Y+18, r25	; 0x12
    19fe:	89 8b       	std	Y+17, r24	; 0x11
    1a00:	89 89       	ldd	r24, Y+17	; 0x11
    1a02:	9a 89       	ldd	r25, Y+18	; 0x12
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	f1 f7       	brne	.-4      	; 0x1a04 <LCD_sendCommand+0x29a>
    1a08:	9a 8b       	std	Y+18, r25	; 0x12
    1a0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	9c 8b       	std	Y+20, r25	; 0x14
    1a14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a16:	8b 89       	ldd	r24, Y+19	; 0x13
    1a18:	9c 89       	ldd	r25, Y+20	; 0x14
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	69 f7       	brne	.-38     	; 0x19f8 <LCD_sendCommand+0x28e>
    1a1e:	14 c0       	rjmp	.+40     	; 0x1a48 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a20:	6d 89       	ldd	r22, Y+21	; 0x15
    1a22:	7e 89       	ldd	r23, Y+22	; 0x16
    1a24:	8f 89       	ldd	r24, Y+23	; 0x17
    1a26:	98 8d       	ldd	r25, Y+24	; 0x18
    1a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	9c 8b       	std	Y+20, r25	; 0x14
    1a32:	8b 8b       	std	Y+19, r24	; 0x13
    1a34:	8b 89       	ldd	r24, Y+19	; 0x13
    1a36:	9c 89       	ldd	r25, Y+20	; 0x14
    1a38:	98 8b       	std	Y+16, r25	; 0x10
    1a3a:	8f 87       	std	Y+15, r24	; 0x0f
    1a3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a3e:	98 89       	ldd	r25, Y+16	; 0x10
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	f1 f7       	brne	.-4      	; 0x1a40 <LCD_sendCommand+0x2d6>
    1a44:	98 8b       	std	Y+16, r25	; 0x10
    1a46:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	62 e0       	ldi	r22, 0x02	; 2
    1a4c:	40 e0       	ldi	r20, 0x00	; 0
    1a4e:	0e 94 c1 08 	call	0x1182	; 0x1182 <GPIO_writePin>
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	a0 e8       	ldi	r26, 0x80	; 128
    1a58:	bf e3       	ldi	r27, 0x3F	; 63
    1a5a:	8b 87       	std	Y+11, r24	; 0x0b
    1a5c:	9c 87       	std	Y+12, r25	; 0x0c
    1a5e:	ad 87       	std	Y+13, r26	; 0x0d
    1a60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	4a ef       	ldi	r20, 0xFA	; 250
    1a70:	54 e4       	ldi	r21, 0x44	; 68
    1a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	8f 83       	std	Y+7, r24	; 0x07
    1a7c:	98 87       	std	Y+8, r25	; 0x08
    1a7e:	a9 87       	std	Y+9, r26	; 0x09
    1a80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a82:	6f 81       	ldd	r22, Y+7	; 0x07
    1a84:	78 85       	ldd	r23, Y+8	; 0x08
    1a86:	89 85       	ldd	r24, Y+9	; 0x09
    1a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e8       	ldi	r20, 0x80	; 128
    1a90:	5f e3       	ldi	r21, 0x3F	; 63
    1a92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a96:	88 23       	and	r24, r24
    1a98:	2c f4       	brge	.+10     	; 0x1aa4 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	9e 83       	std	Y+6, r25	; 0x06
    1aa0:	8d 83       	std	Y+5, r24	; 0x05
    1aa2:	3f c0       	rjmp	.+126    	; 0x1b22 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1aa4:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa6:	78 85       	ldd	r23, Y+8	; 0x08
    1aa8:	89 85       	ldd	r24, Y+9	; 0x09
    1aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	3f ef       	ldi	r19, 0xFF	; 255
    1ab0:	4f e7       	ldi	r20, 0x7F	; 127
    1ab2:	57 e4       	ldi	r21, 0x47	; 71
    1ab4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ab8:	18 16       	cp	r1, r24
    1aba:	4c f5       	brge	.+82     	; 0x1b0e <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1abc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1abe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e2       	ldi	r20, 0x20	; 32
    1aca:	51 e4       	ldi	r21, 0x41	; 65
    1acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	bc 01       	movw	r22, r24
    1ad6:	cd 01       	movw	r24, r26
    1ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	9e 83       	std	Y+6, r25	; 0x06
    1ae2:	8d 83       	std	Y+5, r24	; 0x05
    1ae4:	0f c0       	rjmp	.+30     	; 0x1b04 <LCD_sendCommand+0x39a>
    1ae6:	88 ec       	ldi	r24, 0xC8	; 200
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	9c 83       	std	Y+4, r25	; 0x04
    1aec:	8b 83       	std	Y+3, r24	; 0x03
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	9c 81       	ldd	r25, Y+4	; 0x04
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <LCD_sendCommand+0x388>
    1af6:	9c 83       	std	Y+4, r25	; 0x04
    1af8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	9e 81       	ldd	r25, Y+6	; 0x06
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	9e 83       	std	Y+6, r25	; 0x06
    1b02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b04:	8d 81       	ldd	r24, Y+5	; 0x05
    1b06:	9e 81       	ldd	r25, Y+6	; 0x06
    1b08:	00 97       	sbiw	r24, 0x00	; 0
    1b0a:	69 f7       	brne	.-38     	; 0x1ae6 <LCD_sendCommand+0x37c>
    1b0c:	14 c0       	rjmp	.+40     	; 0x1b36 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b10:	78 85       	ldd	r23, Y+8	; 0x08
    1b12:	89 85       	ldd	r24, Y+9	; 0x09
    1b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	9e 83       	std	Y+6, r25	; 0x06
    1b20:	8d 83       	std	Y+5, r24	; 0x05
    1b22:	8d 81       	ldd	r24, Y+5	; 0x05
    1b24:	9e 81       	ldd	r25, Y+6	; 0x06
    1b26:	9a 83       	std	Y+2, r25	; 0x02
    1b28:	89 83       	std	Y+1, r24	; 0x01
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	f1 f7       	brne	.-4      	; 0x1b2e <LCD_sendCommand+0x3c4>
    1b32:	9a 83       	std	Y+2, r25	; 0x02
    1b34:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1b36:	e9 96       	adiw	r28, 0x39	; 57
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	e9 97       	sbiw	r28, 0x39	; 57
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	60 e0       	ldi	r22, 0x00	; 0
    1b62:	41 e0       	ldi	r20, 0x01	; 1
    1b64:	0e 94 c1 08 	call	0x1182	; 0x1182 <GPIO_writePin>
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	a0 e8       	ldi	r26, 0x80	; 128
    1b6e:	bf e3       	ldi	r27, 0x3F	; 63
    1b70:	8d ab       	std	Y+53, r24	; 0x35
    1b72:	9e ab       	std	Y+54, r25	; 0x36
    1b74:	af ab       	std	Y+55, r26	; 0x37
    1b76:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b78:	6d a9       	ldd	r22, Y+53	; 0x35
    1b7a:	7e a9       	ldd	r23, Y+54	; 0x36
    1b7c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b7e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	4a ef       	ldi	r20, 0xFA	; 250
    1b86:	54 e4       	ldi	r21, 0x44	; 68
    1b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	89 ab       	std	Y+49, r24	; 0x31
    1b92:	9a ab       	std	Y+50, r25	; 0x32
    1b94:	ab ab       	std	Y+51, r26	; 0x33
    1b96:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b98:	69 a9       	ldd	r22, Y+49	; 0x31
    1b9a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b9c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b9e:	9c a9       	ldd	r25, Y+52	; 0x34
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	40 e8       	ldi	r20, 0x80	; 128
    1ba6:	5f e3       	ldi	r21, 0x3F	; 63
    1ba8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bac:	88 23       	and	r24, r24
    1bae:	2c f4       	brge	.+10     	; 0x1bba <LCD_displayCharacter+0x72>
		__ticks = 1;
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	98 ab       	std	Y+48, r25	; 0x30
    1bb6:	8f a7       	std	Y+47, r24	; 0x2f
    1bb8:	3f c0       	rjmp	.+126    	; 0x1c38 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1bba:	69 a9       	ldd	r22, Y+49	; 0x31
    1bbc:	7a a9       	ldd	r23, Y+50	; 0x32
    1bbe:	8b a9       	ldd	r24, Y+51	; 0x33
    1bc0:	9c a9       	ldd	r25, Y+52	; 0x34
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	3f ef       	ldi	r19, 0xFF	; 255
    1bc6:	4f e7       	ldi	r20, 0x7F	; 127
    1bc8:	57 e4       	ldi	r21, 0x47	; 71
    1bca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bce:	18 16       	cp	r1, r24
    1bd0:	4c f5       	brge	.+82     	; 0x1c24 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd2:	6d a9       	ldd	r22, Y+53	; 0x35
    1bd4:	7e a9       	ldd	r23, Y+54	; 0x36
    1bd6:	8f a9       	ldd	r24, Y+55	; 0x37
    1bd8:	98 ad       	ldd	r25, Y+56	; 0x38
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	40 e2       	ldi	r20, 0x20	; 32
    1be0:	51 e4       	ldi	r21, 0x41	; 65
    1be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	bc 01       	movw	r22, r24
    1bec:	cd 01       	movw	r24, r26
    1bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	98 ab       	std	Y+48, r25	; 0x30
    1bf8:	8f a7       	std	Y+47, r24	; 0x2f
    1bfa:	0f c0       	rjmp	.+30     	; 0x1c1a <LCD_displayCharacter+0xd2>
    1bfc:	88 ec       	ldi	r24, 0xC8	; 200
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	9e a7       	std	Y+46, r25	; 0x2e
    1c02:	8d a7       	std	Y+45, r24	; 0x2d
    1c04:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c06:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <LCD_displayCharacter+0xc0>
    1c0c:	9e a7       	std	Y+46, r25	; 0x2e
    1c0e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c10:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c12:	98 a9       	ldd	r25, Y+48	; 0x30
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	98 ab       	std	Y+48, r25	; 0x30
    1c18:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c1c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c1e:	00 97       	sbiw	r24, 0x00	; 0
    1c20:	69 f7       	brne	.-38     	; 0x1bfc <LCD_displayCharacter+0xb4>
    1c22:	14 c0       	rjmp	.+40     	; 0x1c4c <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c24:	69 a9       	ldd	r22, Y+49	; 0x31
    1c26:	7a a9       	ldd	r23, Y+50	; 0x32
    1c28:	8b a9       	ldd	r24, Y+51	; 0x33
    1c2a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	98 ab       	std	Y+48, r25	; 0x30
    1c36:	8f a7       	std	Y+47, r24	; 0x2f
    1c38:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c3a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c3c:	9c a7       	std	Y+44, r25	; 0x2c
    1c3e:	8b a7       	std	Y+43, r24	; 0x2b
    1c40:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c42:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <LCD_displayCharacter+0xfc>
    1c48:	9c a7       	std	Y+44, r25	; 0x2c
    1c4a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	62 e0       	ldi	r22, 0x02	; 2
    1c50:	41 e0       	ldi	r20, 0x01	; 1
    1c52:	0e 94 c1 08 	call	0x1182	; 0x1182 <GPIO_writePin>
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	a0 e8       	ldi	r26, 0x80	; 128
    1c5c:	bf e3       	ldi	r27, 0x3F	; 63
    1c5e:	8f a3       	std	Y+39, r24	; 0x27
    1c60:	98 a7       	std	Y+40, r25	; 0x28
    1c62:	a9 a7       	std	Y+41, r26	; 0x29
    1c64:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c66:	6f a1       	ldd	r22, Y+39	; 0x27
    1c68:	78 a5       	ldd	r23, Y+40	; 0x28
    1c6a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	4a ef       	ldi	r20, 0xFA	; 250
    1c74:	54 e4       	ldi	r21, 0x44	; 68
    1c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	8b a3       	std	Y+35, r24	; 0x23
    1c80:	9c a3       	std	Y+36, r25	; 0x24
    1c82:	ad a3       	std	Y+37, r26	; 0x25
    1c84:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c86:	6b a1       	ldd	r22, Y+35	; 0x23
    1c88:	7c a1       	ldd	r23, Y+36	; 0x24
    1c8a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c8c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e8       	ldi	r20, 0x80	; 128
    1c94:	5f e3       	ldi	r21, 0x3F	; 63
    1c96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c9a:	88 23       	and	r24, r24
    1c9c:	2c f4       	brge	.+10     	; 0x1ca8 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	9a a3       	std	Y+34, r25	; 0x22
    1ca4:	89 a3       	std	Y+33, r24	; 0x21
    1ca6:	3f c0       	rjmp	.+126    	; 0x1d26 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1ca8:	6b a1       	ldd	r22, Y+35	; 0x23
    1caa:	7c a1       	ldd	r23, Y+36	; 0x24
    1cac:	8d a1       	ldd	r24, Y+37	; 0x25
    1cae:	9e a1       	ldd	r25, Y+38	; 0x26
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	3f ef       	ldi	r19, 0xFF	; 255
    1cb4:	4f e7       	ldi	r20, 0x7F	; 127
    1cb6:	57 e4       	ldi	r21, 0x47	; 71
    1cb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cbc:	18 16       	cp	r1, r24
    1cbe:	4c f5       	brge	.+82     	; 0x1d12 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc0:	6f a1       	ldd	r22, Y+39	; 0x27
    1cc2:	78 a5       	ldd	r23, Y+40	; 0x28
    1cc4:	89 a5       	ldd	r24, Y+41	; 0x29
    1cc6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e2       	ldi	r20, 0x20	; 32
    1cce:	51 e4       	ldi	r21, 0x41	; 65
    1cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	bc 01       	movw	r22, r24
    1cda:	cd 01       	movw	r24, r26
    1cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	9a a3       	std	Y+34, r25	; 0x22
    1ce6:	89 a3       	std	Y+33, r24	; 0x21
    1ce8:	0f c0       	rjmp	.+30     	; 0x1d08 <LCD_displayCharacter+0x1c0>
    1cea:	88 ec       	ldi	r24, 0xC8	; 200
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	98 a3       	std	Y+32, r25	; 0x20
    1cf0:	8f 8f       	std	Y+31, r24	; 0x1f
    1cf2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cf4:	98 a1       	ldd	r25, Y+32	; 0x20
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <LCD_displayCharacter+0x1ae>
    1cfa:	98 a3       	std	Y+32, r25	; 0x20
    1cfc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfe:	89 a1       	ldd	r24, Y+33	; 0x21
    1d00:	9a a1       	ldd	r25, Y+34	; 0x22
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	9a a3       	std	Y+34, r25	; 0x22
    1d06:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d08:	89 a1       	ldd	r24, Y+33	; 0x21
    1d0a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	69 f7       	brne	.-38     	; 0x1cea <LCD_displayCharacter+0x1a2>
    1d10:	14 c0       	rjmp	.+40     	; 0x1d3a <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d12:	6b a1       	ldd	r22, Y+35	; 0x23
    1d14:	7c a1       	ldd	r23, Y+36	; 0x24
    1d16:	8d a1       	ldd	r24, Y+37	; 0x25
    1d18:	9e a1       	ldd	r25, Y+38	; 0x26
    1d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	9a a3       	std	Y+34, r25	; 0x22
    1d24:	89 a3       	std	Y+33, r24	; 0x21
    1d26:	89 a1       	ldd	r24, Y+33	; 0x21
    1d28:	9a a1       	ldd	r25, Y+34	; 0x22
    1d2a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d2c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d30:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <LCD_displayCharacter+0x1ea>
    1d36:	9e 8f       	std	Y+30, r25	; 0x1e
    1d38:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	69 ad       	ldd	r22, Y+57	; 0x39
    1d3e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_writePort>
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	a0 e8       	ldi	r26, 0x80	; 128
    1d48:	bf e3       	ldi	r27, 0x3F	; 63
    1d4a:	89 8f       	std	Y+25, r24	; 0x19
    1d4c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d4e:	ab 8f       	std	Y+27, r26	; 0x1b
    1d50:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d52:	69 8d       	ldd	r22, Y+25	; 0x19
    1d54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	4a ef       	ldi	r20, 0xFA	; 250
    1d60:	54 e4       	ldi	r21, 0x44	; 68
    1d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	8d 8b       	std	Y+21, r24	; 0x15
    1d6c:	9e 8b       	std	Y+22, r25	; 0x16
    1d6e:	af 8b       	std	Y+23, r26	; 0x17
    1d70:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d72:	6d 89       	ldd	r22, Y+21	; 0x15
    1d74:	7e 89       	ldd	r23, Y+22	; 0x16
    1d76:	8f 89       	ldd	r24, Y+23	; 0x17
    1d78:	98 8d       	ldd	r25, Y+24	; 0x18
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e8       	ldi	r20, 0x80	; 128
    1d80:	5f e3       	ldi	r21, 0x3F	; 63
    1d82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d86:	88 23       	and	r24, r24
    1d88:	2c f4       	brge	.+10     	; 0x1d94 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	9c 8b       	std	Y+20, r25	; 0x14
    1d90:	8b 8b       	std	Y+19, r24	; 0x13
    1d92:	3f c0       	rjmp	.+126    	; 0x1e12 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1d94:	6d 89       	ldd	r22, Y+21	; 0x15
    1d96:	7e 89       	ldd	r23, Y+22	; 0x16
    1d98:	8f 89       	ldd	r24, Y+23	; 0x17
    1d9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	3f ef       	ldi	r19, 0xFF	; 255
    1da0:	4f e7       	ldi	r20, 0x7F	; 127
    1da2:	57 e4       	ldi	r21, 0x47	; 71
    1da4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1da8:	18 16       	cp	r1, r24
    1daa:	4c f5       	brge	.+82     	; 0x1dfe <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dac:	69 8d       	ldd	r22, Y+25	; 0x19
    1dae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1db0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1db2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e2       	ldi	r20, 0x20	; 32
    1dba:	51 e4       	ldi	r21, 0x41	; 65
    1dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	bc 01       	movw	r22, r24
    1dc6:	cd 01       	movw	r24, r26
    1dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	9c 8b       	std	Y+20, r25	; 0x14
    1dd2:	8b 8b       	std	Y+19, r24	; 0x13
    1dd4:	0f c0       	rjmp	.+30     	; 0x1df4 <LCD_displayCharacter+0x2ac>
    1dd6:	88 ec       	ldi	r24, 0xC8	; 200
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9a 8b       	std	Y+18, r25	; 0x12
    1ddc:	89 8b       	std	Y+17, r24	; 0x11
    1dde:	89 89       	ldd	r24, Y+17	; 0x11
    1de0:	9a 89       	ldd	r25, Y+18	; 0x12
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <LCD_displayCharacter+0x29a>
    1de6:	9a 8b       	std	Y+18, r25	; 0x12
    1de8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dea:	8b 89       	ldd	r24, Y+19	; 0x13
    1dec:	9c 89       	ldd	r25, Y+20	; 0x14
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	9c 8b       	std	Y+20, r25	; 0x14
    1df2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df4:	8b 89       	ldd	r24, Y+19	; 0x13
    1df6:	9c 89       	ldd	r25, Y+20	; 0x14
    1df8:	00 97       	sbiw	r24, 0x00	; 0
    1dfa:	69 f7       	brne	.-38     	; 0x1dd6 <LCD_displayCharacter+0x28e>
    1dfc:	14 c0       	rjmp	.+40     	; 0x1e26 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfe:	6d 89       	ldd	r22, Y+21	; 0x15
    1e00:	7e 89       	ldd	r23, Y+22	; 0x16
    1e02:	8f 89       	ldd	r24, Y+23	; 0x17
    1e04:	98 8d       	ldd	r25, Y+24	; 0x18
    1e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	9c 8b       	std	Y+20, r25	; 0x14
    1e10:	8b 8b       	std	Y+19, r24	; 0x13
    1e12:	8b 89       	ldd	r24, Y+19	; 0x13
    1e14:	9c 89       	ldd	r25, Y+20	; 0x14
    1e16:	98 8b       	std	Y+16, r25	; 0x10
    1e18:	8f 87       	std	Y+15, r24	; 0x0f
    1e1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e1c:	98 89       	ldd	r25, Y+16	; 0x10
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <LCD_displayCharacter+0x2d6>
    1e22:	98 8b       	std	Y+16, r25	; 0x10
    1e24:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	62 e0       	ldi	r22, 0x02	; 2
    1e2a:	40 e0       	ldi	r20, 0x00	; 0
    1e2c:	0e 94 c1 08 	call	0x1182	; 0x1182 <GPIO_writePin>
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	a0 e8       	ldi	r26, 0x80	; 128
    1e36:	bf e3       	ldi	r27, 0x3F	; 63
    1e38:	8b 87       	std	Y+11, r24	; 0x0b
    1e3a:	9c 87       	std	Y+12, r25	; 0x0c
    1e3c:	ad 87       	std	Y+13, r26	; 0x0d
    1e3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	4a ef       	ldi	r20, 0xFA	; 250
    1e4e:	54 e4       	ldi	r21, 0x44	; 68
    1e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	8f 83       	std	Y+7, r24	; 0x07
    1e5a:	98 87       	std	Y+8, r25	; 0x08
    1e5c:	a9 87       	std	Y+9, r26	; 0x09
    1e5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e60:	6f 81       	ldd	r22, Y+7	; 0x07
    1e62:	78 85       	ldd	r23, Y+8	; 0x08
    1e64:	89 85       	ldd	r24, Y+9	; 0x09
    1e66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	40 e8       	ldi	r20, 0x80	; 128
    1e6e:	5f e3       	ldi	r21, 0x3F	; 63
    1e70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e74:	88 23       	and	r24, r24
    1e76:	2c f4       	brge	.+10     	; 0x1e82 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	9e 83       	std	Y+6, r25	; 0x06
    1e7e:	8d 83       	std	Y+5, r24	; 0x05
    1e80:	3f c0       	rjmp	.+126    	; 0x1f00 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1e82:	6f 81       	ldd	r22, Y+7	; 0x07
    1e84:	78 85       	ldd	r23, Y+8	; 0x08
    1e86:	89 85       	ldd	r24, Y+9	; 0x09
    1e88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	3f ef       	ldi	r19, 0xFF	; 255
    1e8e:	4f e7       	ldi	r20, 0x7F	; 127
    1e90:	57 e4       	ldi	r21, 0x47	; 71
    1e92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e96:	18 16       	cp	r1, r24
    1e98:	4c f5       	brge	.+82     	; 0x1eec <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	40 e2       	ldi	r20, 0x20	; 32
    1ea8:	51 e4       	ldi	r21, 0x41	; 65
    1eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	bc 01       	movw	r22, r24
    1eb4:	cd 01       	movw	r24, r26
    1eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	9e 83       	std	Y+6, r25	; 0x06
    1ec0:	8d 83       	std	Y+5, r24	; 0x05
    1ec2:	0f c0       	rjmp	.+30     	; 0x1ee2 <LCD_displayCharacter+0x39a>
    1ec4:	88 ec       	ldi	r24, 0xC8	; 200
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	9c 83       	std	Y+4, r25	; 0x04
    1eca:	8b 83       	std	Y+3, r24	; 0x03
    1ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ece:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	f1 f7       	brne	.-4      	; 0x1ed0 <LCD_displayCharacter+0x388>
    1ed4:	9c 83       	std	Y+4, r25	; 0x04
    1ed6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eda:	9e 81       	ldd	r25, Y+6	; 0x06
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	9e 83       	std	Y+6, r25	; 0x06
    1ee0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee6:	00 97       	sbiw	r24, 0x00	; 0
    1ee8:	69 f7       	brne	.-38     	; 0x1ec4 <LCD_displayCharacter+0x37c>
    1eea:	14 c0       	rjmp	.+40     	; 0x1f14 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eec:	6f 81       	ldd	r22, Y+7	; 0x07
    1eee:	78 85       	ldd	r23, Y+8	; 0x08
    1ef0:	89 85       	ldd	r24, Y+9	; 0x09
    1ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	9e 83       	std	Y+6, r25	; 0x06
    1efe:	8d 83       	std	Y+5, r24	; 0x05
    1f00:	8d 81       	ldd	r24, Y+5	; 0x05
    1f02:	9e 81       	ldd	r25, Y+6	; 0x06
    1f04:	9a 83       	std	Y+2, r25	; 0x02
    1f06:	89 83       	std	Y+1, r24	; 0x01
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	f1 f7       	brne	.-4      	; 0x1f0c <LCD_displayCharacter+0x3c4>
    1f10:	9a 83       	std	Y+2, r25	; 0x02
    1f12:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1f14:	e9 96       	adiw	r28, 0x39	; 57
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	f8 94       	cli
    1f1a:	de bf       	out	0x3e, r29	; 62
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	cd bf       	out	0x3d, r28	; 61
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret

00001f26 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	00 d0       	rcall	.+0      	; 0x1f2c <LCD_displayString+0x6>
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
    1f30:	9a 83       	std	Y+2, r25	; 0x02
    1f32:	89 83       	std	Y+1, r24	; 0x01
    1f34:	0a c0       	rjmp	.+20     	; 0x1f4a <LCD_displayString+0x24>


	while((*Str) != '\0')
	{
		LCD_displayCharacter(*Str);
    1f36:	e9 81       	ldd	r30, Y+1	; 0x01
    1f38:	fa 81       	ldd	r31, Y+2	; 0x02
    1f3a:	80 81       	ld	r24, Z
    1f3c:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <LCD_displayCharacter>
		Str++;
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	9a 81       	ldd	r25, Y+2	; 0x02
    1f44:	01 96       	adiw	r24, 0x01	; 1
    1f46:	9a 83       	std	Y+2, r25	; 0x02
    1f48:	89 83       	std	Y+1, r24	; 0x01
 */
void LCD_displayString(const char *Str)
{


	while((*Str) != '\0')
    1f4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f4e:	80 81       	ld	r24, Z
    1f50:	88 23       	and	r24, r24
    1f52:	89 f7       	brne	.-30     	; 0x1f36 <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}

}
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	00 d0       	rcall	.+0      	; 0x1f64 <LCD_moveCursor+0x6>
    1f64:	00 d0       	rcall	.+0      	; 0x1f66 <LCD_moveCursor+0x8>
    1f66:	0f 92       	push	r0
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
    1f6c:	8a 83       	std	Y+2, r24	; 0x02
    1f6e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1f70:	8a 81       	ldd	r24, Y+2	; 0x02
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	3d 83       	std	Y+5, r19	; 0x05
    1f78:	2c 83       	std	Y+4, r18	; 0x04
    1f7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f7e:	81 30       	cpi	r24, 0x01	; 1
    1f80:	91 05       	cpc	r25, r1
    1f82:	c1 f0       	breq	.+48     	; 0x1fb4 <LCD_moveCursor+0x56>
    1f84:	2c 81       	ldd	r18, Y+4	; 0x04
    1f86:	3d 81       	ldd	r19, Y+5	; 0x05
    1f88:	22 30       	cpi	r18, 0x02	; 2
    1f8a:	31 05       	cpc	r19, r1
    1f8c:	2c f4       	brge	.+10     	; 0x1f98 <LCD_moveCursor+0x3a>
    1f8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f90:	9d 81       	ldd	r25, Y+5	; 0x05
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	61 f0       	breq	.+24     	; 0x1fae <LCD_moveCursor+0x50>
    1f96:	19 c0       	rjmp	.+50     	; 0x1fca <LCD_moveCursor+0x6c>
    1f98:	2c 81       	ldd	r18, Y+4	; 0x04
    1f9a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f9c:	22 30       	cpi	r18, 0x02	; 2
    1f9e:	31 05       	cpc	r19, r1
    1fa0:	69 f0       	breq	.+26     	; 0x1fbc <LCD_moveCursor+0x5e>
    1fa2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa6:	83 30       	cpi	r24, 0x03	; 3
    1fa8:	91 05       	cpc	r25, r1
    1faa:	61 f0       	breq	.+24     	; 0x1fc4 <LCD_moveCursor+0x66>
    1fac:	0e c0       	rjmp	.+28     	; 0x1fca <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	89 83       	std	Y+1, r24	; 0x01
    1fb2:	0b c0       	rjmp	.+22     	; 0x1fca <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	80 5c       	subi	r24, 0xC0	; 192
    1fb8:	89 83       	std	Y+1, r24	; 0x01
    1fba:	07 c0       	rjmp	.+14     	; 0x1fca <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbe:	80 5f       	subi	r24, 0xF0	; 240
    1fc0:	89 83       	std	Y+1, r24	; 0x01
    1fc2:	03 c0       	rjmp	.+6      	; 0x1fca <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc6:	80 5b       	subi	r24, 0xB0	; 176
    1fc8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	80 68       	ori	r24, 0x80	; 128
    1fce:	0e 94 b5 0b 	call	0x176a	; 0x176a <LCD_sendCommand>
}
    1fd2:	0f 90       	pop	r0
    1fd4:	0f 90       	pop	r0
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	08 95       	ret

00001fe2 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1fe2:	df 93       	push	r29
    1fe4:	cf 93       	push	r28
    1fe6:	00 d0       	rcall	.+0      	; 0x1fe8 <LCD_displayStringRowColumn+0x6>
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <LCD_displayStringRowColumn+0x8>
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
    1fee:	89 83       	std	Y+1, r24	; 0x01
    1ff0:	6a 83       	std	Y+2, r22	; 0x02
    1ff2:	5c 83       	std	Y+4, r21	; 0x04
    1ff4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	6a 81       	ldd	r22, Y+2	; 0x02
    1ffa:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    2000:	9c 81       	ldd	r25, Y+4	; 0x04
    2002:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <LCD_displayString>
}
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	62 97       	sbiw	r28, 0x12	; 18
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	9a 8b       	std	Y+18, r25	; 0x12
    202a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    202c:	89 89       	ldd	r24, Y+17	; 0x11
    202e:	9a 89       	ldd	r25, Y+18	; 0x12
    2030:	9e 01       	movw	r18, r28
    2032:	2f 5f       	subi	r18, 0xFF	; 255
    2034:	3f 4f       	sbci	r19, 0xFF	; 255
    2036:	b9 01       	movw	r22, r18
    2038:	4a e0       	ldi	r20, 0x0A	; 10
    203a:	50 e0       	ldi	r21, 0x00	; 0
    203c:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <itoa>
   LCD_displayString(buff); /* Display the string */
    2040:	ce 01       	movw	r24, r28
    2042:	01 96       	adiw	r24, 0x01	; 1
    2044:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <LCD_displayString>
}
    2048:	62 96       	adiw	r28, 0x12	; 18
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	de bf       	out	0x3e, r29	; 62
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	cd bf       	out	0x3d, r28	; 61
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	0e 94 b5 0b 	call	0x176a	; 0x176a <LCD_sendCommand>
}
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	08 95       	ret

0000206e <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    206e:	df 93       	push	r29
    2070:	cf 93       	push	r28
    2072:	00 d0       	rcall	.+0      	; 0x2074 <KEYPAD_getPressedKey+0x6>
    2074:	0f 92       	push	r0
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    207a:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    207c:	1b 82       	std	Y+3, r1	; 0x03
    207e:	43 c0       	rjmp	.+134    	; 0x2106 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    2080:	82 e0       	ldi	r24, 0x02	; 2
    2082:	60 e0       	ldi	r22, 0x00	; 0
    2084:	0e 94 47 0a 	call	0x148e	; 0x148e <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	98 2f       	mov	r25, r24
    208c:	9c 5f       	subi	r25, 0xFC	; 252
    208e:	82 e0       	ldi	r24, 0x02	; 2
    2090:	69 2f       	mov	r22, r25
    2092:	41 e0       	ldi	r20, 0x01	; 1
    2094:	0e 94 d6 07 	call	0xfac	; 0xfac <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	88 2f       	mov	r24, r24
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	9c 01       	movw	r18, r24
    20a0:	2c 5f       	subi	r18, 0xFC	; 252
    20a2:	3f 4f       	sbci	r19, 0xFF	; 255
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	02 c0       	rjmp	.+4      	; 0x20ae <KEYPAD_getPressedKey+0x40>
    20aa:	88 0f       	add	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	2a 95       	dec	r18
    20b0:	e2 f7       	brpl	.-8      	; 0x20aa <KEYPAD_getPressedKey+0x3c>
    20b2:	80 95       	com	r24
    20b4:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    20b6:	82 e0       	ldi	r24, 0x02	; 2
    20b8:	69 81       	ldd	r22, Y+1	; 0x01
    20ba:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    20be:	1a 82       	std	Y+2, r1	; 0x02
    20c0:	1c c0       	rjmp	.+56     	; 0x20fa <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    20c2:	82 e0       	ldi	r24, 0x02	; 2
    20c4:	6a 81       	ldd	r22, Y+2	; 0x02
    20c6:	0e 94 ac 09 	call	0x1358	; 0x1358 <GPIO_readPin>
    20ca:	88 23       	and	r24, r24
    20cc:	99 f4       	brne	.+38     	; 0x20f4 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	88 2f       	mov	r24, r24
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	88 0f       	add	r24, r24
    20d6:	99 1f       	adc	r25, r25
    20d8:	88 0f       	add	r24, r24
    20da:	99 1f       	adc	r25, r25
    20dc:	98 2f       	mov	r25, r24
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	89 0f       	add	r24, r25
    20e2:	8f 5f       	subi	r24, 0xFF	; 255
    20e4:	0e 94 88 10 	call	0x2110	; 0x2110 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	cf 91       	pop	r28
    20f0:	df 91       	pop	r29
    20f2:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	8f 5f       	subi	r24, 0xFF	; 255
    20f8:	8a 83       	std	Y+2, r24	; 0x02
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	84 30       	cpi	r24, 0x04	; 4
    20fe:	08 f3       	brcs	.-62     	; 0x20c2 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	8f 5f       	subi	r24, 0xFF	; 255
    2104:	8b 83       	std	Y+3, r24	; 0x03
    2106:	8b 81       	ldd	r24, Y+3	; 0x03
    2108:	84 30       	cpi	r24, 0x04	; 4
    210a:	08 f4       	brcc	.+2      	; 0x210e <KEYPAD_getPressedKey+0xa0>
    210c:	b9 cf       	rjmp	.-142    	; 0x2080 <KEYPAD_getPressedKey+0x12>
    210e:	b6 cf       	rjmp	.-148    	; 0x207c <KEYPAD_getPressedKey+0xe>

00002110 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	00 d0       	rcall	.+0      	; 0x2116 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2116:	00 d0       	rcall	.+0      	; 0x2118 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    211e:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	3c 83       	std	Y+4, r19	; 0x04
    2128:	2b 83       	std	Y+3, r18	; 0x03
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	9c 81       	ldd	r25, Y+4	; 0x04
    212e:	88 30       	cpi	r24, 0x08	; 8
    2130:	91 05       	cpc	r25, r1
    2132:	09 f4       	brne	.+2      	; 0x2136 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2134:	70 c0       	rjmp	.+224    	; 0x2216 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2136:	2b 81       	ldd	r18, Y+3	; 0x03
    2138:	3c 81       	ldd	r19, Y+4	; 0x04
    213a:	29 30       	cpi	r18, 0x09	; 9
    213c:	31 05       	cpc	r19, r1
    213e:	5c f5       	brge	.+86     	; 0x2196 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2140:	8b 81       	ldd	r24, Y+3	; 0x03
    2142:	9c 81       	ldd	r25, Y+4	; 0x04
    2144:	84 30       	cpi	r24, 0x04	; 4
    2146:	91 05       	cpc	r25, r1
    2148:	09 f4       	brne	.+2      	; 0x214c <KEYPAD_4x4_adjustKeyNumber+0x3c>
    214a:	59 c0       	rjmp	.+178    	; 0x21fe <KEYPAD_4x4_adjustKeyNumber+0xee>
    214c:	2b 81       	ldd	r18, Y+3	; 0x03
    214e:	3c 81       	ldd	r19, Y+4	; 0x04
    2150:	25 30       	cpi	r18, 0x05	; 5
    2152:	31 05       	cpc	r19, r1
    2154:	9c f4       	brge	.+38     	; 0x217c <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	9c 81       	ldd	r25, Y+4	; 0x04
    215a:	82 30       	cpi	r24, 0x02	; 2
    215c:	91 05       	cpc	r25, r1
    215e:	09 f4       	brne	.+2      	; 0x2162 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2160:	48 c0       	rjmp	.+144    	; 0x21f2 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2162:	2b 81       	ldd	r18, Y+3	; 0x03
    2164:	3c 81       	ldd	r19, Y+4	; 0x04
    2166:	23 30       	cpi	r18, 0x03	; 3
    2168:	31 05       	cpc	r19, r1
    216a:	0c f0       	brlt	.+2      	; 0x216e <KEYPAD_4x4_adjustKeyNumber+0x5e>
    216c:	45 c0       	rjmp	.+138    	; 0x21f8 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    216e:	8b 81       	ldd	r24, Y+3	; 0x03
    2170:	9c 81       	ldd	r25, Y+4	; 0x04
    2172:	81 30       	cpi	r24, 0x01	; 1
    2174:	91 05       	cpc	r25, r1
    2176:	09 f4       	brne	.+2      	; 0x217a <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2178:	39 c0       	rjmp	.+114    	; 0x21ec <KEYPAD_4x4_adjustKeyNumber+0xdc>
    217a:	67 c0       	rjmp	.+206    	; 0x224a <KEYPAD_4x4_adjustKeyNumber+0x13a>
    217c:	2b 81       	ldd	r18, Y+3	; 0x03
    217e:	3c 81       	ldd	r19, Y+4	; 0x04
    2180:	26 30       	cpi	r18, 0x06	; 6
    2182:	31 05       	cpc	r19, r1
    2184:	09 f4       	brne	.+2      	; 0x2188 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2186:	41 c0       	rjmp	.+130    	; 0x220a <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
    218a:	9c 81       	ldd	r25, Y+4	; 0x04
    218c:	87 30       	cpi	r24, 0x07	; 7
    218e:	91 05       	cpc	r25, r1
    2190:	0c f0       	brlt	.+2      	; 0x2194 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2192:	3e c0       	rjmp	.+124    	; 0x2210 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2194:	37 c0       	rjmp	.+110    	; 0x2204 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2196:	2b 81       	ldd	r18, Y+3	; 0x03
    2198:	3c 81       	ldd	r19, Y+4	; 0x04
    219a:	2c 30       	cpi	r18, 0x0C	; 12
    219c:	31 05       	cpc	r19, r1
    219e:	09 f4       	brne	.+2      	; 0x21a2 <KEYPAD_4x4_adjustKeyNumber+0x92>
    21a0:	46 c0       	rjmp	.+140    	; 0x222e <KEYPAD_4x4_adjustKeyNumber+0x11e>
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	9c 81       	ldd	r25, Y+4	; 0x04
    21a6:	8d 30       	cpi	r24, 0x0D	; 13
    21a8:	91 05       	cpc	r25, r1
    21aa:	5c f4       	brge	.+22     	; 0x21c2 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    21ac:	2b 81       	ldd	r18, Y+3	; 0x03
    21ae:	3c 81       	ldd	r19, Y+4	; 0x04
    21b0:	2a 30       	cpi	r18, 0x0A	; 10
    21b2:	31 05       	cpc	r19, r1
    21b4:	b1 f1       	breq	.+108    	; 0x2222 <KEYPAD_4x4_adjustKeyNumber+0x112>
    21b6:	8b 81       	ldd	r24, Y+3	; 0x03
    21b8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ba:	8b 30       	cpi	r24, 0x0B	; 11
    21bc:	91 05       	cpc	r25, r1
    21be:	a4 f5       	brge	.+104    	; 0x2228 <KEYPAD_4x4_adjustKeyNumber+0x118>
    21c0:	2d c0       	rjmp	.+90     	; 0x221c <KEYPAD_4x4_adjustKeyNumber+0x10c>
    21c2:	2b 81       	ldd	r18, Y+3	; 0x03
    21c4:	3c 81       	ldd	r19, Y+4	; 0x04
    21c6:	2e 30       	cpi	r18, 0x0E	; 14
    21c8:	31 05       	cpc	r19, r1
    21ca:	b9 f1       	breq	.+110    	; 0x223a <KEYPAD_4x4_adjustKeyNumber+0x12a>
    21cc:	8b 81       	ldd	r24, Y+3	; 0x03
    21ce:	9c 81       	ldd	r25, Y+4	; 0x04
    21d0:	8e 30       	cpi	r24, 0x0E	; 14
    21d2:	91 05       	cpc	r25, r1
    21d4:	7c f1       	brlt	.+94     	; 0x2234 <KEYPAD_4x4_adjustKeyNumber+0x124>
    21d6:	2b 81       	ldd	r18, Y+3	; 0x03
    21d8:	3c 81       	ldd	r19, Y+4	; 0x04
    21da:	2f 30       	cpi	r18, 0x0F	; 15
    21dc:	31 05       	cpc	r19, r1
    21de:	79 f1       	breq	.+94     	; 0x223e <KEYPAD_4x4_adjustKeyNumber+0x12e>
    21e0:	8b 81       	ldd	r24, Y+3	; 0x03
    21e2:	9c 81       	ldd	r25, Y+4	; 0x04
    21e4:	80 31       	cpi	r24, 0x10	; 16
    21e6:	91 05       	cpc	r25, r1
    21e8:	69 f1       	breq	.+90     	; 0x2244 <KEYPAD_4x4_adjustKeyNumber+0x134>
    21ea:	2f c0       	rjmp	.+94     	; 0x224a <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    21ec:	87 e0       	ldi	r24, 0x07	; 7
    21ee:	89 83       	std	Y+1, r24	; 0x01
    21f0:	2e c0       	rjmp	.+92     	; 0x224e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    21f2:	88 e0       	ldi	r24, 0x08	; 8
    21f4:	89 83       	std	Y+1, r24	; 0x01
    21f6:	2b c0       	rjmp	.+86     	; 0x224e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    21f8:	89 e0       	ldi	r24, 0x09	; 9
    21fa:	89 83       	std	Y+1, r24	; 0x01
    21fc:	28 c0       	rjmp	.+80     	; 0x224e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    21fe:	85 e2       	ldi	r24, 0x25	; 37
    2200:	89 83       	std	Y+1, r24	; 0x01
    2202:	25 c0       	rjmp	.+74     	; 0x224e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2204:	84 e0       	ldi	r24, 0x04	; 4
    2206:	89 83       	std	Y+1, r24	; 0x01
    2208:	22 c0       	rjmp	.+68     	; 0x224e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    220a:	85 e0       	ldi	r24, 0x05	; 5
    220c:	89 83       	std	Y+1, r24	; 0x01
    220e:	1f c0       	rjmp	.+62     	; 0x224e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2210:	86 e0       	ldi	r24, 0x06	; 6
    2212:	89 83       	std	Y+1, r24	; 0x01
    2214:	1c c0       	rjmp	.+56     	; 0x224e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2216:	8a e2       	ldi	r24, 0x2A	; 42
    2218:	89 83       	std	Y+1, r24	; 0x01
    221a:	19 c0       	rjmp	.+50     	; 0x224e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	89 83       	std	Y+1, r24	; 0x01
    2220:	16 c0       	rjmp	.+44     	; 0x224e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2222:	82 e0       	ldi	r24, 0x02	; 2
    2224:	89 83       	std	Y+1, r24	; 0x01
    2226:	13 c0       	rjmp	.+38     	; 0x224e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2228:	83 e0       	ldi	r24, 0x03	; 3
    222a:	89 83       	std	Y+1, r24	; 0x01
    222c:	10 c0       	rjmp	.+32     	; 0x224e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    222e:	8d e2       	ldi	r24, 0x2D	; 45
    2230:	89 83       	std	Y+1, r24	; 0x01
    2232:	0d c0       	rjmp	.+26     	; 0x224e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2234:	8d e0       	ldi	r24, 0x0D	; 13
    2236:	89 83       	std	Y+1, r24	; 0x01
    2238:	0a c0       	rjmp	.+20     	; 0x224e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    223a:	19 82       	std	Y+1, r1	; 0x01
    223c:	08 c0       	rjmp	.+16     	; 0x224e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    223e:	8d e3       	ldi	r24, 0x3D	; 61
    2240:	89 83       	std	Y+1, r24	; 0x01
    2242:	05 c0       	rjmp	.+10     	; 0x224e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2244:	8b e2       	ldi	r24, 0x2B	; 43
    2246:	89 83       	std	Y+1, r24	; 0x01
    2248:	02 c0       	rjmp	.+4      	; 0x224e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    224a:	8a 81       	ldd	r24, Y+2	; 0x02
    224c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    224e:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	cf 91       	pop	r28
    225a:	df 91       	pop	r29
    225c:	08 95       	ret

0000225e <start>:
int counter;

Timer1_Configtype timerConfig = {COMPARE,0,7813,Prescale_1024};
UART_ConfigType uartConfig = {Asynchronous,Even,one};

void start(void){
    225e:	0f 93       	push	r16
    2260:	1f 93       	push	r17
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	cd b7       	in	r28, 0x3d	; 61
    2268:	de b7       	in	r29, 0x3e	; 62
    226a:	ce 5e       	subi	r28, 0xEE	; 238
    226c:	d0 40       	sbci	r29, 0x00	; 0
    226e:	0f b6       	in	r0, 0x3f	; 63
    2270:	f8 94       	cli
    2272:	de bf       	out	0x3e, r29	; 62
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7);
    2278:	af e5       	ldi	r26, 0x5F	; 95
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	ef e5       	ldi	r30, 0x5F	; 95
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	80 68       	ori	r24, 0x80	; 128
    2284:	8c 93       	st	X, r24

	LCD_init();
    2286:	0e 94 14 0b 	call	0x1628	; 0x1628 <LCD_init>
	UART_init(&uartConfig);
    228a:	83 e4       	ldi	r24, 0x43	; 67
    228c:	91 e0       	ldi	r25, 0x01	; 1
    228e:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>



	uint8 password[5] , confirmPassword[5] , passwordVerified , command ;

	Timer1_setCallBack(timerHandler);
    2292:	8a e8       	ldi	r24, 0x8A	; 138
    2294:	9e e1       	ldi	r25, 0x1E	; 30
    2296:	0e 94 a8 07 	call	0xf50	; 0xf50 <Timer1_setCallBack>
    229a:	ba c3       	rjmp	.+1908   	; 0x2a10 <start+0x7b2>

	while(passwordVerified == 0)
	{
		LCD_clearScreen();
    229c:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_clearScreen>
		LCD_displayString("Plz enter pass");
    22a0:	80 e6       	ldi	r24, 0x60	; 96
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <LCD_displayString>


		enterPassword(password);
    22a8:	ce 01       	movw	r24, r28
    22aa:	8b 51       	subi	r24, 0x1B	; 27
    22ac:	9f 4f       	sbci	r25, 0xFF	; 255
    22ae:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <enterPassword>
    22b2:	fe 01       	movw	r30, r28
    22b4:	e3 52       	subi	r30, 0x23	; 35
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	a8 e4       	ldi	r26, 0x48	; 72
    22be:	b2 e4       	ldi	r27, 0x42	; 66
    22c0:	80 83       	st	Z, r24
    22c2:	91 83       	std	Z+1, r25	; 0x01
    22c4:	a2 83       	std	Z+2, r26	; 0x02
    22c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c8:	8e 01       	movw	r16, r28
    22ca:	07 52       	subi	r16, 0x27	; 39
    22cc:	1f 4f       	sbci	r17, 0xFF	; 255
    22ce:	fe 01       	movw	r30, r28
    22d0:	e3 52       	subi	r30, 0x23	; 35
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	60 81       	ld	r22, Z
    22d6:	71 81       	ldd	r23, Z+1	; 0x01
    22d8:	82 81       	ldd	r24, Z+2	; 0x02
    22da:	93 81       	ldd	r25, Z+3	; 0x03
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	4a ef       	ldi	r20, 0xFA	; 250
    22e2:	54 e4       	ldi	r21, 0x44	; 68
    22e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	f8 01       	movw	r30, r16
    22ee:	80 83       	st	Z, r24
    22f0:	91 83       	std	Z+1, r25	; 0x01
    22f2:	a2 83       	std	Z+2, r26	; 0x02
    22f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22f6:	fe 01       	movw	r30, r28
    22f8:	e7 52       	subi	r30, 0x27	; 39
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	60 81       	ld	r22, Z
    22fe:	71 81       	ldd	r23, Z+1	; 0x01
    2300:	82 81       	ldd	r24, Z+2	; 0x02
    2302:	93 81       	ldd	r25, Z+3	; 0x03
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e8       	ldi	r20, 0x80	; 128
    230a:	5f e3       	ldi	r21, 0x3F	; 63
    230c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2310:	88 23       	and	r24, r24
    2312:	44 f4       	brge	.+16     	; 0x2324 <start+0xc6>
		__ticks = 1;
    2314:	fe 01       	movw	r30, r28
    2316:	e9 52       	subi	r30, 0x29	; 41
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	80 83       	st	Z, r24
    2322:	64 c0       	rjmp	.+200    	; 0x23ec <start+0x18e>
	else if (__tmp > 65535)
    2324:	fe 01       	movw	r30, r28
    2326:	e7 52       	subi	r30, 0x27	; 39
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	60 81       	ld	r22, Z
    232c:	71 81       	ldd	r23, Z+1	; 0x01
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	93 81       	ldd	r25, Z+3	; 0x03
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	3f ef       	ldi	r19, 0xFF	; 255
    2336:	4f e7       	ldi	r20, 0x7F	; 127
    2338:	57 e4       	ldi	r21, 0x47	; 71
    233a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    233e:	18 16       	cp	r1, r24
    2340:	0c f0       	brlt	.+2      	; 0x2344 <start+0xe6>
    2342:	43 c0       	rjmp	.+134    	; 0x23ca <start+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2344:	fe 01       	movw	r30, r28
    2346:	e3 52       	subi	r30, 0x23	; 35
    2348:	ff 4f       	sbci	r31, 0xFF	; 255
    234a:	60 81       	ld	r22, Z
    234c:	71 81       	ldd	r23, Z+1	; 0x01
    234e:	82 81       	ldd	r24, Z+2	; 0x02
    2350:	93 81       	ldd	r25, Z+3	; 0x03
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	40 e2       	ldi	r20, 0x20	; 32
    2358:	51 e4       	ldi	r21, 0x41	; 65
    235a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	8e 01       	movw	r16, r28
    2364:	09 52       	subi	r16, 0x29	; 41
    2366:	1f 4f       	sbci	r17, 0xFF	; 255
    2368:	bc 01       	movw	r22, r24
    236a:	cd 01       	movw	r24, r26
    236c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	f8 01       	movw	r30, r16
    2376:	91 83       	std	Z+1, r25	; 0x01
    2378:	80 83       	st	Z, r24
    237a:	1f c0       	rjmp	.+62     	; 0x23ba <start+0x15c>
    237c:	fe 01       	movw	r30, r28
    237e:	eb 52       	subi	r30, 0x2B	; 43
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	88 ec       	ldi	r24, 0xC8	; 200
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	91 83       	std	Z+1, r25	; 0x01
    2388:	80 83       	st	Z, r24
    238a:	fe 01       	movw	r30, r28
    238c:	eb 52       	subi	r30, 0x2B	; 43
    238e:	ff 4f       	sbci	r31, 0xFF	; 255
    2390:	80 81       	ld	r24, Z
    2392:	91 81       	ldd	r25, Z+1	; 0x01
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	f1 f7       	brne	.-4      	; 0x2394 <start+0x136>
    2398:	fe 01       	movw	r30, r28
    239a:	eb 52       	subi	r30, 0x2B	; 43
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	91 83       	std	Z+1, r25	; 0x01
    23a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a2:	de 01       	movw	r26, r28
    23a4:	a9 52       	subi	r26, 0x29	; 41
    23a6:	bf 4f       	sbci	r27, 0xFF	; 255
    23a8:	fe 01       	movw	r30, r28
    23aa:	e9 52       	subi	r30, 0x29	; 41
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	80 81       	ld	r24, Z
    23b0:	91 81       	ldd	r25, Z+1	; 0x01
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	11 96       	adiw	r26, 0x01	; 1
    23b6:	9c 93       	st	X, r25
    23b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ba:	fe 01       	movw	r30, r28
    23bc:	e9 52       	subi	r30, 0x29	; 41
    23be:	ff 4f       	sbci	r31, 0xFF	; 255
    23c0:	80 81       	ld	r24, Z
    23c2:	91 81       	ldd	r25, Z+1	; 0x01
    23c4:	00 97       	sbiw	r24, 0x00	; 0
    23c6:	d1 f6       	brne	.-76     	; 0x237c <start+0x11e>
    23c8:	27 c0       	rjmp	.+78     	; 0x2418 <start+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ca:	8e 01       	movw	r16, r28
    23cc:	09 52       	subi	r16, 0x29	; 41
    23ce:	1f 4f       	sbci	r17, 0xFF	; 255
    23d0:	fe 01       	movw	r30, r28
    23d2:	e7 52       	subi	r30, 0x27	; 39
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	60 81       	ld	r22, Z
    23d8:	71 81       	ldd	r23, Z+1	; 0x01
    23da:	82 81       	ldd	r24, Z+2	; 0x02
    23dc:	93 81       	ldd	r25, Z+3	; 0x03
    23de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	f8 01       	movw	r30, r16
    23e8:	91 83       	std	Z+1, r25	; 0x01
    23ea:	80 83       	st	Z, r24
    23ec:	de 01       	movw	r26, r28
    23ee:	ad 52       	subi	r26, 0x2D	; 45
    23f0:	bf 4f       	sbci	r27, 0xFF	; 255
    23f2:	fe 01       	movw	r30, r28
    23f4:	e9 52       	subi	r30, 0x29	; 41
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	80 81       	ld	r24, Z
    23fa:	91 81       	ldd	r25, Z+1	; 0x01
    23fc:	8d 93       	st	X+, r24
    23fe:	9c 93       	st	X, r25
    2400:	fe 01       	movw	r30, r28
    2402:	ed 52       	subi	r30, 0x2D	; 45
    2404:	ff 4f       	sbci	r31, 0xFF	; 255
    2406:	80 81       	ld	r24, Z
    2408:	91 81       	ldd	r25, Z+1	; 0x01
    240a:	01 97       	sbiw	r24, 0x01	; 1
    240c:	f1 f7       	brne	.-4      	; 0x240a <start+0x1ac>
    240e:	fe 01       	movw	r30, r28
    2410:	ed 52       	subi	r30, 0x2D	; 45
    2412:	ff 4f       	sbci	r31, 0xFF	; 255
    2414:	91 83       	std	Z+1, r25	; 0x01
    2416:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);
		sendPassword(password);
    2418:	ce 01       	movw	r24, r28
    241a:	8b 51       	subi	r24, 0x1B	; 27
    241c:	9f 4f       	sbci	r25, 0xFF	; 255
    241e:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <sendPassword>

		LCD_clearScreen();
    2422:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_clearScreen>
		LCD_displayString("Confirm Pass");
    2426:	8f e6       	ldi	r24, 0x6F	; 111
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <LCD_displayString>
		enterPassword( confirmPassword );
    242e:	ce 01       	movw	r24, r28
    2430:	86 51       	subi	r24, 0x16	; 22
    2432:	9f 4f       	sbci	r25, 0xFF	; 255
    2434:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <enterPassword>
    2438:	fe 01       	movw	r30, r28
    243a:	e1 53       	subi	r30, 0x31	; 49
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	a8 e4       	ldi	r26, 0x48	; 72
    2444:	b2 e4       	ldi	r27, 0x42	; 66
    2446:	80 83       	st	Z, r24
    2448:	91 83       	std	Z+1, r25	; 0x01
    244a:	a2 83       	std	Z+2, r26	; 0x02
    244c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    244e:	8e 01       	movw	r16, r28
    2450:	05 53       	subi	r16, 0x35	; 53
    2452:	1f 4f       	sbci	r17, 0xFF	; 255
    2454:	fe 01       	movw	r30, r28
    2456:	e1 53       	subi	r30, 0x31	; 49
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	60 81       	ld	r22, Z
    245c:	71 81       	ldd	r23, Z+1	; 0x01
    245e:	82 81       	ldd	r24, Z+2	; 0x02
    2460:	93 81       	ldd	r25, Z+3	; 0x03
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	4a ef       	ldi	r20, 0xFA	; 250
    2468:	54 e4       	ldi	r21, 0x44	; 68
    246a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	f8 01       	movw	r30, r16
    2474:	80 83       	st	Z, r24
    2476:	91 83       	std	Z+1, r25	; 0x01
    2478:	a2 83       	std	Z+2, r26	; 0x02
    247a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    247c:	fe 01       	movw	r30, r28
    247e:	e5 53       	subi	r30, 0x35	; 53
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	60 81       	ld	r22, Z
    2484:	71 81       	ldd	r23, Z+1	; 0x01
    2486:	82 81       	ldd	r24, Z+2	; 0x02
    2488:	93 81       	ldd	r25, Z+3	; 0x03
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e8       	ldi	r20, 0x80	; 128
    2490:	5f e3       	ldi	r21, 0x3F	; 63
    2492:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2496:	88 23       	and	r24, r24
    2498:	44 f4       	brge	.+16     	; 0x24aa <start+0x24c>
		__ticks = 1;
    249a:	fe 01       	movw	r30, r28
    249c:	e7 53       	subi	r30, 0x37	; 55
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	91 83       	std	Z+1, r25	; 0x01
    24a6:	80 83       	st	Z, r24
    24a8:	64 c0       	rjmp	.+200    	; 0x2572 <start+0x314>
	else if (__tmp > 65535)
    24aa:	fe 01       	movw	r30, r28
    24ac:	e5 53       	subi	r30, 0x35	; 53
    24ae:	ff 4f       	sbci	r31, 0xFF	; 255
    24b0:	60 81       	ld	r22, Z
    24b2:	71 81       	ldd	r23, Z+1	; 0x01
    24b4:	82 81       	ldd	r24, Z+2	; 0x02
    24b6:	93 81       	ldd	r25, Z+3	; 0x03
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	3f ef       	ldi	r19, 0xFF	; 255
    24bc:	4f e7       	ldi	r20, 0x7F	; 127
    24be:	57 e4       	ldi	r21, 0x47	; 71
    24c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24c4:	18 16       	cp	r1, r24
    24c6:	0c f0       	brlt	.+2      	; 0x24ca <start+0x26c>
    24c8:	43 c0       	rjmp	.+134    	; 0x2550 <start+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ca:	fe 01       	movw	r30, r28
    24cc:	e1 53       	subi	r30, 0x31	; 49
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	60 81       	ld	r22, Z
    24d2:	71 81       	ldd	r23, Z+1	; 0x01
    24d4:	82 81       	ldd	r24, Z+2	; 0x02
    24d6:	93 81       	ldd	r25, Z+3	; 0x03
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	40 e2       	ldi	r20, 0x20	; 32
    24de:	51 e4       	ldi	r21, 0x41	; 65
    24e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	8e 01       	movw	r16, r28
    24ea:	07 53       	subi	r16, 0x37	; 55
    24ec:	1f 4f       	sbci	r17, 0xFF	; 255
    24ee:	bc 01       	movw	r22, r24
    24f0:	cd 01       	movw	r24, r26
    24f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	f8 01       	movw	r30, r16
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	80 83       	st	Z, r24
    2500:	1f c0       	rjmp	.+62     	; 0x2540 <start+0x2e2>
    2502:	fe 01       	movw	r30, r28
    2504:	e9 53       	subi	r30, 0x39	; 57
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	88 ec       	ldi	r24, 0xC8	; 200
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	80 83       	st	Z, r24
    2510:	fe 01       	movw	r30, r28
    2512:	e9 53       	subi	r30, 0x39	; 57
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	80 81       	ld	r24, Z
    2518:	91 81       	ldd	r25, Z+1	; 0x01
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	f1 f7       	brne	.-4      	; 0x251a <start+0x2bc>
    251e:	fe 01       	movw	r30, r28
    2520:	e9 53       	subi	r30, 0x39	; 57
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	91 83       	std	Z+1, r25	; 0x01
    2526:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2528:	de 01       	movw	r26, r28
    252a:	a7 53       	subi	r26, 0x37	; 55
    252c:	bf 4f       	sbci	r27, 0xFF	; 255
    252e:	fe 01       	movw	r30, r28
    2530:	e7 53       	subi	r30, 0x37	; 55
    2532:	ff 4f       	sbci	r31, 0xFF	; 255
    2534:	80 81       	ld	r24, Z
    2536:	91 81       	ldd	r25, Z+1	; 0x01
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	11 96       	adiw	r26, 0x01	; 1
    253c:	9c 93       	st	X, r25
    253e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2540:	fe 01       	movw	r30, r28
    2542:	e7 53       	subi	r30, 0x37	; 55
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	80 81       	ld	r24, Z
    2548:	91 81       	ldd	r25, Z+1	; 0x01
    254a:	00 97       	sbiw	r24, 0x00	; 0
    254c:	d1 f6       	brne	.-76     	; 0x2502 <start+0x2a4>
    254e:	27 c0       	rjmp	.+78     	; 0x259e <start+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2550:	8e 01       	movw	r16, r28
    2552:	07 53       	subi	r16, 0x37	; 55
    2554:	1f 4f       	sbci	r17, 0xFF	; 255
    2556:	fe 01       	movw	r30, r28
    2558:	e5 53       	subi	r30, 0x35	; 53
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	60 81       	ld	r22, Z
    255e:	71 81       	ldd	r23, Z+1	; 0x01
    2560:	82 81       	ldd	r24, Z+2	; 0x02
    2562:	93 81       	ldd	r25, Z+3	; 0x03
    2564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	f8 01       	movw	r30, r16
    256e:	91 83       	std	Z+1, r25	; 0x01
    2570:	80 83       	st	Z, r24
    2572:	de 01       	movw	r26, r28
    2574:	ab 53       	subi	r26, 0x3B	; 59
    2576:	bf 4f       	sbci	r27, 0xFF	; 255
    2578:	fe 01       	movw	r30, r28
    257a:	e7 53       	subi	r30, 0x37	; 55
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	80 81       	ld	r24, Z
    2580:	91 81       	ldd	r25, Z+1	; 0x01
    2582:	8d 93       	st	X+, r24
    2584:	9c 93       	st	X, r25
    2586:	fe 01       	movw	r30, r28
    2588:	eb 53       	subi	r30, 0x3B	; 59
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	80 81       	ld	r24, Z
    258e:	91 81       	ldd	r25, Z+1	; 0x01
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	f1 f7       	brne	.-4      	; 0x2590 <start+0x332>
    2594:	fe 01       	movw	r30, r28
    2596:	eb 53       	subi	r30, 0x3B	; 59
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	91 83       	std	Z+1, r25	; 0x01
    259c:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);
		sendPassword( confirmPassword );
    259e:	ce 01       	movw	r24, r28
    25a0:	86 51       	subi	r24, 0x16	; 22
    25a2:	9f 4f       	sbci	r25, 0xFF	; 255
    25a4:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <sendPassword>
    25a8:	fe 01       	movw	r30, r28
    25aa:	ef 53       	subi	r30, 0x3F	; 63
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	a8 e4       	ldi	r26, 0x48	; 72
    25b4:	b2 e4       	ldi	r27, 0x42	; 66
    25b6:	80 83       	st	Z, r24
    25b8:	91 83       	std	Z+1, r25	; 0x01
    25ba:	a2 83       	std	Z+2, r26	; 0x02
    25bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25be:	8e 01       	movw	r16, r28
    25c0:	03 54       	subi	r16, 0x43	; 67
    25c2:	1f 4f       	sbci	r17, 0xFF	; 255
    25c4:	fe 01       	movw	r30, r28
    25c6:	ef 53       	subi	r30, 0x3F	; 63
    25c8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ca:	60 81       	ld	r22, Z
    25cc:	71 81       	ldd	r23, Z+1	; 0x01
    25ce:	82 81       	ldd	r24, Z+2	; 0x02
    25d0:	93 81       	ldd	r25, Z+3	; 0x03
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	4a ef       	ldi	r20, 0xFA	; 250
    25d8:	54 e4       	ldi	r21, 0x44	; 68
    25da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	f8 01       	movw	r30, r16
    25e4:	80 83       	st	Z, r24
    25e6:	91 83       	std	Z+1, r25	; 0x01
    25e8:	a2 83       	std	Z+2, r26	; 0x02
    25ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25ec:	fe 01       	movw	r30, r28
    25ee:	e3 54       	subi	r30, 0x43	; 67
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	60 81       	ld	r22, Z
    25f4:	71 81       	ldd	r23, Z+1	; 0x01
    25f6:	82 81       	ldd	r24, Z+2	; 0x02
    25f8:	93 81       	ldd	r25, Z+3	; 0x03
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	40 e8       	ldi	r20, 0x80	; 128
    2600:	5f e3       	ldi	r21, 0x3F	; 63
    2602:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2606:	88 23       	and	r24, r24
    2608:	44 f4       	brge	.+16     	; 0x261a <start+0x3bc>
		__ticks = 1;
    260a:	fe 01       	movw	r30, r28
    260c:	e5 54       	subi	r30, 0x45	; 69
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	91 83       	std	Z+1, r25	; 0x01
    2616:	80 83       	st	Z, r24
    2618:	64 c0       	rjmp	.+200    	; 0x26e2 <start+0x484>
	else if (__tmp > 65535)
    261a:	fe 01       	movw	r30, r28
    261c:	e3 54       	subi	r30, 0x43	; 67
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	60 81       	ld	r22, Z
    2622:	71 81       	ldd	r23, Z+1	; 0x01
    2624:	82 81       	ldd	r24, Z+2	; 0x02
    2626:	93 81       	ldd	r25, Z+3	; 0x03
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	3f ef       	ldi	r19, 0xFF	; 255
    262c:	4f e7       	ldi	r20, 0x7F	; 127
    262e:	57 e4       	ldi	r21, 0x47	; 71
    2630:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2634:	18 16       	cp	r1, r24
    2636:	0c f0       	brlt	.+2      	; 0x263a <start+0x3dc>
    2638:	43 c0       	rjmp	.+134    	; 0x26c0 <start+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263a:	fe 01       	movw	r30, r28
    263c:	ef 53       	subi	r30, 0x3F	; 63
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	60 81       	ld	r22, Z
    2642:	71 81       	ldd	r23, Z+1	; 0x01
    2644:	82 81       	ldd	r24, Z+2	; 0x02
    2646:	93 81       	ldd	r25, Z+3	; 0x03
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e2       	ldi	r20, 0x20	; 32
    264e:	51 e4       	ldi	r21, 0x41	; 65
    2650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	8e 01       	movw	r16, r28
    265a:	05 54       	subi	r16, 0x45	; 69
    265c:	1f 4f       	sbci	r17, 0xFF	; 255
    265e:	bc 01       	movw	r22, r24
    2660:	cd 01       	movw	r24, r26
    2662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	f8 01       	movw	r30, r16
    266c:	91 83       	std	Z+1, r25	; 0x01
    266e:	80 83       	st	Z, r24
    2670:	1f c0       	rjmp	.+62     	; 0x26b0 <start+0x452>
    2672:	fe 01       	movw	r30, r28
    2674:	e7 54       	subi	r30, 0x47	; 71
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	88 ec       	ldi	r24, 0xC8	; 200
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	91 83       	std	Z+1, r25	; 0x01
    267e:	80 83       	st	Z, r24
    2680:	fe 01       	movw	r30, r28
    2682:	e7 54       	subi	r30, 0x47	; 71
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	80 81       	ld	r24, Z
    2688:	91 81       	ldd	r25, Z+1	; 0x01
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	f1 f7       	brne	.-4      	; 0x268a <start+0x42c>
    268e:	fe 01       	movw	r30, r28
    2690:	e7 54       	subi	r30, 0x47	; 71
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	91 83       	std	Z+1, r25	; 0x01
    2696:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2698:	de 01       	movw	r26, r28
    269a:	a5 54       	subi	r26, 0x45	; 69
    269c:	bf 4f       	sbci	r27, 0xFF	; 255
    269e:	fe 01       	movw	r30, r28
    26a0:	e5 54       	subi	r30, 0x45	; 69
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	80 81       	ld	r24, Z
    26a6:	91 81       	ldd	r25, Z+1	; 0x01
    26a8:	01 97       	sbiw	r24, 0x01	; 1
    26aa:	11 96       	adiw	r26, 0x01	; 1
    26ac:	9c 93       	st	X, r25
    26ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b0:	fe 01       	movw	r30, r28
    26b2:	e5 54       	subi	r30, 0x45	; 69
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	80 81       	ld	r24, Z
    26b8:	91 81       	ldd	r25, Z+1	; 0x01
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	d1 f6       	brne	.-76     	; 0x2672 <start+0x414>
    26be:	27 c0       	rjmp	.+78     	; 0x270e <start+0x4b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c0:	8e 01       	movw	r16, r28
    26c2:	05 54       	subi	r16, 0x45	; 69
    26c4:	1f 4f       	sbci	r17, 0xFF	; 255
    26c6:	fe 01       	movw	r30, r28
    26c8:	e3 54       	subi	r30, 0x43	; 67
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	60 81       	ld	r22, Z
    26ce:	71 81       	ldd	r23, Z+1	; 0x01
    26d0:	82 81       	ldd	r24, Z+2	; 0x02
    26d2:	93 81       	ldd	r25, Z+3	; 0x03
    26d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	f8 01       	movw	r30, r16
    26de:	91 83       	std	Z+1, r25	; 0x01
    26e0:	80 83       	st	Z, r24
    26e2:	de 01       	movw	r26, r28
    26e4:	a9 54       	subi	r26, 0x49	; 73
    26e6:	bf 4f       	sbci	r27, 0xFF	; 255
    26e8:	fe 01       	movw	r30, r28
    26ea:	e5 54       	subi	r30, 0x45	; 69
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	80 81       	ld	r24, Z
    26f0:	91 81       	ldd	r25, Z+1	; 0x01
    26f2:	8d 93       	st	X+, r24
    26f4:	9c 93       	st	X, r25
    26f6:	fe 01       	movw	r30, r28
    26f8:	e9 54       	subi	r30, 0x49	; 73
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	80 81       	ld	r24, Z
    26fe:	91 81       	ldd	r25, Z+1	; 0x01
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	f1 f7       	brne	.-4      	; 0x2700 <start+0x4a2>
    2704:	fe 01       	movw	r30, r28
    2706:	e9 54       	subi	r30, 0x49	; 73
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	91 83       	std	Z+1, r25	; 0x01
    270c:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);

		passwordVerified = UART_recieveByte();
    270e:	0e 94 3d 06 	call	0xc7a	; 0xc7a <UART_recieveByte>
    2712:	fe 01       	movw	r30, r28
    2714:	ec 51       	subi	r30, 0x1C	; 28
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	80 83       	st	Z, r24
    271a:	fe 01       	movw	r30, r28
    271c:	ed 54       	subi	r30, 0x4D	; 77
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	a8 e4       	ldi	r26, 0x48	; 72
    2726:	b2 e4       	ldi	r27, 0x42	; 66
    2728:	80 83       	st	Z, r24
    272a:	91 83       	std	Z+1, r25	; 0x01
    272c:	a2 83       	std	Z+2, r26	; 0x02
    272e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2730:	8e 01       	movw	r16, r28
    2732:	01 55       	subi	r16, 0x51	; 81
    2734:	1f 4f       	sbci	r17, 0xFF	; 255
    2736:	fe 01       	movw	r30, r28
    2738:	ed 54       	subi	r30, 0x4D	; 77
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	60 81       	ld	r22, Z
    273e:	71 81       	ldd	r23, Z+1	; 0x01
    2740:	82 81       	ldd	r24, Z+2	; 0x02
    2742:	93 81       	ldd	r25, Z+3	; 0x03
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	4a ef       	ldi	r20, 0xFA	; 250
    274a:	54 e4       	ldi	r21, 0x44	; 68
    274c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	f8 01       	movw	r30, r16
    2756:	80 83       	st	Z, r24
    2758:	91 83       	std	Z+1, r25	; 0x01
    275a:	a2 83       	std	Z+2, r26	; 0x02
    275c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    275e:	fe 01       	movw	r30, r28
    2760:	e1 55       	subi	r30, 0x51	; 81
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	60 81       	ld	r22, Z
    2766:	71 81       	ldd	r23, Z+1	; 0x01
    2768:	82 81       	ldd	r24, Z+2	; 0x02
    276a:	93 81       	ldd	r25, Z+3	; 0x03
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	40 e8       	ldi	r20, 0x80	; 128
    2772:	5f e3       	ldi	r21, 0x3F	; 63
    2774:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2778:	88 23       	and	r24, r24
    277a:	44 f4       	brge	.+16     	; 0x278c <start+0x52e>
		__ticks = 1;
    277c:	fe 01       	movw	r30, r28
    277e:	e3 55       	subi	r30, 0x53	; 83
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	91 83       	std	Z+1, r25	; 0x01
    2788:	80 83       	st	Z, r24
    278a:	64 c0       	rjmp	.+200    	; 0x2854 <start+0x5f6>
	else if (__tmp > 65535)
    278c:	fe 01       	movw	r30, r28
    278e:	e1 55       	subi	r30, 0x51	; 81
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	60 81       	ld	r22, Z
    2794:	71 81       	ldd	r23, Z+1	; 0x01
    2796:	82 81       	ldd	r24, Z+2	; 0x02
    2798:	93 81       	ldd	r25, Z+3	; 0x03
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	3f ef       	ldi	r19, 0xFF	; 255
    279e:	4f e7       	ldi	r20, 0x7F	; 127
    27a0:	57 e4       	ldi	r21, 0x47	; 71
    27a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27a6:	18 16       	cp	r1, r24
    27a8:	0c f0       	brlt	.+2      	; 0x27ac <start+0x54e>
    27aa:	43 c0       	rjmp	.+134    	; 0x2832 <start+0x5d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ac:	fe 01       	movw	r30, r28
    27ae:	ed 54       	subi	r30, 0x4D	; 77
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	60 81       	ld	r22, Z
    27b4:	71 81       	ldd	r23, Z+1	; 0x01
    27b6:	82 81       	ldd	r24, Z+2	; 0x02
    27b8:	93 81       	ldd	r25, Z+3	; 0x03
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e2       	ldi	r20, 0x20	; 32
    27c0:	51 e4       	ldi	r21, 0x41	; 65
    27c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	8e 01       	movw	r16, r28
    27cc:	03 55       	subi	r16, 0x53	; 83
    27ce:	1f 4f       	sbci	r17, 0xFF	; 255
    27d0:	bc 01       	movw	r22, r24
    27d2:	cd 01       	movw	r24, r26
    27d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	f8 01       	movw	r30, r16
    27de:	91 83       	std	Z+1, r25	; 0x01
    27e0:	80 83       	st	Z, r24
    27e2:	1f c0       	rjmp	.+62     	; 0x2822 <start+0x5c4>
    27e4:	fe 01       	movw	r30, r28
    27e6:	e5 55       	subi	r30, 0x55	; 85
    27e8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ea:	88 ec       	ldi	r24, 0xC8	; 200
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	91 83       	std	Z+1, r25	; 0x01
    27f0:	80 83       	st	Z, r24
    27f2:	fe 01       	movw	r30, r28
    27f4:	e5 55       	subi	r30, 0x55	; 85
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	80 81       	ld	r24, Z
    27fa:	91 81       	ldd	r25, Z+1	; 0x01
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	f1 f7       	brne	.-4      	; 0x27fc <start+0x59e>
    2800:	fe 01       	movw	r30, r28
    2802:	e5 55       	subi	r30, 0x55	; 85
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	91 83       	std	Z+1, r25	; 0x01
    2808:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280a:	de 01       	movw	r26, r28
    280c:	a3 55       	subi	r26, 0x53	; 83
    280e:	bf 4f       	sbci	r27, 0xFF	; 255
    2810:	fe 01       	movw	r30, r28
    2812:	e3 55       	subi	r30, 0x53	; 83
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	80 81       	ld	r24, Z
    2818:	91 81       	ldd	r25, Z+1	; 0x01
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	11 96       	adiw	r26, 0x01	; 1
    281e:	9c 93       	st	X, r25
    2820:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2822:	fe 01       	movw	r30, r28
    2824:	e3 55       	subi	r30, 0x53	; 83
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	80 81       	ld	r24, Z
    282a:	91 81       	ldd	r25, Z+1	; 0x01
    282c:	00 97       	sbiw	r24, 0x00	; 0
    282e:	d1 f6       	brne	.-76     	; 0x27e4 <start+0x586>
    2830:	28 c0       	rjmp	.+80     	; 0x2882 <start+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2832:	8e 01       	movw	r16, r28
    2834:	03 55       	subi	r16, 0x53	; 83
    2836:	1f 4f       	sbci	r17, 0xFF	; 255
    2838:	fe 01       	movw	r30, r28
    283a:	e1 55       	subi	r30, 0x51	; 81
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	60 81       	ld	r22, Z
    2840:	71 81       	ldd	r23, Z+1	; 0x01
    2842:	82 81       	ldd	r24, Z+2	; 0x02
    2844:	93 81       	ldd	r25, Z+3	; 0x03
    2846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	f8 01       	movw	r30, r16
    2850:	91 83       	std	Z+1, r25	; 0x01
    2852:	80 83       	st	Z, r24
    2854:	de 01       	movw	r26, r28
    2856:	a7 55       	subi	r26, 0x57	; 87
    2858:	bf 4f       	sbci	r27, 0xFF	; 255
    285a:	fe 01       	movw	r30, r28
    285c:	e3 55       	subi	r30, 0x53	; 83
    285e:	ff 4f       	sbci	r31, 0xFF	; 255
    2860:	80 81       	ld	r24, Z
    2862:	91 81       	ldd	r25, Z+1	; 0x01
    2864:	11 96       	adiw	r26, 0x01	; 1
    2866:	9c 93       	st	X, r25
    2868:	8e 93       	st	-X, r24
    286a:	fe 01       	movw	r30, r28
    286c:	e7 55       	subi	r30, 0x57	; 87
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	80 81       	ld	r24, Z
    2872:	91 81       	ldd	r25, Z+1	; 0x01
    2874:	01 97       	sbiw	r24, 0x01	; 1
    2876:	f1 f7       	brne	.-4      	; 0x2874 <start+0x616>
    2878:	fe 01       	movw	r30, r28
    287a:	e7 55       	subi	r30, 0x57	; 87
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	91 83       	std	Z+1, r25	; 0x01
    2880:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);

		if(passwordVerified)
    2882:	fe 01       	movw	r30, r28
    2884:	ec 51       	subi	r30, 0x1C	; 28
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	80 81       	ld	r24, Z
    288a:	88 23       	and	r24, r24
    288c:	39 f0       	breq	.+14     	; 0x289c <start+0x63e>
		{
			LCD_clearScreen();
    288e:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_clearScreen>
			LCD_displayString("Right Password");
    2892:	8c e7       	ldi	r24, 0x7C	; 124
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <LCD_displayString>
    289a:	06 c0       	rjmp	.+12     	; 0x28a8 <start+0x64a>
		}

		else
		{
			LCD_clearScreen();
    289c:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_clearScreen>
			LCD_displayString("Wrong Password");
    28a0:	8b e8       	ldi	r24, 0x8B	; 139
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <LCD_displayString>
    28a8:	fe 01       	movw	r30, r28
    28aa:	eb 55       	subi	r30, 0x5B	; 91
    28ac:	ff 4f       	sbci	r31, 0xFF	; 255
    28ae:	80 e0       	ldi	r24, 0x00	; 0
    28b0:	90 e8       	ldi	r25, 0x80	; 128
    28b2:	ab e3       	ldi	r26, 0x3B	; 59
    28b4:	b5 e4       	ldi	r27, 0x45	; 69
    28b6:	80 83       	st	Z, r24
    28b8:	91 83       	std	Z+1, r25	; 0x01
    28ba:	a2 83       	std	Z+2, r26	; 0x02
    28bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28be:	8e 01       	movw	r16, r28
    28c0:	0f 55       	subi	r16, 0x5F	; 95
    28c2:	1f 4f       	sbci	r17, 0xFF	; 255
    28c4:	fe 01       	movw	r30, r28
    28c6:	eb 55       	subi	r30, 0x5B	; 91
    28c8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ca:	60 81       	ld	r22, Z
    28cc:	71 81       	ldd	r23, Z+1	; 0x01
    28ce:	82 81       	ldd	r24, Z+2	; 0x02
    28d0:	93 81       	ldd	r25, Z+3	; 0x03
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	4a ef       	ldi	r20, 0xFA	; 250
    28d8:	54 e4       	ldi	r21, 0x44	; 68
    28da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	f8 01       	movw	r30, r16
    28e4:	80 83       	st	Z, r24
    28e6:	91 83       	std	Z+1, r25	; 0x01
    28e8:	a2 83       	std	Z+2, r26	; 0x02
    28ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28ec:	fe 01       	movw	r30, r28
    28ee:	ef 55       	subi	r30, 0x5F	; 95
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	60 81       	ld	r22, Z
    28f4:	71 81       	ldd	r23, Z+1	; 0x01
    28f6:	82 81       	ldd	r24, Z+2	; 0x02
    28f8:	93 81       	ldd	r25, Z+3	; 0x03
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	40 e8       	ldi	r20, 0x80	; 128
    2900:	5f e3       	ldi	r21, 0x3F	; 63
    2902:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2906:	88 23       	and	r24, r24
    2908:	44 f4       	brge	.+16     	; 0x291a <start+0x6bc>
		__ticks = 1;
    290a:	fe 01       	movw	r30, r28
    290c:	e1 56       	subi	r30, 0x61	; 97
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	91 83       	std	Z+1, r25	; 0x01
    2916:	80 83       	st	Z, r24
    2918:	64 c0       	rjmp	.+200    	; 0x29e2 <start+0x784>
	else if (__tmp > 65535)
    291a:	fe 01       	movw	r30, r28
    291c:	ef 55       	subi	r30, 0x5F	; 95
    291e:	ff 4f       	sbci	r31, 0xFF	; 255
    2920:	60 81       	ld	r22, Z
    2922:	71 81       	ldd	r23, Z+1	; 0x01
    2924:	82 81       	ldd	r24, Z+2	; 0x02
    2926:	93 81       	ldd	r25, Z+3	; 0x03
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	3f ef       	ldi	r19, 0xFF	; 255
    292c:	4f e7       	ldi	r20, 0x7F	; 127
    292e:	57 e4       	ldi	r21, 0x47	; 71
    2930:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2934:	18 16       	cp	r1, r24
    2936:	0c f0       	brlt	.+2      	; 0x293a <start+0x6dc>
    2938:	43 c0       	rjmp	.+134    	; 0x29c0 <start+0x762>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    293a:	fe 01       	movw	r30, r28
    293c:	eb 55       	subi	r30, 0x5B	; 91
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	60 81       	ld	r22, Z
    2942:	71 81       	ldd	r23, Z+1	; 0x01
    2944:	82 81       	ldd	r24, Z+2	; 0x02
    2946:	93 81       	ldd	r25, Z+3	; 0x03
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	40 e2       	ldi	r20, 0x20	; 32
    294e:	51 e4       	ldi	r21, 0x41	; 65
    2950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2954:	dc 01       	movw	r26, r24
    2956:	cb 01       	movw	r24, r22
    2958:	8e 01       	movw	r16, r28
    295a:	01 56       	subi	r16, 0x61	; 97
    295c:	1f 4f       	sbci	r17, 0xFF	; 255
    295e:	bc 01       	movw	r22, r24
    2960:	cd 01       	movw	r24, r26
    2962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	f8 01       	movw	r30, r16
    296c:	91 83       	std	Z+1, r25	; 0x01
    296e:	80 83       	st	Z, r24
    2970:	1f c0       	rjmp	.+62     	; 0x29b0 <start+0x752>
    2972:	fe 01       	movw	r30, r28
    2974:	e3 56       	subi	r30, 0x63	; 99
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	88 ec       	ldi	r24, 0xC8	; 200
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	91 83       	std	Z+1, r25	; 0x01
    297e:	80 83       	st	Z, r24
    2980:	fe 01       	movw	r30, r28
    2982:	e3 56       	subi	r30, 0x63	; 99
    2984:	ff 4f       	sbci	r31, 0xFF	; 255
    2986:	80 81       	ld	r24, Z
    2988:	91 81       	ldd	r25, Z+1	; 0x01
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	f1 f7       	brne	.-4      	; 0x298a <start+0x72c>
    298e:	fe 01       	movw	r30, r28
    2990:	e3 56       	subi	r30, 0x63	; 99
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	91 83       	std	Z+1, r25	; 0x01
    2996:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2998:	de 01       	movw	r26, r28
    299a:	a1 56       	subi	r26, 0x61	; 97
    299c:	bf 4f       	sbci	r27, 0xFF	; 255
    299e:	fe 01       	movw	r30, r28
    29a0:	e1 56       	subi	r30, 0x61	; 97
    29a2:	ff 4f       	sbci	r31, 0xFF	; 255
    29a4:	80 81       	ld	r24, Z
    29a6:	91 81       	ldd	r25, Z+1	; 0x01
    29a8:	01 97       	sbiw	r24, 0x01	; 1
    29aa:	11 96       	adiw	r26, 0x01	; 1
    29ac:	9c 93       	st	X, r25
    29ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b0:	fe 01       	movw	r30, r28
    29b2:	e1 56       	subi	r30, 0x61	; 97
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	80 81       	ld	r24, Z
    29b8:	91 81       	ldd	r25, Z+1	; 0x01
    29ba:	00 97       	sbiw	r24, 0x00	; 0
    29bc:	d1 f6       	brne	.-76     	; 0x2972 <start+0x714>
    29be:	28 c0       	rjmp	.+80     	; 0x2a10 <start+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c0:	8e 01       	movw	r16, r28
    29c2:	01 56       	subi	r16, 0x61	; 97
    29c4:	1f 4f       	sbci	r17, 0xFF	; 255
    29c6:	fe 01       	movw	r30, r28
    29c8:	ef 55       	subi	r30, 0x5F	; 95
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	60 81       	ld	r22, Z
    29ce:	71 81       	ldd	r23, Z+1	; 0x01
    29d0:	82 81       	ldd	r24, Z+2	; 0x02
    29d2:	93 81       	ldd	r25, Z+3	; 0x03
    29d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	f8 01       	movw	r30, r16
    29de:	91 83       	std	Z+1, r25	; 0x01
    29e0:	80 83       	st	Z, r24
    29e2:	de 01       	movw	r26, r28
    29e4:	a5 56       	subi	r26, 0x65	; 101
    29e6:	bf 4f       	sbci	r27, 0xFF	; 255
    29e8:	fe 01       	movw	r30, r28
    29ea:	e1 56       	subi	r30, 0x61	; 97
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	80 81       	ld	r24, Z
    29f0:	91 81       	ldd	r25, Z+1	; 0x01
    29f2:	11 96       	adiw	r26, 0x01	; 1
    29f4:	9c 93       	st	X, r25
    29f6:	8e 93       	st	-X, r24
    29f8:	fe 01       	movw	r30, r28
    29fa:	e5 56       	subi	r30, 0x65	; 101
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	80 81       	ld	r24, Z
    2a00:	91 81       	ldd	r25, Z+1	; 0x01
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	f1 f7       	brne	.-4      	; 0x2a02 <start+0x7a4>
    2a06:	fe 01       	movw	r30, r28
    2a08:	e5 56       	subi	r30, 0x65	; 101
    2a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0c:	91 83       	std	Z+1, r25	; 0x01
    2a0e:	80 83       	st	Z, r24

	uint8 password[5] , confirmPassword[5] , passwordVerified , command ;

	Timer1_setCallBack(timerHandler);

	while(passwordVerified == 0)
    2a10:	fe 01       	movw	r30, r28
    2a12:	ec 51       	subi	r30, 0x1C	; 28
    2a14:	ff 4f       	sbci	r31, 0xFF	; 255
    2a16:	80 81       	ld	r24, Z
    2a18:	88 23       	and	r24, r24
    2a1a:	09 f4       	brne	.+2      	; 0x2a1e <start+0x7c0>
    2a1c:	3f cc       	rjmp	.-1922   	; 0x229c <start+0x3e>

	}

	while(1)
	{
		optionsDisplay();
    2a1e:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <optionsDisplay>
		command = KEYPAD_getPressedKey();
    2a22:	0e 94 37 10 	call	0x206e	; 0x206e <KEYPAD_getPressedKey>
    2a26:	fe 01       	movw	r30, r28
    2a28:	ed 51       	subi	r30, 0x1D	; 29
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	80 83       	st	Z, r24
    2a2e:	fe 01       	movw	r30, r28
    2a30:	e9 56       	subi	r30, 0x69	; 105
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	aa ef       	ldi	r26, 0xFA	; 250
    2a3a:	b3 e4       	ldi	r27, 0x43	; 67
    2a3c:	80 83       	st	Z, r24
    2a3e:	91 83       	std	Z+1, r25	; 0x01
    2a40:	a2 83       	std	Z+2, r26	; 0x02
    2a42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a44:	8e 01       	movw	r16, r28
    2a46:	0d 56       	subi	r16, 0x6D	; 109
    2a48:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	e9 56       	subi	r30, 0x69	; 105
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	60 81       	ld	r22, Z
    2a52:	71 81       	ldd	r23, Z+1	; 0x01
    2a54:	82 81       	ldd	r24, Z+2	; 0x02
    2a56:	93 81       	ldd	r25, Z+3	; 0x03
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	4a ef       	ldi	r20, 0xFA	; 250
    2a5e:	54 e4       	ldi	r21, 0x44	; 68
    2a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	f8 01       	movw	r30, r16
    2a6a:	80 83       	st	Z, r24
    2a6c:	91 83       	std	Z+1, r25	; 0x01
    2a6e:	a2 83       	std	Z+2, r26	; 0x02
    2a70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a72:	fe 01       	movw	r30, r28
    2a74:	ed 56       	subi	r30, 0x6D	; 109
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	60 81       	ld	r22, Z
    2a7a:	71 81       	ldd	r23, Z+1	; 0x01
    2a7c:	82 81       	ldd	r24, Z+2	; 0x02
    2a7e:	93 81       	ldd	r25, Z+3	; 0x03
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	40 e8       	ldi	r20, 0x80	; 128
    2a86:	5f e3       	ldi	r21, 0x3F	; 63
    2a88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a8c:	88 23       	and	r24, r24
    2a8e:	44 f4       	brge	.+16     	; 0x2aa0 <start+0x842>
		__ticks = 1;
    2a90:	fe 01       	movw	r30, r28
    2a92:	ef 56       	subi	r30, 0x6F	; 111
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	91 83       	std	Z+1, r25	; 0x01
    2a9c:	80 83       	st	Z, r24
    2a9e:	64 c0       	rjmp	.+200    	; 0x2b68 <start+0x90a>
	else if (__tmp > 65535)
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	ed 56       	subi	r30, 0x6D	; 109
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	60 81       	ld	r22, Z
    2aa8:	71 81       	ldd	r23, Z+1	; 0x01
    2aaa:	82 81       	ldd	r24, Z+2	; 0x02
    2aac:	93 81       	ldd	r25, Z+3	; 0x03
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	3f ef       	ldi	r19, 0xFF	; 255
    2ab2:	4f e7       	ldi	r20, 0x7F	; 127
    2ab4:	57 e4       	ldi	r21, 0x47	; 71
    2ab6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aba:	18 16       	cp	r1, r24
    2abc:	0c f0       	brlt	.+2      	; 0x2ac0 <start+0x862>
    2abe:	43 c0       	rjmp	.+134    	; 0x2b46 <start+0x8e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	e9 56       	subi	r30, 0x69	; 105
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	60 81       	ld	r22, Z
    2ac8:	71 81       	ldd	r23, Z+1	; 0x01
    2aca:	82 81       	ldd	r24, Z+2	; 0x02
    2acc:	93 81       	ldd	r25, Z+3	; 0x03
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	40 e2       	ldi	r20, 0x20	; 32
    2ad4:	51 e4       	ldi	r21, 0x41	; 65
    2ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	8e 01       	movw	r16, r28
    2ae0:	0f 56       	subi	r16, 0x6F	; 111
    2ae2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae4:	bc 01       	movw	r22, r24
    2ae6:	cd 01       	movw	r24, r26
    2ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	f8 01       	movw	r30, r16
    2af2:	91 83       	std	Z+1, r25	; 0x01
    2af4:	80 83       	st	Z, r24
    2af6:	1f c0       	rjmp	.+62     	; 0x2b36 <start+0x8d8>
    2af8:	fe 01       	movw	r30, r28
    2afa:	e1 57       	subi	r30, 0x71	; 113
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	88 ec       	ldi	r24, 0xC8	; 200
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	91 83       	std	Z+1, r25	; 0x01
    2b04:	80 83       	st	Z, r24
    2b06:	fe 01       	movw	r30, r28
    2b08:	e1 57       	subi	r30, 0x71	; 113
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	80 81       	ld	r24, Z
    2b0e:	91 81       	ldd	r25, Z+1	; 0x01
    2b10:	01 97       	sbiw	r24, 0x01	; 1
    2b12:	f1 f7       	brne	.-4      	; 0x2b10 <start+0x8b2>
    2b14:	fe 01       	movw	r30, r28
    2b16:	e1 57       	subi	r30, 0x71	; 113
    2b18:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1a:	91 83       	std	Z+1, r25	; 0x01
    2b1c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b1e:	de 01       	movw	r26, r28
    2b20:	af 56       	subi	r26, 0x6F	; 111
    2b22:	bf 4f       	sbci	r27, 0xFF	; 255
    2b24:	fe 01       	movw	r30, r28
    2b26:	ef 56       	subi	r30, 0x6F	; 111
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	80 81       	ld	r24, Z
    2b2c:	91 81       	ldd	r25, Z+1	; 0x01
    2b2e:	01 97       	sbiw	r24, 0x01	; 1
    2b30:	11 96       	adiw	r26, 0x01	; 1
    2b32:	9c 93       	st	X, r25
    2b34:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b36:	fe 01       	movw	r30, r28
    2b38:	ef 56       	subi	r30, 0x6F	; 111
    2b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3c:	80 81       	ld	r24, Z
    2b3e:	91 81       	ldd	r25, Z+1	; 0x01
    2b40:	00 97       	sbiw	r24, 0x00	; 0
    2b42:	d1 f6       	brne	.-76     	; 0x2af8 <start+0x89a>
    2b44:	27 c0       	rjmp	.+78     	; 0x2b94 <start+0x936>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b46:	8e 01       	movw	r16, r28
    2b48:	0f 56       	subi	r16, 0x6F	; 111
    2b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	ed 56       	subi	r30, 0x6D	; 109
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	60 81       	ld	r22, Z
    2b54:	71 81       	ldd	r23, Z+1	; 0x01
    2b56:	82 81       	ldd	r24, Z+2	; 0x02
    2b58:	93 81       	ldd	r25, Z+3	; 0x03
    2b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	f8 01       	movw	r30, r16
    2b64:	91 83       	std	Z+1, r25	; 0x01
    2b66:	80 83       	st	Z, r24
    2b68:	de 01       	movw	r26, r28
    2b6a:	a3 57       	subi	r26, 0x73	; 115
    2b6c:	bf 4f       	sbci	r27, 0xFF	; 255
    2b6e:	fe 01       	movw	r30, r28
    2b70:	ef 56       	subi	r30, 0x6F	; 111
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	80 81       	ld	r24, Z
    2b76:	91 81       	ldd	r25, Z+1	; 0x01
    2b78:	8d 93       	st	X+, r24
    2b7a:	9c 93       	st	X, r25
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	e3 57       	subi	r30, 0x73	; 115
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	80 81       	ld	r24, Z
    2b84:	91 81       	ldd	r25, Z+1	; 0x01
    2b86:	01 97       	sbiw	r24, 0x01	; 1
    2b88:	f1 f7       	brne	.-4      	; 0x2b86 <start+0x928>
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	e3 57       	subi	r30, 0x73	; 115
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	91 83       	std	Z+1, r25	; 0x01
    2b92:	80 83       	st	Z, r24
		_delay_ms(KEYPAD_DELAY);
		UART_sendByte(command);
    2b94:	fe 01       	movw	r30, r28
    2b96:	ed 51       	subi	r30, 0x1D	; 29
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	80 81       	ld	r24, Z
    2b9c:	0e 94 26 06 	call	0xc4c	; 0xc4c <UART_sendByte>
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	e7 57       	subi	r30, 0x77	; 119
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	a8 e4       	ldi	r26, 0x48	; 72
    2bac:	b2 e4       	ldi	r27, 0x42	; 66
    2bae:	80 83       	st	Z, r24
    2bb0:	91 83       	std	Z+1, r25	; 0x01
    2bb2:	a2 83       	std	Z+2, r26	; 0x02
    2bb4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bb6:	8e 01       	movw	r16, r28
    2bb8:	0b 57       	subi	r16, 0x7B	; 123
    2bba:	1f 4f       	sbci	r17, 0xFF	; 255
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	e7 57       	subi	r30, 0x77	; 119
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	60 81       	ld	r22, Z
    2bc4:	71 81       	ldd	r23, Z+1	; 0x01
    2bc6:	82 81       	ldd	r24, Z+2	; 0x02
    2bc8:	93 81       	ldd	r25, Z+3	; 0x03
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	4a ef       	ldi	r20, 0xFA	; 250
    2bd0:	54 e4       	ldi	r21, 0x44	; 68
    2bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	f8 01       	movw	r30, r16
    2bdc:	80 83       	st	Z, r24
    2bde:	91 83       	std	Z+1, r25	; 0x01
    2be0:	a2 83       	std	Z+2, r26	; 0x02
    2be2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2be4:	fe 01       	movw	r30, r28
    2be6:	eb 57       	subi	r30, 0x7B	; 123
    2be8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bea:	60 81       	ld	r22, Z
    2bec:	71 81       	ldd	r23, Z+1	; 0x01
    2bee:	82 81       	ldd	r24, Z+2	; 0x02
    2bf0:	93 81       	ldd	r25, Z+3	; 0x03
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e8       	ldi	r20, 0x80	; 128
    2bf8:	5f e3       	ldi	r21, 0x3F	; 63
    2bfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bfe:	88 23       	and	r24, r24
    2c00:	44 f4       	brge	.+16     	; 0x2c12 <start+0x9b4>
		__ticks = 1;
    2c02:	fe 01       	movw	r30, r28
    2c04:	ed 57       	subi	r30, 0x7D	; 125
    2c06:	ff 4f       	sbci	r31, 0xFF	; 255
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	91 83       	std	Z+1, r25	; 0x01
    2c0e:	80 83       	st	Z, r24
    2c10:	64 c0       	rjmp	.+200    	; 0x2cda <start+0xa7c>
	else if (__tmp > 65535)
    2c12:	fe 01       	movw	r30, r28
    2c14:	eb 57       	subi	r30, 0x7B	; 123
    2c16:	ff 4f       	sbci	r31, 0xFF	; 255
    2c18:	60 81       	ld	r22, Z
    2c1a:	71 81       	ldd	r23, Z+1	; 0x01
    2c1c:	82 81       	ldd	r24, Z+2	; 0x02
    2c1e:	93 81       	ldd	r25, Z+3	; 0x03
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	3f ef       	ldi	r19, 0xFF	; 255
    2c24:	4f e7       	ldi	r20, 0x7F	; 127
    2c26:	57 e4       	ldi	r21, 0x47	; 71
    2c28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c2c:	18 16       	cp	r1, r24
    2c2e:	0c f0       	brlt	.+2      	; 0x2c32 <start+0x9d4>
    2c30:	43 c0       	rjmp	.+134    	; 0x2cb8 <start+0xa5a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c32:	fe 01       	movw	r30, r28
    2c34:	e7 57       	subi	r30, 0x77	; 119
    2c36:	ff 4f       	sbci	r31, 0xFF	; 255
    2c38:	60 81       	ld	r22, Z
    2c3a:	71 81       	ldd	r23, Z+1	; 0x01
    2c3c:	82 81       	ldd	r24, Z+2	; 0x02
    2c3e:	93 81       	ldd	r25, Z+3	; 0x03
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	40 e2       	ldi	r20, 0x20	; 32
    2c46:	51 e4       	ldi	r21, 0x41	; 65
    2c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	cb 01       	movw	r24, r22
    2c50:	8e 01       	movw	r16, r28
    2c52:	0d 57       	subi	r16, 0x7D	; 125
    2c54:	1f 4f       	sbci	r17, 0xFF	; 255
    2c56:	bc 01       	movw	r22, r24
    2c58:	cd 01       	movw	r24, r26
    2c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	f8 01       	movw	r30, r16
    2c64:	91 83       	std	Z+1, r25	; 0x01
    2c66:	80 83       	st	Z, r24
    2c68:	1f c0       	rjmp	.+62     	; 0x2ca8 <start+0xa4a>
    2c6a:	fe 01       	movw	r30, r28
    2c6c:	ef 57       	subi	r30, 0x7F	; 127
    2c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c70:	88 ec       	ldi	r24, 0xC8	; 200
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	91 83       	std	Z+1, r25	; 0x01
    2c76:	80 83       	st	Z, r24
    2c78:	fe 01       	movw	r30, r28
    2c7a:	ef 57       	subi	r30, 0x7F	; 127
    2c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7e:	80 81       	ld	r24, Z
    2c80:	91 81       	ldd	r25, Z+1	; 0x01
    2c82:	01 97       	sbiw	r24, 0x01	; 1
    2c84:	f1 f7       	brne	.-4      	; 0x2c82 <start+0xa24>
    2c86:	fe 01       	movw	r30, r28
    2c88:	ef 57       	subi	r30, 0x7F	; 127
    2c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8c:	91 83       	std	Z+1, r25	; 0x01
    2c8e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c90:	de 01       	movw	r26, r28
    2c92:	ad 57       	subi	r26, 0x7D	; 125
    2c94:	bf 4f       	sbci	r27, 0xFF	; 255
    2c96:	fe 01       	movw	r30, r28
    2c98:	ed 57       	subi	r30, 0x7D	; 125
    2c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9c:	80 81       	ld	r24, Z
    2c9e:	91 81       	ldd	r25, Z+1	; 0x01
    2ca0:	01 97       	sbiw	r24, 0x01	; 1
    2ca2:	11 96       	adiw	r26, 0x01	; 1
    2ca4:	9c 93       	st	X, r25
    2ca6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca8:	fe 01       	movw	r30, r28
    2caa:	ed 57       	subi	r30, 0x7D	; 125
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	80 81       	ld	r24, Z
    2cb0:	91 81       	ldd	r25, Z+1	; 0x01
    2cb2:	00 97       	sbiw	r24, 0x00	; 0
    2cb4:	d1 f6       	brne	.-76     	; 0x2c6a <start+0xa0c>
    2cb6:	28 c0       	rjmp	.+80     	; 0x2d08 <start+0xaaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb8:	8e 01       	movw	r16, r28
    2cba:	0d 57       	subi	r16, 0x7D	; 125
    2cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	eb 57       	subi	r30, 0x7B	; 123
    2cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc4:	60 81       	ld	r22, Z
    2cc6:	71 81       	ldd	r23, Z+1	; 0x01
    2cc8:	82 81       	ldd	r24, Z+2	; 0x02
    2cca:	93 81       	ldd	r25, Z+3	; 0x03
    2ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	f8 01       	movw	r30, r16
    2cd6:	91 83       	std	Z+1, r25	; 0x01
    2cd8:	80 83       	st	Z, r24
    2cda:	de 01       	movw	r26, r28
    2cdc:	a1 58       	subi	r26, 0x81	; 129
    2cde:	bf 4f       	sbci	r27, 0xFF	; 255
    2ce0:	fe 01       	movw	r30, r28
    2ce2:	ed 57       	subi	r30, 0x7D	; 125
    2ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce6:	80 81       	ld	r24, Z
    2ce8:	91 81       	ldd	r25, Z+1	; 0x01
    2cea:	11 96       	adiw	r26, 0x01	; 1
    2cec:	9c 93       	st	X, r25
    2cee:	8e 93       	st	-X, r24
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	e1 58       	subi	r30, 0x81	; 129
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	80 81       	ld	r24, Z
    2cf8:	91 81       	ldd	r25, Z+1	; 0x01
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	f1 f7       	brne	.-4      	; 0x2cfa <start+0xa9c>
    2cfe:	fe 01       	movw	r30, r28
    2d00:	e1 58       	subi	r30, 0x81	; 129
    2d02:	ff 4f       	sbci	r31, 0xFF	; 255
    2d04:	91 83       	std	Z+1, r25	; 0x01
    2d06:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);
		if(command == '+')
    2d08:	fe 01       	movw	r30, r28
    2d0a:	ed 51       	subi	r30, 0x1D	; 29
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	80 81       	ld	r24, Z
    2d10:	8b 32       	cpi	r24, 0x2B	; 43
    2d12:	09 f0       	breq	.+2      	; 0x2d16 <start+0xab8>
    2d14:	a0 c1       	rjmp	.+832    	; 0x3056 <start+0xdf8>
		{
			LCD_clearScreen();
    2d16:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_clearScreen>
			LCD_displayString("Plz enter pass");
    2d1a:	80 e6       	ldi	r24, 0x60	; 96
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <LCD_displayString>
			enterPassword(password);
    2d22:	ce 01       	movw	r24, r28
    2d24:	8b 51       	subi	r24, 0x1B	; 27
    2d26:	9f 4f       	sbci	r25, 0xFF	; 255
    2d28:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <enterPassword>
    2d2c:	fe 01       	movw	r30, r28
    2d2e:	e5 58       	subi	r30, 0x85	; 133
    2d30:	ff 4f       	sbci	r31, 0xFF	; 255
    2d32:	80 e0       	ldi	r24, 0x00	; 0
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	a8 e4       	ldi	r26, 0x48	; 72
    2d38:	b2 e4       	ldi	r27, 0x42	; 66
    2d3a:	80 83       	st	Z, r24
    2d3c:	91 83       	std	Z+1, r25	; 0x01
    2d3e:	a2 83       	std	Z+2, r26	; 0x02
    2d40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d42:	8e 01       	movw	r16, r28
    2d44:	09 58       	subi	r16, 0x89	; 137
    2d46:	1f 4f       	sbci	r17, 0xFF	; 255
    2d48:	fe 01       	movw	r30, r28
    2d4a:	e5 58       	subi	r30, 0x85	; 133
    2d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4e:	60 81       	ld	r22, Z
    2d50:	71 81       	ldd	r23, Z+1	; 0x01
    2d52:	82 81       	ldd	r24, Z+2	; 0x02
    2d54:	93 81       	ldd	r25, Z+3	; 0x03
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	4a ef       	ldi	r20, 0xFA	; 250
    2d5c:	54 e4       	ldi	r21, 0x44	; 68
    2d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	f8 01       	movw	r30, r16
    2d68:	80 83       	st	Z, r24
    2d6a:	91 83       	std	Z+1, r25	; 0x01
    2d6c:	a2 83       	std	Z+2, r26	; 0x02
    2d6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d70:	fe 01       	movw	r30, r28
    2d72:	e9 58       	subi	r30, 0x89	; 137
    2d74:	ff 4f       	sbci	r31, 0xFF	; 255
    2d76:	60 81       	ld	r22, Z
    2d78:	71 81       	ldd	r23, Z+1	; 0x01
    2d7a:	82 81       	ldd	r24, Z+2	; 0x02
    2d7c:	93 81       	ldd	r25, Z+3	; 0x03
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	40 e8       	ldi	r20, 0x80	; 128
    2d84:	5f e3       	ldi	r21, 0x3F	; 63
    2d86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d8a:	88 23       	and	r24, r24
    2d8c:	44 f4       	brge	.+16     	; 0x2d9e <start+0xb40>
		__ticks = 1;
    2d8e:	fe 01       	movw	r30, r28
    2d90:	eb 58       	subi	r30, 0x8B	; 139
    2d92:	ff 4f       	sbci	r31, 0xFF	; 255
    2d94:	81 e0       	ldi	r24, 0x01	; 1
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	91 83       	std	Z+1, r25	; 0x01
    2d9a:	80 83       	st	Z, r24
    2d9c:	64 c0       	rjmp	.+200    	; 0x2e66 <start+0xc08>
	else if (__tmp > 65535)
    2d9e:	fe 01       	movw	r30, r28
    2da0:	e9 58       	subi	r30, 0x89	; 137
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	60 81       	ld	r22, Z
    2da6:	71 81       	ldd	r23, Z+1	; 0x01
    2da8:	82 81       	ldd	r24, Z+2	; 0x02
    2daa:	93 81       	ldd	r25, Z+3	; 0x03
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	3f ef       	ldi	r19, 0xFF	; 255
    2db0:	4f e7       	ldi	r20, 0x7F	; 127
    2db2:	57 e4       	ldi	r21, 0x47	; 71
    2db4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2db8:	18 16       	cp	r1, r24
    2dba:	0c f0       	brlt	.+2      	; 0x2dbe <start+0xb60>
    2dbc:	43 c0       	rjmp	.+134    	; 0x2e44 <start+0xbe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	e5 58       	subi	r30, 0x85	; 133
    2dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc4:	60 81       	ld	r22, Z
    2dc6:	71 81       	ldd	r23, Z+1	; 0x01
    2dc8:	82 81       	ldd	r24, Z+2	; 0x02
    2dca:	93 81       	ldd	r25, Z+3	; 0x03
    2dcc:	20 e0       	ldi	r18, 0x00	; 0
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	40 e2       	ldi	r20, 0x20	; 32
    2dd2:	51 e4       	ldi	r21, 0x41	; 65
    2dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	8e 01       	movw	r16, r28
    2dde:	0b 58       	subi	r16, 0x8B	; 139
    2de0:	1f 4f       	sbci	r17, 0xFF	; 255
    2de2:	bc 01       	movw	r22, r24
    2de4:	cd 01       	movw	r24, r26
    2de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dea:	dc 01       	movw	r26, r24
    2dec:	cb 01       	movw	r24, r22
    2dee:	f8 01       	movw	r30, r16
    2df0:	91 83       	std	Z+1, r25	; 0x01
    2df2:	80 83       	st	Z, r24
    2df4:	1f c0       	rjmp	.+62     	; 0x2e34 <start+0xbd6>
    2df6:	fe 01       	movw	r30, r28
    2df8:	ed 58       	subi	r30, 0x8D	; 141
    2dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfc:	88 ec       	ldi	r24, 0xC8	; 200
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	91 83       	std	Z+1, r25	; 0x01
    2e02:	80 83       	st	Z, r24
    2e04:	fe 01       	movw	r30, r28
    2e06:	ed 58       	subi	r30, 0x8D	; 141
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	80 81       	ld	r24, Z
    2e0c:	91 81       	ldd	r25, Z+1	; 0x01
    2e0e:	01 97       	sbiw	r24, 0x01	; 1
    2e10:	f1 f7       	brne	.-4      	; 0x2e0e <start+0xbb0>
    2e12:	fe 01       	movw	r30, r28
    2e14:	ed 58       	subi	r30, 0x8D	; 141
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	91 83       	std	Z+1, r25	; 0x01
    2e1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e1c:	de 01       	movw	r26, r28
    2e1e:	ab 58       	subi	r26, 0x8B	; 139
    2e20:	bf 4f       	sbci	r27, 0xFF	; 255
    2e22:	fe 01       	movw	r30, r28
    2e24:	eb 58       	subi	r30, 0x8B	; 139
    2e26:	ff 4f       	sbci	r31, 0xFF	; 255
    2e28:	80 81       	ld	r24, Z
    2e2a:	91 81       	ldd	r25, Z+1	; 0x01
    2e2c:	01 97       	sbiw	r24, 0x01	; 1
    2e2e:	11 96       	adiw	r26, 0x01	; 1
    2e30:	9c 93       	st	X, r25
    2e32:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e34:	fe 01       	movw	r30, r28
    2e36:	eb 58       	subi	r30, 0x8B	; 139
    2e38:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3a:	80 81       	ld	r24, Z
    2e3c:	91 81       	ldd	r25, Z+1	; 0x01
    2e3e:	00 97       	sbiw	r24, 0x00	; 0
    2e40:	d1 f6       	brne	.-76     	; 0x2df6 <start+0xb98>
    2e42:	27 c0       	rjmp	.+78     	; 0x2e92 <start+0xc34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e44:	8e 01       	movw	r16, r28
    2e46:	0b 58       	subi	r16, 0x8B	; 139
    2e48:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4a:	fe 01       	movw	r30, r28
    2e4c:	e9 58       	subi	r30, 0x89	; 137
    2e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e50:	60 81       	ld	r22, Z
    2e52:	71 81       	ldd	r23, Z+1	; 0x01
    2e54:	82 81       	ldd	r24, Z+2	; 0x02
    2e56:	93 81       	ldd	r25, Z+3	; 0x03
    2e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	cb 01       	movw	r24, r22
    2e60:	f8 01       	movw	r30, r16
    2e62:	91 83       	std	Z+1, r25	; 0x01
    2e64:	80 83       	st	Z, r24
    2e66:	de 01       	movw	r26, r28
    2e68:	af 58       	subi	r26, 0x8F	; 143
    2e6a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e6c:	fe 01       	movw	r30, r28
    2e6e:	eb 58       	subi	r30, 0x8B	; 139
    2e70:	ff 4f       	sbci	r31, 0xFF	; 255
    2e72:	80 81       	ld	r24, Z
    2e74:	91 81       	ldd	r25, Z+1	; 0x01
    2e76:	8d 93       	st	X+, r24
    2e78:	9c 93       	st	X, r25
    2e7a:	fe 01       	movw	r30, r28
    2e7c:	ef 58       	subi	r30, 0x8F	; 143
    2e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e80:	80 81       	ld	r24, Z
    2e82:	91 81       	ldd	r25, Z+1	; 0x01
    2e84:	01 97       	sbiw	r24, 0x01	; 1
    2e86:	f1 f7       	brne	.-4      	; 0x2e84 <start+0xc26>
    2e88:	fe 01       	movw	r30, r28
    2e8a:	ef 58       	subi	r30, 0x8F	; 143
    2e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8e:	91 83       	std	Z+1, r25	; 0x01
    2e90:	80 83       	st	Z, r24
			_delay_ms(UART_DELAY);
			sendPassword(password);
    2e92:	ce 01       	movw	r24, r28
    2e94:	8b 51       	subi	r24, 0x1B	; 27
    2e96:	9f 4f       	sbci	r25, 0xFF	; 255
    2e98:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <sendPassword>
			passwordVerified = 0;
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	ec 51       	subi	r30, 0x1C	; 28
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	10 82       	st	Z, r1
			passwordVerified = UART_recieveByte();
    2ea4:	0e 94 3d 06 	call	0xc7a	; 0xc7a <UART_recieveByte>
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	ec 51       	subi	r30, 0x1C	; 28
    2eac:	ff 4f       	sbci	r31, 0xFF	; 255
    2eae:	80 83       	st	Z, r24
			if(passwordVerified)
    2eb0:	fe 01       	movw	r30, r28
    2eb2:	ec 51       	subi	r30, 0x1C	; 28
    2eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb6:	80 81       	ld	r24, Z
    2eb8:	88 23       	and	r24, r24
    2eba:	19 f0       	breq	.+6      	; 0x2ec2 <start+0xc64>
			{
				openDoor();
    2ebc:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <openDoor>
    2ec0:	ae cd       	rjmp	.-1188   	; 0x2a1e <start+0x7c0>
			}

			else
			{
				uint8 falsePasswordCounter = UART_recieveByte();
    2ec2:	0e 94 3d 06 	call	0xc7a	; 0xc7a <UART_recieveByte>
    2ec6:	fe 01       	movw	r30, r28
    2ec8:	ee 51       	subi	r30, 0x1E	; 30
    2eca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ecc:	80 83       	st	Z, r24
				if(falsePasswordCounter >=3)
    2ece:	fe 01       	movw	r30, r28
    2ed0:	ee 51       	subi	r30, 0x1E	; 30
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	80 81       	ld	r24, Z
    2ed6:	83 30       	cpi	r24, 0x03	; 3
    2ed8:	18 f0       	brcs	.+6      	; 0x2ee0 <start+0xc82>
				{
					securityAlarm();
    2eda:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <securityAlarm>
    2ede:	9f cd       	rjmp	.-1218   	; 0x2a1e <start+0x7c0>
				}

				else
				{
					LCD_clearScreen();
    2ee0:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_clearScreen>
					LCD_displayString("Wrong Password");
    2ee4:	8b e8       	ldi	r24, 0x8B	; 139
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <LCD_displayString>
    2eec:	fe 01       	movw	r30, r28
    2eee:	e3 59       	subi	r30, 0x93	; 147
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	80 e0       	ldi	r24, 0x00	; 0
    2ef4:	90 e4       	ldi	r25, 0x40	; 64
    2ef6:	ac e1       	ldi	r26, 0x1C	; 28
    2ef8:	b5 e4       	ldi	r27, 0x45	; 69
    2efa:	80 83       	st	Z, r24
    2efc:	91 83       	std	Z+1, r25	; 0x01
    2efe:	a2 83       	std	Z+2, r26	; 0x02
    2f00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f02:	8e 01       	movw	r16, r28
    2f04:	07 59       	subi	r16, 0x97	; 151
    2f06:	1f 4f       	sbci	r17, 0xFF	; 255
    2f08:	fe 01       	movw	r30, r28
    2f0a:	e3 59       	subi	r30, 0x93	; 147
    2f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0e:	60 81       	ld	r22, Z
    2f10:	71 81       	ldd	r23, Z+1	; 0x01
    2f12:	82 81       	ldd	r24, Z+2	; 0x02
    2f14:	93 81       	ldd	r25, Z+3	; 0x03
    2f16:	20 e0       	ldi	r18, 0x00	; 0
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	4a ef       	ldi	r20, 0xFA	; 250
    2f1c:	54 e4       	ldi	r21, 0x44	; 68
    2f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	f8 01       	movw	r30, r16
    2f28:	80 83       	st	Z, r24
    2f2a:	91 83       	std	Z+1, r25	; 0x01
    2f2c:	a2 83       	std	Z+2, r26	; 0x02
    2f2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f30:	fe 01       	movw	r30, r28
    2f32:	e7 59       	subi	r30, 0x97	; 151
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	60 81       	ld	r22, Z
    2f38:	71 81       	ldd	r23, Z+1	; 0x01
    2f3a:	82 81       	ldd	r24, Z+2	; 0x02
    2f3c:	93 81       	ldd	r25, Z+3	; 0x03
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	40 e8       	ldi	r20, 0x80	; 128
    2f44:	5f e3       	ldi	r21, 0x3F	; 63
    2f46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f4a:	88 23       	and	r24, r24
    2f4c:	44 f4       	brge	.+16     	; 0x2f5e <start+0xd00>
		__ticks = 1;
    2f4e:	fe 01       	movw	r30, r28
    2f50:	e9 59       	subi	r30, 0x99	; 153
    2f52:	ff 4f       	sbci	r31, 0xFF	; 255
    2f54:	81 e0       	ldi	r24, 0x01	; 1
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	91 83       	std	Z+1, r25	; 0x01
    2f5a:	80 83       	st	Z, r24
    2f5c:	64 c0       	rjmp	.+200    	; 0x3026 <start+0xdc8>
	else if (__tmp > 65535)
    2f5e:	fe 01       	movw	r30, r28
    2f60:	e7 59       	subi	r30, 0x97	; 151
    2f62:	ff 4f       	sbci	r31, 0xFF	; 255
    2f64:	60 81       	ld	r22, Z
    2f66:	71 81       	ldd	r23, Z+1	; 0x01
    2f68:	82 81       	ldd	r24, Z+2	; 0x02
    2f6a:	93 81       	ldd	r25, Z+3	; 0x03
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	3f ef       	ldi	r19, 0xFF	; 255
    2f70:	4f e7       	ldi	r20, 0x7F	; 127
    2f72:	57 e4       	ldi	r21, 0x47	; 71
    2f74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f78:	18 16       	cp	r1, r24
    2f7a:	0c f0       	brlt	.+2      	; 0x2f7e <start+0xd20>
    2f7c:	43 c0       	rjmp	.+134    	; 0x3004 <start+0xda6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f7e:	fe 01       	movw	r30, r28
    2f80:	e3 59       	subi	r30, 0x93	; 147
    2f82:	ff 4f       	sbci	r31, 0xFF	; 255
    2f84:	60 81       	ld	r22, Z
    2f86:	71 81       	ldd	r23, Z+1	; 0x01
    2f88:	82 81       	ldd	r24, Z+2	; 0x02
    2f8a:	93 81       	ldd	r25, Z+3	; 0x03
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	40 e2       	ldi	r20, 0x20	; 32
    2f92:	51 e4       	ldi	r21, 0x41	; 65
    2f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	8e 01       	movw	r16, r28
    2f9e:	09 59       	subi	r16, 0x99	; 153
    2fa0:	1f 4f       	sbci	r17, 0xFF	; 255
    2fa2:	bc 01       	movw	r22, r24
    2fa4:	cd 01       	movw	r24, r26
    2fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	f8 01       	movw	r30, r16
    2fb0:	91 83       	std	Z+1, r25	; 0x01
    2fb2:	80 83       	st	Z, r24
    2fb4:	1f c0       	rjmp	.+62     	; 0x2ff4 <start+0xd96>
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	eb 59       	subi	r30, 0x9B	; 155
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	88 ec       	ldi	r24, 0xC8	; 200
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	91 83       	std	Z+1, r25	; 0x01
    2fc2:	80 83       	st	Z, r24
    2fc4:	fe 01       	movw	r30, r28
    2fc6:	eb 59       	subi	r30, 0x9B	; 155
    2fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fca:	80 81       	ld	r24, Z
    2fcc:	91 81       	ldd	r25, Z+1	; 0x01
    2fce:	01 97       	sbiw	r24, 0x01	; 1
    2fd0:	f1 f7       	brne	.-4      	; 0x2fce <start+0xd70>
    2fd2:	fe 01       	movw	r30, r28
    2fd4:	eb 59       	subi	r30, 0x9B	; 155
    2fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd8:	91 83       	std	Z+1, r25	; 0x01
    2fda:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fdc:	de 01       	movw	r26, r28
    2fde:	a9 59       	subi	r26, 0x99	; 153
    2fe0:	bf 4f       	sbci	r27, 0xFF	; 255
    2fe2:	fe 01       	movw	r30, r28
    2fe4:	e9 59       	subi	r30, 0x99	; 153
    2fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe8:	80 81       	ld	r24, Z
    2fea:	91 81       	ldd	r25, Z+1	; 0x01
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	11 96       	adiw	r26, 0x01	; 1
    2ff0:	9c 93       	st	X, r25
    2ff2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff4:	fe 01       	movw	r30, r28
    2ff6:	e9 59       	subi	r30, 0x99	; 153
    2ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffa:	80 81       	ld	r24, Z
    2ffc:	91 81       	ldd	r25, Z+1	; 0x01
    2ffe:	00 97       	sbiw	r24, 0x00	; 0
    3000:	d1 f6       	brne	.-76     	; 0x2fb6 <start+0xd58>
    3002:	0d cd       	rjmp	.-1510   	; 0x2a1e <start+0x7c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3004:	8e 01       	movw	r16, r28
    3006:	09 59       	subi	r16, 0x99	; 153
    3008:	1f 4f       	sbci	r17, 0xFF	; 255
    300a:	fe 01       	movw	r30, r28
    300c:	e7 59       	subi	r30, 0x97	; 151
    300e:	ff 4f       	sbci	r31, 0xFF	; 255
    3010:	60 81       	ld	r22, Z
    3012:	71 81       	ldd	r23, Z+1	; 0x01
    3014:	82 81       	ldd	r24, Z+2	; 0x02
    3016:	93 81       	ldd	r25, Z+3	; 0x03
    3018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22
    3020:	f8 01       	movw	r30, r16
    3022:	91 83       	std	Z+1, r25	; 0x01
    3024:	80 83       	st	Z, r24
    3026:	de 01       	movw	r26, r28
    3028:	ad 59       	subi	r26, 0x9D	; 157
    302a:	bf 4f       	sbci	r27, 0xFF	; 255
    302c:	fe 01       	movw	r30, r28
    302e:	e9 59       	subi	r30, 0x99	; 153
    3030:	ff 4f       	sbci	r31, 0xFF	; 255
    3032:	80 81       	ld	r24, Z
    3034:	91 81       	ldd	r25, Z+1	; 0x01
    3036:	11 96       	adiw	r26, 0x01	; 1
    3038:	9c 93       	st	X, r25
    303a:	8e 93       	st	-X, r24
    303c:	fe 01       	movw	r30, r28
    303e:	ed 59       	subi	r30, 0x9D	; 157
    3040:	ff 4f       	sbci	r31, 0xFF	; 255
    3042:	80 81       	ld	r24, Z
    3044:	91 81       	ldd	r25, Z+1	; 0x01
    3046:	01 97       	sbiw	r24, 0x01	; 1
    3048:	f1 f7       	brne	.-4      	; 0x3046 <start+0xde8>
    304a:	fe 01       	movw	r30, r28
    304c:	ed 59       	subi	r30, 0x9D	; 157
    304e:	ff 4f       	sbci	r31, 0xFF	; 255
    3050:	91 83       	std	Z+1, r25	; 0x01
    3052:	80 83       	st	Z, r24
    3054:	e4 cc       	rjmp	.-1592   	; 0x2a1e <start+0x7c0>

			}

		}

		else if(command == '-')
    3056:	fe 01       	movw	r30, r28
    3058:	ed 51       	subi	r30, 0x1D	; 29
    305a:	ff 4f       	sbci	r31, 0xFF	; 255
    305c:	80 81       	ld	r24, Z
    305e:	8d 32       	cpi	r24, 0x2D	; 45
    3060:	09 f0       	breq	.+2      	; 0x3064 <start+0xe06>
    3062:	dd cc       	rjmp	.-1606   	; 0x2a1e <start+0x7c0>
		{
			LCD_clearScreen();
    3064:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_clearScreen>
			LCD_displayString("Enter old pass");
    3068:	8a e9       	ldi	r24, 0x9A	; 154
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <LCD_displayString>


			enterPassword(password);
    3070:	ce 01       	movw	r24, r28
    3072:	8b 51       	subi	r24, 0x1B	; 27
    3074:	9f 4f       	sbci	r25, 0xFF	; 255
    3076:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <enterPassword>
    307a:	fe 01       	movw	r30, r28
    307c:	e1 5a       	subi	r30, 0xA1	; 161
    307e:	ff 4f       	sbci	r31, 0xFF	; 255
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	a8 e4       	ldi	r26, 0x48	; 72
    3086:	b2 e4       	ldi	r27, 0x42	; 66
    3088:	80 83       	st	Z, r24
    308a:	91 83       	std	Z+1, r25	; 0x01
    308c:	a2 83       	std	Z+2, r26	; 0x02
    308e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3090:	8e 01       	movw	r16, r28
    3092:	05 5a       	subi	r16, 0xA5	; 165
    3094:	1f 4f       	sbci	r17, 0xFF	; 255
    3096:	fe 01       	movw	r30, r28
    3098:	e1 5a       	subi	r30, 0xA1	; 161
    309a:	ff 4f       	sbci	r31, 0xFF	; 255
    309c:	60 81       	ld	r22, Z
    309e:	71 81       	ldd	r23, Z+1	; 0x01
    30a0:	82 81       	ldd	r24, Z+2	; 0x02
    30a2:	93 81       	ldd	r25, Z+3	; 0x03
    30a4:	20 e0       	ldi	r18, 0x00	; 0
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	4a ef       	ldi	r20, 0xFA	; 250
    30aa:	54 e4       	ldi	r21, 0x44	; 68
    30ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	f8 01       	movw	r30, r16
    30b6:	80 83       	st	Z, r24
    30b8:	91 83       	std	Z+1, r25	; 0x01
    30ba:	a2 83       	std	Z+2, r26	; 0x02
    30bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30be:	fe 01       	movw	r30, r28
    30c0:	e5 5a       	subi	r30, 0xA5	; 165
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	60 81       	ld	r22, Z
    30c6:	71 81       	ldd	r23, Z+1	; 0x01
    30c8:	82 81       	ldd	r24, Z+2	; 0x02
    30ca:	93 81       	ldd	r25, Z+3	; 0x03
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	40 e8       	ldi	r20, 0x80	; 128
    30d2:	5f e3       	ldi	r21, 0x3F	; 63
    30d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30d8:	88 23       	and	r24, r24
    30da:	44 f4       	brge	.+16     	; 0x30ec <start+0xe8e>
		__ticks = 1;
    30dc:	fe 01       	movw	r30, r28
    30de:	e7 5a       	subi	r30, 0xA7	; 167
    30e0:	ff 4f       	sbci	r31, 0xFF	; 255
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	91 83       	std	Z+1, r25	; 0x01
    30e8:	80 83       	st	Z, r24
    30ea:	64 c0       	rjmp	.+200    	; 0x31b4 <start+0xf56>
	else if (__tmp > 65535)
    30ec:	fe 01       	movw	r30, r28
    30ee:	e5 5a       	subi	r30, 0xA5	; 165
    30f0:	ff 4f       	sbci	r31, 0xFF	; 255
    30f2:	60 81       	ld	r22, Z
    30f4:	71 81       	ldd	r23, Z+1	; 0x01
    30f6:	82 81       	ldd	r24, Z+2	; 0x02
    30f8:	93 81       	ldd	r25, Z+3	; 0x03
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	3f ef       	ldi	r19, 0xFF	; 255
    30fe:	4f e7       	ldi	r20, 0x7F	; 127
    3100:	57 e4       	ldi	r21, 0x47	; 71
    3102:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3106:	18 16       	cp	r1, r24
    3108:	0c f0       	brlt	.+2      	; 0x310c <start+0xeae>
    310a:	43 c0       	rjmp	.+134    	; 0x3192 <start+0xf34>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    310c:	fe 01       	movw	r30, r28
    310e:	e1 5a       	subi	r30, 0xA1	; 161
    3110:	ff 4f       	sbci	r31, 0xFF	; 255
    3112:	60 81       	ld	r22, Z
    3114:	71 81       	ldd	r23, Z+1	; 0x01
    3116:	82 81       	ldd	r24, Z+2	; 0x02
    3118:	93 81       	ldd	r25, Z+3	; 0x03
    311a:	20 e0       	ldi	r18, 0x00	; 0
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	40 e2       	ldi	r20, 0x20	; 32
    3120:	51 e4       	ldi	r21, 0x41	; 65
    3122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3126:	dc 01       	movw	r26, r24
    3128:	cb 01       	movw	r24, r22
    312a:	8e 01       	movw	r16, r28
    312c:	07 5a       	subi	r16, 0xA7	; 167
    312e:	1f 4f       	sbci	r17, 0xFF	; 255
    3130:	bc 01       	movw	r22, r24
    3132:	cd 01       	movw	r24, r26
    3134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3138:	dc 01       	movw	r26, r24
    313a:	cb 01       	movw	r24, r22
    313c:	f8 01       	movw	r30, r16
    313e:	91 83       	std	Z+1, r25	; 0x01
    3140:	80 83       	st	Z, r24
    3142:	1f c0       	rjmp	.+62     	; 0x3182 <start+0xf24>
    3144:	fe 01       	movw	r30, r28
    3146:	e9 5a       	subi	r30, 0xA9	; 169
    3148:	ff 4f       	sbci	r31, 0xFF	; 255
    314a:	88 ec       	ldi	r24, 0xC8	; 200
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	91 83       	std	Z+1, r25	; 0x01
    3150:	80 83       	st	Z, r24
    3152:	fe 01       	movw	r30, r28
    3154:	e9 5a       	subi	r30, 0xA9	; 169
    3156:	ff 4f       	sbci	r31, 0xFF	; 255
    3158:	80 81       	ld	r24, Z
    315a:	91 81       	ldd	r25, Z+1	; 0x01
    315c:	01 97       	sbiw	r24, 0x01	; 1
    315e:	f1 f7       	brne	.-4      	; 0x315c <start+0xefe>
    3160:	fe 01       	movw	r30, r28
    3162:	e9 5a       	subi	r30, 0xA9	; 169
    3164:	ff 4f       	sbci	r31, 0xFF	; 255
    3166:	91 83       	std	Z+1, r25	; 0x01
    3168:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    316a:	de 01       	movw	r26, r28
    316c:	a7 5a       	subi	r26, 0xA7	; 167
    316e:	bf 4f       	sbci	r27, 0xFF	; 255
    3170:	fe 01       	movw	r30, r28
    3172:	e7 5a       	subi	r30, 0xA7	; 167
    3174:	ff 4f       	sbci	r31, 0xFF	; 255
    3176:	80 81       	ld	r24, Z
    3178:	91 81       	ldd	r25, Z+1	; 0x01
    317a:	01 97       	sbiw	r24, 0x01	; 1
    317c:	11 96       	adiw	r26, 0x01	; 1
    317e:	9c 93       	st	X, r25
    3180:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3182:	fe 01       	movw	r30, r28
    3184:	e7 5a       	subi	r30, 0xA7	; 167
    3186:	ff 4f       	sbci	r31, 0xFF	; 255
    3188:	80 81       	ld	r24, Z
    318a:	91 81       	ldd	r25, Z+1	; 0x01
    318c:	00 97       	sbiw	r24, 0x00	; 0
    318e:	d1 f6       	brne	.-76     	; 0x3144 <start+0xee6>
    3190:	27 c0       	rjmp	.+78     	; 0x31e0 <start+0xf82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3192:	8e 01       	movw	r16, r28
    3194:	07 5a       	subi	r16, 0xA7	; 167
    3196:	1f 4f       	sbci	r17, 0xFF	; 255
    3198:	fe 01       	movw	r30, r28
    319a:	e5 5a       	subi	r30, 0xA5	; 165
    319c:	ff 4f       	sbci	r31, 0xFF	; 255
    319e:	60 81       	ld	r22, Z
    31a0:	71 81       	ldd	r23, Z+1	; 0x01
    31a2:	82 81       	ldd	r24, Z+2	; 0x02
    31a4:	93 81       	ldd	r25, Z+3	; 0x03
    31a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31aa:	dc 01       	movw	r26, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	f8 01       	movw	r30, r16
    31b0:	91 83       	std	Z+1, r25	; 0x01
    31b2:	80 83       	st	Z, r24
    31b4:	de 01       	movw	r26, r28
    31b6:	ab 5a       	subi	r26, 0xAB	; 171
    31b8:	bf 4f       	sbci	r27, 0xFF	; 255
    31ba:	fe 01       	movw	r30, r28
    31bc:	e7 5a       	subi	r30, 0xA7	; 167
    31be:	ff 4f       	sbci	r31, 0xFF	; 255
    31c0:	80 81       	ld	r24, Z
    31c2:	91 81       	ldd	r25, Z+1	; 0x01
    31c4:	8d 93       	st	X+, r24
    31c6:	9c 93       	st	X, r25
    31c8:	fe 01       	movw	r30, r28
    31ca:	eb 5a       	subi	r30, 0xAB	; 171
    31cc:	ff 4f       	sbci	r31, 0xFF	; 255
    31ce:	80 81       	ld	r24, Z
    31d0:	91 81       	ldd	r25, Z+1	; 0x01
    31d2:	01 97       	sbiw	r24, 0x01	; 1
    31d4:	f1 f7       	brne	.-4      	; 0x31d2 <start+0xf74>
    31d6:	fe 01       	movw	r30, r28
    31d8:	eb 5a       	subi	r30, 0xAB	; 171
    31da:	ff 4f       	sbci	r31, 0xFF	; 255
    31dc:	91 83       	std	Z+1, r25	; 0x01
    31de:	80 83       	st	Z, r24
			_delay_ms(UART_DELAY);
			sendPassword(password);
    31e0:	ce 01       	movw	r24, r28
    31e2:	8b 51       	subi	r24, 0x1B	; 27
    31e4:	9f 4f       	sbci	r25, 0xFF	; 255
    31e6:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <sendPassword>

			passwordVerified = 0;
    31ea:	fe 01       	movw	r30, r28
    31ec:	ec 51       	subi	r30, 0x1C	; 28
    31ee:	ff 4f       	sbci	r31, 0xFF	; 255
    31f0:	10 82       	st	Z, r1
			passwordVerified = UART_recieveByte();
    31f2:	0e 94 3d 06 	call	0xc7a	; 0xc7a <UART_recieveByte>
    31f6:	fe 01       	movw	r30, r28
    31f8:	ec 51       	subi	r30, 0x1C	; 28
    31fa:	ff 4f       	sbci	r31, 0xFF	; 255
    31fc:	80 83       	st	Z, r24


			if(passwordVerified)
    31fe:	fe 01       	movw	r30, r28
    3200:	ec 51       	subi	r30, 0x1C	; 28
    3202:	ff 4f       	sbci	r31, 0xFF	; 255
    3204:	80 81       	ld	r24, Z
    3206:	88 23       	and	r24, r24
    3208:	09 f4       	brne	.+2      	; 0x320c <start+0xfae>
    320a:	cd c2       	rjmp	.+1434   	; 0x37a6 <start+0x1548>
			{
				LCD_clearScreen();
    320c:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_clearScreen>
				LCD_displayString("Enter New pass");
    3210:	89 ea       	ldi	r24, 0xA9	; 169
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <LCD_displayString>

				enterPassword(password);
    3218:	ce 01       	movw	r24, r28
    321a:	8b 51       	subi	r24, 0x1B	; 27
    321c:	9f 4f       	sbci	r25, 0xFF	; 255
    321e:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <enterPassword>
    3222:	fe 01       	movw	r30, r28
    3224:	ef 5a       	subi	r30, 0xAF	; 175
    3226:	ff 4f       	sbci	r31, 0xFF	; 255
    3228:	80 e0       	ldi	r24, 0x00	; 0
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	a8 e4       	ldi	r26, 0x48	; 72
    322e:	b2 e4       	ldi	r27, 0x42	; 66
    3230:	80 83       	st	Z, r24
    3232:	91 83       	std	Z+1, r25	; 0x01
    3234:	a2 83       	std	Z+2, r26	; 0x02
    3236:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3238:	8e 01       	movw	r16, r28
    323a:	03 5b       	subi	r16, 0xB3	; 179
    323c:	1f 4f       	sbci	r17, 0xFF	; 255
    323e:	fe 01       	movw	r30, r28
    3240:	ef 5a       	subi	r30, 0xAF	; 175
    3242:	ff 4f       	sbci	r31, 0xFF	; 255
    3244:	60 81       	ld	r22, Z
    3246:	71 81       	ldd	r23, Z+1	; 0x01
    3248:	82 81       	ldd	r24, Z+2	; 0x02
    324a:	93 81       	ldd	r25, Z+3	; 0x03
    324c:	20 e0       	ldi	r18, 0x00	; 0
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	4a ef       	ldi	r20, 0xFA	; 250
    3252:	54 e4       	ldi	r21, 0x44	; 68
    3254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3258:	dc 01       	movw	r26, r24
    325a:	cb 01       	movw	r24, r22
    325c:	f8 01       	movw	r30, r16
    325e:	80 83       	st	Z, r24
    3260:	91 83       	std	Z+1, r25	; 0x01
    3262:	a2 83       	std	Z+2, r26	; 0x02
    3264:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3266:	fe 01       	movw	r30, r28
    3268:	e3 5b       	subi	r30, 0xB3	; 179
    326a:	ff 4f       	sbci	r31, 0xFF	; 255
    326c:	60 81       	ld	r22, Z
    326e:	71 81       	ldd	r23, Z+1	; 0x01
    3270:	82 81       	ldd	r24, Z+2	; 0x02
    3272:	93 81       	ldd	r25, Z+3	; 0x03
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	40 e8       	ldi	r20, 0x80	; 128
    327a:	5f e3       	ldi	r21, 0x3F	; 63
    327c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3280:	88 23       	and	r24, r24
    3282:	44 f4       	brge	.+16     	; 0x3294 <start+0x1036>
		__ticks = 1;
    3284:	fe 01       	movw	r30, r28
    3286:	e5 5b       	subi	r30, 0xB5	; 181
    3288:	ff 4f       	sbci	r31, 0xFF	; 255
    328a:	81 e0       	ldi	r24, 0x01	; 1
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	91 83       	std	Z+1, r25	; 0x01
    3290:	80 83       	st	Z, r24
    3292:	64 c0       	rjmp	.+200    	; 0x335c <start+0x10fe>
	else if (__tmp > 65535)
    3294:	fe 01       	movw	r30, r28
    3296:	e3 5b       	subi	r30, 0xB3	; 179
    3298:	ff 4f       	sbci	r31, 0xFF	; 255
    329a:	60 81       	ld	r22, Z
    329c:	71 81       	ldd	r23, Z+1	; 0x01
    329e:	82 81       	ldd	r24, Z+2	; 0x02
    32a0:	93 81       	ldd	r25, Z+3	; 0x03
    32a2:	20 e0       	ldi	r18, 0x00	; 0
    32a4:	3f ef       	ldi	r19, 0xFF	; 255
    32a6:	4f e7       	ldi	r20, 0x7F	; 127
    32a8:	57 e4       	ldi	r21, 0x47	; 71
    32aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32ae:	18 16       	cp	r1, r24
    32b0:	0c f0       	brlt	.+2      	; 0x32b4 <start+0x1056>
    32b2:	43 c0       	rjmp	.+134    	; 0x333a <start+0x10dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32b4:	fe 01       	movw	r30, r28
    32b6:	ef 5a       	subi	r30, 0xAF	; 175
    32b8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ba:	60 81       	ld	r22, Z
    32bc:	71 81       	ldd	r23, Z+1	; 0x01
    32be:	82 81       	ldd	r24, Z+2	; 0x02
    32c0:	93 81       	ldd	r25, Z+3	; 0x03
    32c2:	20 e0       	ldi	r18, 0x00	; 0
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	40 e2       	ldi	r20, 0x20	; 32
    32c8:	51 e4       	ldi	r21, 0x41	; 65
    32ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	8e 01       	movw	r16, r28
    32d4:	05 5b       	subi	r16, 0xB5	; 181
    32d6:	1f 4f       	sbci	r17, 0xFF	; 255
    32d8:	bc 01       	movw	r22, r24
    32da:	cd 01       	movw	r24, r26
    32dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e0:	dc 01       	movw	r26, r24
    32e2:	cb 01       	movw	r24, r22
    32e4:	f8 01       	movw	r30, r16
    32e6:	91 83       	std	Z+1, r25	; 0x01
    32e8:	80 83       	st	Z, r24
    32ea:	1f c0       	rjmp	.+62     	; 0x332a <start+0x10cc>
    32ec:	fe 01       	movw	r30, r28
    32ee:	e7 5b       	subi	r30, 0xB7	; 183
    32f0:	ff 4f       	sbci	r31, 0xFF	; 255
    32f2:	88 ec       	ldi	r24, 0xC8	; 200
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	91 83       	std	Z+1, r25	; 0x01
    32f8:	80 83       	st	Z, r24
    32fa:	fe 01       	movw	r30, r28
    32fc:	e7 5b       	subi	r30, 0xB7	; 183
    32fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3300:	80 81       	ld	r24, Z
    3302:	91 81       	ldd	r25, Z+1	; 0x01
    3304:	01 97       	sbiw	r24, 0x01	; 1
    3306:	f1 f7       	brne	.-4      	; 0x3304 <start+0x10a6>
    3308:	fe 01       	movw	r30, r28
    330a:	e7 5b       	subi	r30, 0xB7	; 183
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	91 83       	std	Z+1, r25	; 0x01
    3310:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3312:	de 01       	movw	r26, r28
    3314:	a5 5b       	subi	r26, 0xB5	; 181
    3316:	bf 4f       	sbci	r27, 0xFF	; 255
    3318:	fe 01       	movw	r30, r28
    331a:	e5 5b       	subi	r30, 0xB5	; 181
    331c:	ff 4f       	sbci	r31, 0xFF	; 255
    331e:	80 81       	ld	r24, Z
    3320:	91 81       	ldd	r25, Z+1	; 0x01
    3322:	01 97       	sbiw	r24, 0x01	; 1
    3324:	11 96       	adiw	r26, 0x01	; 1
    3326:	9c 93       	st	X, r25
    3328:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    332a:	fe 01       	movw	r30, r28
    332c:	e5 5b       	subi	r30, 0xB5	; 181
    332e:	ff 4f       	sbci	r31, 0xFF	; 255
    3330:	80 81       	ld	r24, Z
    3332:	91 81       	ldd	r25, Z+1	; 0x01
    3334:	00 97       	sbiw	r24, 0x00	; 0
    3336:	d1 f6       	brne	.-76     	; 0x32ec <start+0x108e>
    3338:	27 c0       	rjmp	.+78     	; 0x3388 <start+0x112a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    333a:	8e 01       	movw	r16, r28
    333c:	05 5b       	subi	r16, 0xB5	; 181
    333e:	1f 4f       	sbci	r17, 0xFF	; 255
    3340:	fe 01       	movw	r30, r28
    3342:	e3 5b       	subi	r30, 0xB3	; 179
    3344:	ff 4f       	sbci	r31, 0xFF	; 255
    3346:	60 81       	ld	r22, Z
    3348:	71 81       	ldd	r23, Z+1	; 0x01
    334a:	82 81       	ldd	r24, Z+2	; 0x02
    334c:	93 81       	ldd	r25, Z+3	; 0x03
    334e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3352:	dc 01       	movw	r26, r24
    3354:	cb 01       	movw	r24, r22
    3356:	f8 01       	movw	r30, r16
    3358:	91 83       	std	Z+1, r25	; 0x01
    335a:	80 83       	st	Z, r24
    335c:	de 01       	movw	r26, r28
    335e:	a9 5b       	subi	r26, 0xB9	; 185
    3360:	bf 4f       	sbci	r27, 0xFF	; 255
    3362:	fe 01       	movw	r30, r28
    3364:	e5 5b       	subi	r30, 0xB5	; 181
    3366:	ff 4f       	sbci	r31, 0xFF	; 255
    3368:	80 81       	ld	r24, Z
    336a:	91 81       	ldd	r25, Z+1	; 0x01
    336c:	8d 93       	st	X+, r24
    336e:	9c 93       	st	X, r25
    3370:	fe 01       	movw	r30, r28
    3372:	e9 5b       	subi	r30, 0xB9	; 185
    3374:	ff 4f       	sbci	r31, 0xFF	; 255
    3376:	80 81       	ld	r24, Z
    3378:	91 81       	ldd	r25, Z+1	; 0x01
    337a:	01 97       	sbiw	r24, 0x01	; 1
    337c:	f1 f7       	brne	.-4      	; 0x337a <start+0x111c>
    337e:	fe 01       	movw	r30, r28
    3380:	e9 5b       	subi	r30, 0xB9	; 185
    3382:	ff 4f       	sbci	r31, 0xFF	; 255
    3384:	91 83       	std	Z+1, r25	; 0x01
    3386:	80 83       	st	Z, r24
				_delay_ms(UART_DELAY);
				sendPassword(password);
    3388:	ce 01       	movw	r24, r28
    338a:	8b 51       	subi	r24, 0x1B	; 27
    338c:	9f 4f       	sbci	r25, 0xFF	; 255
    338e:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <sendPassword>

				LCD_clearScreen();
    3392:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_clearScreen>
				LCD_displayString("Confirm New pass");
    3396:	88 eb       	ldi	r24, 0xB8	; 184
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <LCD_displayString>

				enterPassword( confirmPassword );
    339e:	ce 01       	movw	r24, r28
    33a0:	86 51       	subi	r24, 0x16	; 22
    33a2:	9f 4f       	sbci	r25, 0xFF	; 255
    33a4:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <enterPassword>
    33a8:	fe 01       	movw	r30, r28
    33aa:	ed 5b       	subi	r30, 0xBD	; 189
    33ac:	ff 4f       	sbci	r31, 0xFF	; 255
    33ae:	80 e0       	ldi	r24, 0x00	; 0
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	a8 e4       	ldi	r26, 0x48	; 72
    33b4:	b2 e4       	ldi	r27, 0x42	; 66
    33b6:	80 83       	st	Z, r24
    33b8:	91 83       	std	Z+1, r25	; 0x01
    33ba:	a2 83       	std	Z+2, r26	; 0x02
    33bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33be:	8e 01       	movw	r16, r28
    33c0:	01 5c       	subi	r16, 0xC1	; 193
    33c2:	1f 4f       	sbci	r17, 0xFF	; 255
    33c4:	fe 01       	movw	r30, r28
    33c6:	ed 5b       	subi	r30, 0xBD	; 189
    33c8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ca:	60 81       	ld	r22, Z
    33cc:	71 81       	ldd	r23, Z+1	; 0x01
    33ce:	82 81       	ldd	r24, Z+2	; 0x02
    33d0:	93 81       	ldd	r25, Z+3	; 0x03
    33d2:	20 e0       	ldi	r18, 0x00	; 0
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	4a ef       	ldi	r20, 0xFA	; 250
    33d8:	54 e4       	ldi	r21, 0x44	; 68
    33da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33de:	dc 01       	movw	r26, r24
    33e0:	cb 01       	movw	r24, r22
    33e2:	f8 01       	movw	r30, r16
    33e4:	80 83       	st	Z, r24
    33e6:	91 83       	std	Z+1, r25	; 0x01
    33e8:	a2 83       	std	Z+2, r26	; 0x02
    33ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33ec:	fe 01       	movw	r30, r28
    33ee:	ff 96       	adiw	r30, 0x3f	; 63
    33f0:	60 81       	ld	r22, Z
    33f2:	71 81       	ldd	r23, Z+1	; 0x01
    33f4:	82 81       	ldd	r24, Z+2	; 0x02
    33f6:	93 81       	ldd	r25, Z+3	; 0x03
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	40 e8       	ldi	r20, 0x80	; 128
    33fe:	5f e3       	ldi	r21, 0x3F	; 63
    3400:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3404:	88 23       	and	r24, r24
    3406:	2c f4       	brge	.+10     	; 0x3412 <start+0x11b4>
		__ticks = 1;
    3408:	81 e0       	ldi	r24, 0x01	; 1
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	9e af       	std	Y+62, r25	; 0x3e
    340e:	8d af       	std	Y+61, r24	; 0x3d
    3410:	46 c0       	rjmp	.+140    	; 0x349e <start+0x1240>
	else if (__tmp > 65535)
    3412:	fe 01       	movw	r30, r28
    3414:	ff 96       	adiw	r30, 0x3f	; 63
    3416:	60 81       	ld	r22, Z
    3418:	71 81       	ldd	r23, Z+1	; 0x01
    341a:	82 81       	ldd	r24, Z+2	; 0x02
    341c:	93 81       	ldd	r25, Z+3	; 0x03
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	3f ef       	ldi	r19, 0xFF	; 255
    3422:	4f e7       	ldi	r20, 0x7F	; 127
    3424:	57 e4       	ldi	r21, 0x47	; 71
    3426:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    342a:	18 16       	cp	r1, r24
    342c:	64 f5       	brge	.+88     	; 0x3486 <start+0x1228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    342e:	fe 01       	movw	r30, r28
    3430:	ed 5b       	subi	r30, 0xBD	; 189
    3432:	ff 4f       	sbci	r31, 0xFF	; 255
    3434:	60 81       	ld	r22, Z
    3436:	71 81       	ldd	r23, Z+1	; 0x01
    3438:	82 81       	ldd	r24, Z+2	; 0x02
    343a:	93 81       	ldd	r25, Z+3	; 0x03
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	40 e2       	ldi	r20, 0x20	; 32
    3442:	51 e4       	ldi	r21, 0x41	; 65
    3444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3448:	dc 01       	movw	r26, r24
    344a:	cb 01       	movw	r24, r22
    344c:	bc 01       	movw	r22, r24
    344e:	cd 01       	movw	r24, r26
    3450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3454:	dc 01       	movw	r26, r24
    3456:	cb 01       	movw	r24, r22
    3458:	9e af       	std	Y+62, r25	; 0x3e
    345a:	8d af       	std	Y+61, r24	; 0x3d
    345c:	0f c0       	rjmp	.+30     	; 0x347c <start+0x121e>
    345e:	88 ec       	ldi	r24, 0xC8	; 200
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	9c af       	std	Y+60, r25	; 0x3c
    3464:	8b af       	std	Y+59, r24	; 0x3b
    3466:	8b ad       	ldd	r24, Y+59	; 0x3b
    3468:	9c ad       	ldd	r25, Y+60	; 0x3c
    346a:	01 97       	sbiw	r24, 0x01	; 1
    346c:	f1 f7       	brne	.-4      	; 0x346a <start+0x120c>
    346e:	9c af       	std	Y+60, r25	; 0x3c
    3470:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3472:	8d ad       	ldd	r24, Y+61	; 0x3d
    3474:	9e ad       	ldd	r25, Y+62	; 0x3e
    3476:	01 97       	sbiw	r24, 0x01	; 1
    3478:	9e af       	std	Y+62, r25	; 0x3e
    347a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    347c:	8d ad       	ldd	r24, Y+61	; 0x3d
    347e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3480:	00 97       	sbiw	r24, 0x00	; 0
    3482:	69 f7       	brne	.-38     	; 0x345e <start+0x1200>
    3484:	16 c0       	rjmp	.+44     	; 0x34b2 <start+0x1254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3486:	fe 01       	movw	r30, r28
    3488:	ff 96       	adiw	r30, 0x3f	; 63
    348a:	60 81       	ld	r22, Z
    348c:	71 81       	ldd	r23, Z+1	; 0x01
    348e:	82 81       	ldd	r24, Z+2	; 0x02
    3490:	93 81       	ldd	r25, Z+3	; 0x03
    3492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	9e af       	std	Y+62, r25	; 0x3e
    349c:	8d af       	std	Y+61, r24	; 0x3d
    349e:	8d ad       	ldd	r24, Y+61	; 0x3d
    34a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    34a2:	9a af       	std	Y+58, r25	; 0x3a
    34a4:	89 af       	std	Y+57, r24	; 0x39
    34a6:	89 ad       	ldd	r24, Y+57	; 0x39
    34a8:	9a ad       	ldd	r25, Y+58	; 0x3a
    34aa:	01 97       	sbiw	r24, 0x01	; 1
    34ac:	f1 f7       	brne	.-4      	; 0x34aa <start+0x124c>
    34ae:	9a af       	std	Y+58, r25	; 0x3a
    34b0:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(UART_DELAY);
				sendPassword( confirmPassword );
    34b2:	ce 01       	movw	r24, r28
    34b4:	86 51       	subi	r24, 0x16	; 22
    34b6:	9f 4f       	sbci	r25, 0xFF	; 255
    34b8:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <sendPassword>
    34bc:	80 e0       	ldi	r24, 0x00	; 0
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	a8 e4       	ldi	r26, 0x48	; 72
    34c2:	b2 e4       	ldi	r27, 0x42	; 66
    34c4:	8d ab       	std	Y+53, r24	; 0x35
    34c6:	9e ab       	std	Y+54, r25	; 0x36
    34c8:	af ab       	std	Y+55, r26	; 0x37
    34ca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34cc:	6d a9       	ldd	r22, Y+53	; 0x35
    34ce:	7e a9       	ldd	r23, Y+54	; 0x36
    34d0:	8f a9       	ldd	r24, Y+55	; 0x37
    34d2:	98 ad       	ldd	r25, Y+56	; 0x38
    34d4:	20 e0       	ldi	r18, 0x00	; 0
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	4a ef       	ldi	r20, 0xFA	; 250
    34da:	54 e4       	ldi	r21, 0x44	; 68
    34dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e0:	dc 01       	movw	r26, r24
    34e2:	cb 01       	movw	r24, r22
    34e4:	89 ab       	std	Y+49, r24	; 0x31
    34e6:	9a ab       	std	Y+50, r25	; 0x32
    34e8:	ab ab       	std	Y+51, r26	; 0x33
    34ea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    34ec:	69 a9       	ldd	r22, Y+49	; 0x31
    34ee:	7a a9       	ldd	r23, Y+50	; 0x32
    34f0:	8b a9       	ldd	r24, Y+51	; 0x33
    34f2:	9c a9       	ldd	r25, Y+52	; 0x34
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	40 e8       	ldi	r20, 0x80	; 128
    34fa:	5f e3       	ldi	r21, 0x3F	; 63
    34fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3500:	88 23       	and	r24, r24
    3502:	2c f4       	brge	.+10     	; 0x350e <start+0x12b0>
		__ticks = 1;
    3504:	81 e0       	ldi	r24, 0x01	; 1
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	98 ab       	std	Y+48, r25	; 0x30
    350a:	8f a7       	std	Y+47, r24	; 0x2f
    350c:	3f c0       	rjmp	.+126    	; 0x358c <start+0x132e>
	else if (__tmp > 65535)
    350e:	69 a9       	ldd	r22, Y+49	; 0x31
    3510:	7a a9       	ldd	r23, Y+50	; 0x32
    3512:	8b a9       	ldd	r24, Y+51	; 0x33
    3514:	9c a9       	ldd	r25, Y+52	; 0x34
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	3f ef       	ldi	r19, 0xFF	; 255
    351a:	4f e7       	ldi	r20, 0x7F	; 127
    351c:	57 e4       	ldi	r21, 0x47	; 71
    351e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3522:	18 16       	cp	r1, r24
    3524:	4c f5       	brge	.+82     	; 0x3578 <start+0x131a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3526:	6d a9       	ldd	r22, Y+53	; 0x35
    3528:	7e a9       	ldd	r23, Y+54	; 0x36
    352a:	8f a9       	ldd	r24, Y+55	; 0x37
    352c:	98 ad       	ldd	r25, Y+56	; 0x38
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	40 e2       	ldi	r20, 0x20	; 32
    3534:	51 e4       	ldi	r21, 0x41	; 65
    3536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	bc 01       	movw	r22, r24
    3540:	cd 01       	movw	r24, r26
    3542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3546:	dc 01       	movw	r26, r24
    3548:	cb 01       	movw	r24, r22
    354a:	98 ab       	std	Y+48, r25	; 0x30
    354c:	8f a7       	std	Y+47, r24	; 0x2f
    354e:	0f c0       	rjmp	.+30     	; 0x356e <start+0x1310>
    3550:	88 ec       	ldi	r24, 0xC8	; 200
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	9e a7       	std	Y+46, r25	; 0x2e
    3556:	8d a7       	std	Y+45, r24	; 0x2d
    3558:	8d a5       	ldd	r24, Y+45	; 0x2d
    355a:	9e a5       	ldd	r25, Y+46	; 0x2e
    355c:	01 97       	sbiw	r24, 0x01	; 1
    355e:	f1 f7       	brne	.-4      	; 0x355c <start+0x12fe>
    3560:	9e a7       	std	Y+46, r25	; 0x2e
    3562:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3564:	8f a5       	ldd	r24, Y+47	; 0x2f
    3566:	98 a9       	ldd	r25, Y+48	; 0x30
    3568:	01 97       	sbiw	r24, 0x01	; 1
    356a:	98 ab       	std	Y+48, r25	; 0x30
    356c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    356e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3570:	98 a9       	ldd	r25, Y+48	; 0x30
    3572:	00 97       	sbiw	r24, 0x00	; 0
    3574:	69 f7       	brne	.-38     	; 0x3550 <start+0x12f2>
    3576:	14 c0       	rjmp	.+40     	; 0x35a0 <start+0x1342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3578:	69 a9       	ldd	r22, Y+49	; 0x31
    357a:	7a a9       	ldd	r23, Y+50	; 0x32
    357c:	8b a9       	ldd	r24, Y+51	; 0x33
    357e:	9c a9       	ldd	r25, Y+52	; 0x34
    3580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3584:	dc 01       	movw	r26, r24
    3586:	cb 01       	movw	r24, r22
    3588:	98 ab       	std	Y+48, r25	; 0x30
    358a:	8f a7       	std	Y+47, r24	; 0x2f
    358c:	8f a5       	ldd	r24, Y+47	; 0x2f
    358e:	98 a9       	ldd	r25, Y+48	; 0x30
    3590:	9c a7       	std	Y+44, r25	; 0x2c
    3592:	8b a7       	std	Y+43, r24	; 0x2b
    3594:	8b a5       	ldd	r24, Y+43	; 0x2b
    3596:	9c a5       	ldd	r25, Y+44	; 0x2c
    3598:	01 97       	sbiw	r24, 0x01	; 1
    359a:	f1 f7       	brne	.-4      	; 0x3598 <start+0x133a>
    359c:	9c a7       	std	Y+44, r25	; 0x2c
    359e:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(UART_DELAY);

				passwordVerified = 0;
    35a0:	fe 01       	movw	r30, r28
    35a2:	ec 51       	subi	r30, 0x1C	; 28
    35a4:	ff 4f       	sbci	r31, 0xFF	; 255
    35a6:	10 82       	st	Z, r1
				passwordVerified = UART_recieveByte();
    35a8:	0e 94 3d 06 	call	0xc7a	; 0xc7a <UART_recieveByte>
    35ac:	fe 01       	movw	r30, r28
    35ae:	ec 51       	subi	r30, 0x1C	; 28
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	80 83       	st	Z, r24

				if(passwordVerified)
    35b4:	fe 01       	movw	r30, r28
    35b6:	ec 51       	subi	r30, 0x1C	; 28
    35b8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ba:	80 81       	ld	r24, Z
    35bc:	88 23       	and	r24, r24
    35be:	09 f4       	brne	.+2      	; 0x35c2 <start+0x1364>
    35c0:	79 c0       	rjmp	.+242    	; 0x36b4 <start+0x1456>
				{
					LCD_clearScreen();
    35c2:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_clearScreen>
					LCD_displayString("Password Changed");
    35c6:	89 ec       	ldi	r24, 0xC9	; 201
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <LCD_displayString>
    35ce:	80 e0       	ldi	r24, 0x00	; 0
    35d0:	90 e8       	ldi	r25, 0x80	; 128
    35d2:	ab e3       	ldi	r26, 0x3B	; 59
    35d4:	b5 e4       	ldi	r27, 0x45	; 69
    35d6:	8f a3       	std	Y+39, r24	; 0x27
    35d8:	98 a7       	std	Y+40, r25	; 0x28
    35da:	a9 a7       	std	Y+41, r26	; 0x29
    35dc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35de:	6f a1       	ldd	r22, Y+39	; 0x27
    35e0:	78 a5       	ldd	r23, Y+40	; 0x28
    35e2:	89 a5       	ldd	r24, Y+41	; 0x29
    35e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	4a ef       	ldi	r20, 0xFA	; 250
    35ec:	54 e4       	ldi	r21, 0x44	; 68
    35ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f2:	dc 01       	movw	r26, r24
    35f4:	cb 01       	movw	r24, r22
    35f6:	8b a3       	std	Y+35, r24	; 0x23
    35f8:	9c a3       	std	Y+36, r25	; 0x24
    35fa:	ad a3       	std	Y+37, r26	; 0x25
    35fc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    35fe:	6b a1       	ldd	r22, Y+35	; 0x23
    3600:	7c a1       	ldd	r23, Y+36	; 0x24
    3602:	8d a1       	ldd	r24, Y+37	; 0x25
    3604:	9e a1       	ldd	r25, Y+38	; 0x26
    3606:	20 e0       	ldi	r18, 0x00	; 0
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	40 e8       	ldi	r20, 0x80	; 128
    360c:	5f e3       	ldi	r21, 0x3F	; 63
    360e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3612:	88 23       	and	r24, r24
    3614:	2c f4       	brge	.+10     	; 0x3620 <start+0x13c2>
		__ticks = 1;
    3616:	81 e0       	ldi	r24, 0x01	; 1
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	9a a3       	std	Y+34, r25	; 0x22
    361c:	89 a3       	std	Y+33, r24	; 0x21
    361e:	3f c0       	rjmp	.+126    	; 0x369e <start+0x1440>
	else if (__tmp > 65535)
    3620:	6b a1       	ldd	r22, Y+35	; 0x23
    3622:	7c a1       	ldd	r23, Y+36	; 0x24
    3624:	8d a1       	ldd	r24, Y+37	; 0x25
    3626:	9e a1       	ldd	r25, Y+38	; 0x26
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	3f ef       	ldi	r19, 0xFF	; 255
    362c:	4f e7       	ldi	r20, 0x7F	; 127
    362e:	57 e4       	ldi	r21, 0x47	; 71
    3630:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3634:	18 16       	cp	r1, r24
    3636:	4c f5       	brge	.+82     	; 0x368a <start+0x142c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3638:	6f a1       	ldd	r22, Y+39	; 0x27
    363a:	78 a5       	ldd	r23, Y+40	; 0x28
    363c:	89 a5       	ldd	r24, Y+41	; 0x29
    363e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	40 e2       	ldi	r20, 0x20	; 32
    3646:	51 e4       	ldi	r21, 0x41	; 65
    3648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    364c:	dc 01       	movw	r26, r24
    364e:	cb 01       	movw	r24, r22
    3650:	bc 01       	movw	r22, r24
    3652:	cd 01       	movw	r24, r26
    3654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3658:	dc 01       	movw	r26, r24
    365a:	cb 01       	movw	r24, r22
    365c:	9a a3       	std	Y+34, r25	; 0x22
    365e:	89 a3       	std	Y+33, r24	; 0x21
    3660:	0f c0       	rjmp	.+30     	; 0x3680 <start+0x1422>
    3662:	88 ec       	ldi	r24, 0xC8	; 200
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	98 a3       	std	Y+32, r25	; 0x20
    3668:	8f 8f       	std	Y+31, r24	; 0x1f
    366a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    366c:	98 a1       	ldd	r25, Y+32	; 0x20
    366e:	01 97       	sbiw	r24, 0x01	; 1
    3670:	f1 f7       	brne	.-4      	; 0x366e <start+0x1410>
    3672:	98 a3       	std	Y+32, r25	; 0x20
    3674:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3676:	89 a1       	ldd	r24, Y+33	; 0x21
    3678:	9a a1       	ldd	r25, Y+34	; 0x22
    367a:	01 97       	sbiw	r24, 0x01	; 1
    367c:	9a a3       	std	Y+34, r25	; 0x22
    367e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3680:	89 a1       	ldd	r24, Y+33	; 0x21
    3682:	9a a1       	ldd	r25, Y+34	; 0x22
    3684:	00 97       	sbiw	r24, 0x00	; 0
    3686:	69 f7       	brne	.-38     	; 0x3662 <start+0x1404>
    3688:	ca c9       	rjmp	.-3180   	; 0x2a1e <start+0x7c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    368a:	6b a1       	ldd	r22, Y+35	; 0x23
    368c:	7c a1       	ldd	r23, Y+36	; 0x24
    368e:	8d a1       	ldd	r24, Y+37	; 0x25
    3690:	9e a1       	ldd	r25, Y+38	; 0x26
    3692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	9a a3       	std	Y+34, r25	; 0x22
    369c:	89 a3       	std	Y+33, r24	; 0x21
    369e:	89 a1       	ldd	r24, Y+33	; 0x21
    36a0:	9a a1       	ldd	r25, Y+34	; 0x22
    36a2:	9e 8f       	std	Y+30, r25	; 0x1e
    36a4:	8d 8f       	std	Y+29, r24	; 0x1d
    36a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36aa:	01 97       	sbiw	r24, 0x01	; 1
    36ac:	f1 f7       	brne	.-4      	; 0x36aa <start+0x144c>
    36ae:	9e 8f       	std	Y+30, r25	; 0x1e
    36b0:	8d 8f       	std	Y+29, r24	; 0x1d
    36b2:	b5 c9       	rjmp	.-3222   	; 0x2a1e <start+0x7c0>
					_delay_ms(3000);
				}

				else
				{
					LCD_clearScreen();
    36b4:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_clearScreen>
					LCD_displayString("Wrong Password");
    36b8:	8b e8       	ldi	r24, 0x8B	; 139
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <LCD_displayString>
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	90 e4       	ldi	r25, 0x40	; 64
    36c4:	ac e1       	ldi	r26, 0x1C	; 28
    36c6:	b5 e4       	ldi	r27, 0x45	; 69
    36c8:	89 8f       	std	Y+25, r24	; 0x19
    36ca:	9a 8f       	std	Y+26, r25	; 0x1a
    36cc:	ab 8f       	std	Y+27, r26	; 0x1b
    36ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d0:	69 8d       	ldd	r22, Y+25	; 0x19
    36d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	4a ef       	ldi	r20, 0xFA	; 250
    36de:	54 e4       	ldi	r21, 0x44	; 68
    36e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	8d 8b       	std	Y+21, r24	; 0x15
    36ea:	9e 8b       	std	Y+22, r25	; 0x16
    36ec:	af 8b       	std	Y+23, r26	; 0x17
    36ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36f0:	6d 89       	ldd	r22, Y+21	; 0x15
    36f2:	7e 89       	ldd	r23, Y+22	; 0x16
    36f4:	8f 89       	ldd	r24, Y+23	; 0x17
    36f6:	98 8d       	ldd	r25, Y+24	; 0x18
    36f8:	20 e0       	ldi	r18, 0x00	; 0
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	40 e8       	ldi	r20, 0x80	; 128
    36fe:	5f e3       	ldi	r21, 0x3F	; 63
    3700:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3704:	88 23       	and	r24, r24
    3706:	2c f4       	brge	.+10     	; 0x3712 <start+0x14b4>
		__ticks = 1;
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	9c 8b       	std	Y+20, r25	; 0x14
    370e:	8b 8b       	std	Y+19, r24	; 0x13
    3710:	3f c0       	rjmp	.+126    	; 0x3790 <start+0x1532>
	else if (__tmp > 65535)
    3712:	6d 89       	ldd	r22, Y+21	; 0x15
    3714:	7e 89       	ldd	r23, Y+22	; 0x16
    3716:	8f 89       	ldd	r24, Y+23	; 0x17
    3718:	98 8d       	ldd	r25, Y+24	; 0x18
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	3f ef       	ldi	r19, 0xFF	; 255
    371e:	4f e7       	ldi	r20, 0x7F	; 127
    3720:	57 e4       	ldi	r21, 0x47	; 71
    3722:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3726:	18 16       	cp	r1, r24
    3728:	4c f5       	brge	.+82     	; 0x377c <start+0x151e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    372a:	69 8d       	ldd	r22, Y+25	; 0x19
    372c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    372e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3730:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	40 e2       	ldi	r20, 0x20	; 32
    3738:	51 e4       	ldi	r21, 0x41	; 65
    373a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    373e:	dc 01       	movw	r26, r24
    3740:	cb 01       	movw	r24, r22
    3742:	bc 01       	movw	r22, r24
    3744:	cd 01       	movw	r24, r26
    3746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    374a:	dc 01       	movw	r26, r24
    374c:	cb 01       	movw	r24, r22
    374e:	9c 8b       	std	Y+20, r25	; 0x14
    3750:	8b 8b       	std	Y+19, r24	; 0x13
    3752:	0f c0       	rjmp	.+30     	; 0x3772 <start+0x1514>
    3754:	88 ec       	ldi	r24, 0xC8	; 200
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	9a 8b       	std	Y+18, r25	; 0x12
    375a:	89 8b       	std	Y+17, r24	; 0x11
    375c:	89 89       	ldd	r24, Y+17	; 0x11
    375e:	9a 89       	ldd	r25, Y+18	; 0x12
    3760:	01 97       	sbiw	r24, 0x01	; 1
    3762:	f1 f7       	brne	.-4      	; 0x3760 <start+0x1502>
    3764:	9a 8b       	std	Y+18, r25	; 0x12
    3766:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3768:	8b 89       	ldd	r24, Y+19	; 0x13
    376a:	9c 89       	ldd	r25, Y+20	; 0x14
    376c:	01 97       	sbiw	r24, 0x01	; 1
    376e:	9c 8b       	std	Y+20, r25	; 0x14
    3770:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3772:	8b 89       	ldd	r24, Y+19	; 0x13
    3774:	9c 89       	ldd	r25, Y+20	; 0x14
    3776:	00 97       	sbiw	r24, 0x00	; 0
    3778:	69 f7       	brne	.-38     	; 0x3754 <start+0x14f6>
    377a:	51 c9       	rjmp	.-3422   	; 0x2a1e <start+0x7c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    377c:	6d 89       	ldd	r22, Y+21	; 0x15
    377e:	7e 89       	ldd	r23, Y+22	; 0x16
    3780:	8f 89       	ldd	r24, Y+23	; 0x17
    3782:	98 8d       	ldd	r25, Y+24	; 0x18
    3784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3788:	dc 01       	movw	r26, r24
    378a:	cb 01       	movw	r24, r22
    378c:	9c 8b       	std	Y+20, r25	; 0x14
    378e:	8b 8b       	std	Y+19, r24	; 0x13
    3790:	8b 89       	ldd	r24, Y+19	; 0x13
    3792:	9c 89       	ldd	r25, Y+20	; 0x14
    3794:	98 8b       	std	Y+16, r25	; 0x10
    3796:	8f 87       	std	Y+15, r24	; 0x0f
    3798:	8f 85       	ldd	r24, Y+15	; 0x0f
    379a:	98 89       	ldd	r25, Y+16	; 0x10
    379c:	01 97       	sbiw	r24, 0x01	; 1
    379e:	f1 f7       	brne	.-4      	; 0x379c <start+0x153e>
    37a0:	98 8b       	std	Y+16, r25	; 0x10
    37a2:	8f 87       	std	Y+15, r24	; 0x0f
    37a4:	3c c9       	rjmp	.-3464   	; 0x2a1e <start+0x7c0>
				}
			}

			else
			{
				uint8 falsePasswordCounter = UART_recieveByte();
    37a6:	0e 94 3d 06 	call	0xc7a	; 0xc7a <UART_recieveByte>
    37aa:	fe 01       	movw	r30, r28
    37ac:	ef 51       	subi	r30, 0x1F	; 31
    37ae:	ff 4f       	sbci	r31, 0xFF	; 255
    37b0:	80 83       	st	Z, r24
				if(falsePasswordCounter >=3)
    37b2:	fe 01       	movw	r30, r28
    37b4:	ef 51       	subi	r30, 0x1F	; 31
    37b6:	ff 4f       	sbci	r31, 0xFF	; 255
    37b8:	80 81       	ld	r24, Z
    37ba:	83 30       	cpi	r24, 0x03	; 3
    37bc:	18 f0       	brcs	.+6      	; 0x37c4 <start+0x1566>
				{
					securityAlarm();
    37be:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <securityAlarm>
    37c2:	2d c9       	rjmp	.-3494   	; 0x2a1e <start+0x7c0>
				}

				else
				{
					LCD_clearScreen();
    37c4:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_clearScreen>
					LCD_displayString("Wrong Password");
    37c8:	8b e8       	ldi	r24, 0x8B	; 139
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <LCD_displayString>
    37d0:	80 e0       	ldi	r24, 0x00	; 0
    37d2:	90 e4       	ldi	r25, 0x40	; 64
    37d4:	ac e1       	ldi	r26, 0x1C	; 28
    37d6:	b5 e4       	ldi	r27, 0x45	; 69
    37d8:	8b 87       	std	Y+11, r24	; 0x0b
    37da:	9c 87       	std	Y+12, r25	; 0x0c
    37dc:	ad 87       	std	Y+13, r26	; 0x0d
    37de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    37e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    37e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    37e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    37e8:	20 e0       	ldi	r18, 0x00	; 0
    37ea:	30 e0       	ldi	r19, 0x00	; 0
    37ec:	4a ef       	ldi	r20, 0xFA	; 250
    37ee:	54 e4       	ldi	r21, 0x44	; 68
    37f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f4:	dc 01       	movw	r26, r24
    37f6:	cb 01       	movw	r24, r22
    37f8:	8f 83       	std	Y+7, r24	; 0x07
    37fa:	98 87       	std	Y+8, r25	; 0x08
    37fc:	a9 87       	std	Y+9, r26	; 0x09
    37fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3800:	6f 81       	ldd	r22, Y+7	; 0x07
    3802:	78 85       	ldd	r23, Y+8	; 0x08
    3804:	89 85       	ldd	r24, Y+9	; 0x09
    3806:	9a 85       	ldd	r25, Y+10	; 0x0a
    3808:	20 e0       	ldi	r18, 0x00	; 0
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	40 e8       	ldi	r20, 0x80	; 128
    380e:	5f e3       	ldi	r21, 0x3F	; 63
    3810:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3814:	88 23       	and	r24, r24
    3816:	2c f4       	brge	.+10     	; 0x3822 <start+0x15c4>
		__ticks = 1;
    3818:	81 e0       	ldi	r24, 0x01	; 1
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	9e 83       	std	Y+6, r25	; 0x06
    381e:	8d 83       	std	Y+5, r24	; 0x05
    3820:	3f c0       	rjmp	.+126    	; 0x38a0 <start+0x1642>
	else if (__tmp > 65535)
    3822:	6f 81       	ldd	r22, Y+7	; 0x07
    3824:	78 85       	ldd	r23, Y+8	; 0x08
    3826:	89 85       	ldd	r24, Y+9	; 0x09
    3828:	9a 85       	ldd	r25, Y+10	; 0x0a
    382a:	20 e0       	ldi	r18, 0x00	; 0
    382c:	3f ef       	ldi	r19, 0xFF	; 255
    382e:	4f e7       	ldi	r20, 0x7F	; 127
    3830:	57 e4       	ldi	r21, 0x47	; 71
    3832:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3836:	18 16       	cp	r1, r24
    3838:	4c f5       	brge	.+82     	; 0x388c <start+0x162e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    383a:	6b 85       	ldd	r22, Y+11	; 0x0b
    383c:	7c 85       	ldd	r23, Y+12	; 0x0c
    383e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3840:	9e 85       	ldd	r25, Y+14	; 0x0e
    3842:	20 e0       	ldi	r18, 0x00	; 0
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	40 e2       	ldi	r20, 0x20	; 32
    3848:	51 e4       	ldi	r21, 0x41	; 65
    384a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    384e:	dc 01       	movw	r26, r24
    3850:	cb 01       	movw	r24, r22
    3852:	bc 01       	movw	r22, r24
    3854:	cd 01       	movw	r24, r26
    3856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    385a:	dc 01       	movw	r26, r24
    385c:	cb 01       	movw	r24, r22
    385e:	9e 83       	std	Y+6, r25	; 0x06
    3860:	8d 83       	std	Y+5, r24	; 0x05
    3862:	0f c0       	rjmp	.+30     	; 0x3882 <start+0x1624>
    3864:	88 ec       	ldi	r24, 0xC8	; 200
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	9c 83       	std	Y+4, r25	; 0x04
    386a:	8b 83       	std	Y+3, r24	; 0x03
    386c:	8b 81       	ldd	r24, Y+3	; 0x03
    386e:	9c 81       	ldd	r25, Y+4	; 0x04
    3870:	01 97       	sbiw	r24, 0x01	; 1
    3872:	f1 f7       	brne	.-4      	; 0x3870 <start+0x1612>
    3874:	9c 83       	std	Y+4, r25	; 0x04
    3876:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3878:	8d 81       	ldd	r24, Y+5	; 0x05
    387a:	9e 81       	ldd	r25, Y+6	; 0x06
    387c:	01 97       	sbiw	r24, 0x01	; 1
    387e:	9e 83       	std	Y+6, r25	; 0x06
    3880:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3882:	8d 81       	ldd	r24, Y+5	; 0x05
    3884:	9e 81       	ldd	r25, Y+6	; 0x06
    3886:	00 97       	sbiw	r24, 0x00	; 0
    3888:	69 f7       	brne	.-38     	; 0x3864 <start+0x1606>
    388a:	c9 c8       	rjmp	.-3694   	; 0x2a1e <start+0x7c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    388c:	6f 81       	ldd	r22, Y+7	; 0x07
    388e:	78 85       	ldd	r23, Y+8	; 0x08
    3890:	89 85       	ldd	r24, Y+9	; 0x09
    3892:	9a 85       	ldd	r25, Y+10	; 0x0a
    3894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3898:	dc 01       	movw	r26, r24
    389a:	cb 01       	movw	r24, r22
    389c:	9e 83       	std	Y+6, r25	; 0x06
    389e:	8d 83       	std	Y+5, r24	; 0x05
    38a0:	8d 81       	ldd	r24, Y+5	; 0x05
    38a2:	9e 81       	ldd	r25, Y+6	; 0x06
    38a4:	9a 83       	std	Y+2, r25	; 0x02
    38a6:	89 83       	std	Y+1, r24	; 0x01
    38a8:	89 81       	ldd	r24, Y+1	; 0x01
    38aa:	9a 81       	ldd	r25, Y+2	; 0x02
    38ac:	01 97       	sbiw	r24, 0x01	; 1
    38ae:	f1 f7       	brne	.-4      	; 0x38ac <start+0x164e>
    38b0:	9a 83       	std	Y+2, r25	; 0x02
    38b2:	89 83       	std	Y+1, r24	; 0x01
    38b4:	b4 c8       	rjmp	.-3736   	; 0x2a1e <start+0x7c0>

000038b6 <enterPassword>:
		}
	}
}

void enterPassword (uint8 password[])
{
    38b6:	0f 93       	push	r16
    38b8:	1f 93       	push	r17
    38ba:	df 93       	push	r29
    38bc:	cf 93       	push	r28
    38be:	cd b7       	in	r28, 0x3d	; 61
    38c0:	de b7       	in	r29, 0x3e	; 62
    38c2:	6f 97       	sbiw	r28, 0x1f	; 31
    38c4:	0f b6       	in	r0, 0x3f	; 63
    38c6:	f8 94       	cli
    38c8:	de bf       	out	0x3e, r29	; 62
    38ca:	0f be       	out	0x3f, r0	; 63
    38cc:	cd bf       	out	0x3d, r28	; 61
    38ce:	9f 8f       	std	Y+31, r25	; 0x1f
    38d0:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 i;
	LCD_moveCursor(1, 5);
    38d2:	81 e0       	ldi	r24, 0x01	; 1
    38d4:	65 e0       	ldi	r22, 0x05	; 5
    38d6:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_moveCursor>

	for (i=0 ; i<6 ;++i)
    38da:	1d 8e       	std	Y+29, r1	; 0x1d
    38dc:	8b c0       	rjmp	.+278    	; 0x39f4 <enterPassword+0x13e>
	{
		while ((KEYPAD_getPressedKey() != 13) && (i == 5));
    38de:	0e 94 37 10 	call	0x206e	; 0x206e <KEYPAD_getPressedKey>
    38e2:	8d 30       	cpi	r24, 0x0D	; 13
    38e4:	19 f0       	breq	.+6      	; 0x38ec <enterPassword+0x36>
    38e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38e8:	85 30       	cpi	r24, 0x05	; 5
    38ea:	c9 f3       	breq	.-14     	; 0x38de <enterPassword+0x28>

		password[i] = KEYPAD_getPressedKey();
    38ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38ee:	28 2f       	mov	r18, r24
    38f0:	30 e0       	ldi	r19, 0x00	; 0
    38f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38f4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    38f6:	8c 01       	movw	r16, r24
    38f8:	02 0f       	add	r16, r18
    38fa:	13 1f       	adc	r17, r19
    38fc:	0e 94 37 10 	call	0x206e	; 0x206e <KEYPAD_getPressedKey>
    3900:	f8 01       	movw	r30, r16
    3902:	80 83       	st	Z, r24
    3904:	80 e0       	ldi	r24, 0x00	; 0
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	aa ef       	ldi	r26, 0xFA	; 250
    390a:	b3 e4       	ldi	r27, 0x43	; 67
    390c:	89 8f       	std	Y+25, r24	; 0x19
    390e:	9a 8f       	std	Y+26, r25	; 0x1a
    3910:	ab 8f       	std	Y+27, r26	; 0x1b
    3912:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3914:	69 8d       	ldd	r22, Y+25	; 0x19
    3916:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3918:	8b 8d       	ldd	r24, Y+27	; 0x1b
    391a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    391c:	20 e0       	ldi	r18, 0x00	; 0
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	4a ef       	ldi	r20, 0xFA	; 250
    3922:	54 e4       	ldi	r21, 0x44	; 68
    3924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3928:	dc 01       	movw	r26, r24
    392a:	cb 01       	movw	r24, r22
    392c:	8d 8b       	std	Y+21, r24	; 0x15
    392e:	9e 8b       	std	Y+22, r25	; 0x16
    3930:	af 8b       	std	Y+23, r26	; 0x17
    3932:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3934:	6d 89       	ldd	r22, Y+21	; 0x15
    3936:	7e 89       	ldd	r23, Y+22	; 0x16
    3938:	8f 89       	ldd	r24, Y+23	; 0x17
    393a:	98 8d       	ldd	r25, Y+24	; 0x18
    393c:	20 e0       	ldi	r18, 0x00	; 0
    393e:	30 e0       	ldi	r19, 0x00	; 0
    3940:	40 e8       	ldi	r20, 0x80	; 128
    3942:	5f e3       	ldi	r21, 0x3F	; 63
    3944:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3948:	88 23       	and	r24, r24
    394a:	2c f4       	brge	.+10     	; 0x3956 <enterPassword+0xa0>
		__ticks = 1;
    394c:	81 e0       	ldi	r24, 0x01	; 1
    394e:	90 e0       	ldi	r25, 0x00	; 0
    3950:	9c 8b       	std	Y+20, r25	; 0x14
    3952:	8b 8b       	std	Y+19, r24	; 0x13
    3954:	3f c0       	rjmp	.+126    	; 0x39d4 <enterPassword+0x11e>
	else if (__tmp > 65535)
    3956:	6d 89       	ldd	r22, Y+21	; 0x15
    3958:	7e 89       	ldd	r23, Y+22	; 0x16
    395a:	8f 89       	ldd	r24, Y+23	; 0x17
    395c:	98 8d       	ldd	r25, Y+24	; 0x18
    395e:	20 e0       	ldi	r18, 0x00	; 0
    3960:	3f ef       	ldi	r19, 0xFF	; 255
    3962:	4f e7       	ldi	r20, 0x7F	; 127
    3964:	57 e4       	ldi	r21, 0x47	; 71
    3966:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    396a:	18 16       	cp	r1, r24
    396c:	4c f5       	brge	.+82     	; 0x39c0 <enterPassword+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    396e:	69 8d       	ldd	r22, Y+25	; 0x19
    3970:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3972:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3974:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3976:	20 e0       	ldi	r18, 0x00	; 0
    3978:	30 e0       	ldi	r19, 0x00	; 0
    397a:	40 e2       	ldi	r20, 0x20	; 32
    397c:	51 e4       	ldi	r21, 0x41	; 65
    397e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3982:	dc 01       	movw	r26, r24
    3984:	cb 01       	movw	r24, r22
    3986:	bc 01       	movw	r22, r24
    3988:	cd 01       	movw	r24, r26
    398a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    398e:	dc 01       	movw	r26, r24
    3990:	cb 01       	movw	r24, r22
    3992:	9c 8b       	std	Y+20, r25	; 0x14
    3994:	8b 8b       	std	Y+19, r24	; 0x13
    3996:	0f c0       	rjmp	.+30     	; 0x39b6 <enterPassword+0x100>
    3998:	88 ec       	ldi	r24, 0xC8	; 200
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	9a 8b       	std	Y+18, r25	; 0x12
    399e:	89 8b       	std	Y+17, r24	; 0x11
    39a0:	89 89       	ldd	r24, Y+17	; 0x11
    39a2:	9a 89       	ldd	r25, Y+18	; 0x12
    39a4:	01 97       	sbiw	r24, 0x01	; 1
    39a6:	f1 f7       	brne	.-4      	; 0x39a4 <enterPassword+0xee>
    39a8:	9a 8b       	std	Y+18, r25	; 0x12
    39aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39ac:	8b 89       	ldd	r24, Y+19	; 0x13
    39ae:	9c 89       	ldd	r25, Y+20	; 0x14
    39b0:	01 97       	sbiw	r24, 0x01	; 1
    39b2:	9c 8b       	std	Y+20, r25	; 0x14
    39b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39b6:	8b 89       	ldd	r24, Y+19	; 0x13
    39b8:	9c 89       	ldd	r25, Y+20	; 0x14
    39ba:	00 97       	sbiw	r24, 0x00	; 0
    39bc:	69 f7       	brne	.-38     	; 0x3998 <enterPassword+0xe2>
    39be:	14 c0       	rjmp	.+40     	; 0x39e8 <enterPassword+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39c0:	6d 89       	ldd	r22, Y+21	; 0x15
    39c2:	7e 89       	ldd	r23, Y+22	; 0x16
    39c4:	8f 89       	ldd	r24, Y+23	; 0x17
    39c6:	98 8d       	ldd	r25, Y+24	; 0x18
    39c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39cc:	dc 01       	movw	r26, r24
    39ce:	cb 01       	movw	r24, r22
    39d0:	9c 8b       	std	Y+20, r25	; 0x14
    39d2:	8b 8b       	std	Y+19, r24	; 0x13
    39d4:	8b 89       	ldd	r24, Y+19	; 0x13
    39d6:	9c 89       	ldd	r25, Y+20	; 0x14
    39d8:	98 8b       	std	Y+16, r25	; 0x10
    39da:	8f 87       	std	Y+15, r24	; 0x0f
    39dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    39de:	98 89       	ldd	r25, Y+16	; 0x10
    39e0:	01 97       	sbiw	r24, 0x01	; 1
    39e2:	f1 f7       	brne	.-4      	; 0x39e0 <enterPassword+0x12a>
    39e4:	98 8b       	std	Y+16, r25	; 0x10
    39e6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms (KEYPAD_DELAY);
		LCD_displayCharacter('*');
    39e8:	8a e2       	ldi	r24, 0x2A	; 42
    39ea:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <LCD_displayCharacter>
void enterPassword (uint8 password[])
{
	uint8 i;
	LCD_moveCursor(1, 5);

	for (i=0 ; i<6 ;++i)
    39ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39f0:	8f 5f       	subi	r24, 0xFF	; 255
    39f2:	8d 8f       	std	Y+29, r24	; 0x1d
    39f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39f6:	86 30       	cpi	r24, 0x06	; 6
    39f8:	08 f4       	brcc	.+2      	; 0x39fc <enterPassword+0x146>
    39fa:	71 cf       	rjmp	.-286    	; 0x38de <enterPassword+0x28>
    39fc:	80 e0       	ldi	r24, 0x00	; 0
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	aa ef       	ldi	r26, 0xFA	; 250
    3a02:	b3 e4       	ldi	r27, 0x43	; 67
    3a04:	8b 87       	std	Y+11, r24	; 0x0b
    3a06:	9c 87       	std	Y+12, r25	; 0x0c
    3a08:	ad 87       	std	Y+13, r26	; 0x0d
    3a0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a10:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a12:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a14:	20 e0       	ldi	r18, 0x00	; 0
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	4a ef       	ldi	r20, 0xFA	; 250
    3a1a:	54 e4       	ldi	r21, 0x44	; 68
    3a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a20:	dc 01       	movw	r26, r24
    3a22:	cb 01       	movw	r24, r22
    3a24:	8f 83       	std	Y+7, r24	; 0x07
    3a26:	98 87       	std	Y+8, r25	; 0x08
    3a28:	a9 87       	std	Y+9, r26	; 0x09
    3a2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a2e:	78 85       	ldd	r23, Y+8	; 0x08
    3a30:	89 85       	ldd	r24, Y+9	; 0x09
    3a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a34:	20 e0       	ldi	r18, 0x00	; 0
    3a36:	30 e0       	ldi	r19, 0x00	; 0
    3a38:	40 e8       	ldi	r20, 0x80	; 128
    3a3a:	5f e3       	ldi	r21, 0x3F	; 63
    3a3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a40:	88 23       	and	r24, r24
    3a42:	2c f4       	brge	.+10     	; 0x3a4e <enterPassword+0x198>
		__ticks = 1;
    3a44:	81 e0       	ldi	r24, 0x01	; 1
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	9e 83       	std	Y+6, r25	; 0x06
    3a4a:	8d 83       	std	Y+5, r24	; 0x05
    3a4c:	3f c0       	rjmp	.+126    	; 0x3acc <enterPassword+0x216>
	else if (__tmp > 65535)
    3a4e:	6f 81       	ldd	r22, Y+7	; 0x07
    3a50:	78 85       	ldd	r23, Y+8	; 0x08
    3a52:	89 85       	ldd	r24, Y+9	; 0x09
    3a54:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a56:	20 e0       	ldi	r18, 0x00	; 0
    3a58:	3f ef       	ldi	r19, 0xFF	; 255
    3a5a:	4f e7       	ldi	r20, 0x7F	; 127
    3a5c:	57 e4       	ldi	r21, 0x47	; 71
    3a5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a62:	18 16       	cp	r1, r24
    3a64:	4c f5       	brge	.+82     	; 0x3ab8 <enterPassword+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a66:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a68:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a6e:	20 e0       	ldi	r18, 0x00	; 0
    3a70:	30 e0       	ldi	r19, 0x00	; 0
    3a72:	40 e2       	ldi	r20, 0x20	; 32
    3a74:	51 e4       	ldi	r21, 0x41	; 65
    3a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a7a:	dc 01       	movw	r26, r24
    3a7c:	cb 01       	movw	r24, r22
    3a7e:	bc 01       	movw	r22, r24
    3a80:	cd 01       	movw	r24, r26
    3a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a86:	dc 01       	movw	r26, r24
    3a88:	cb 01       	movw	r24, r22
    3a8a:	9e 83       	std	Y+6, r25	; 0x06
    3a8c:	8d 83       	std	Y+5, r24	; 0x05
    3a8e:	0f c0       	rjmp	.+30     	; 0x3aae <enterPassword+0x1f8>
    3a90:	88 ec       	ldi	r24, 0xC8	; 200
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	9c 83       	std	Y+4, r25	; 0x04
    3a96:	8b 83       	std	Y+3, r24	; 0x03
    3a98:	8b 81       	ldd	r24, Y+3	; 0x03
    3a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a9c:	01 97       	sbiw	r24, 0x01	; 1
    3a9e:	f1 f7       	brne	.-4      	; 0x3a9c <enterPassword+0x1e6>
    3aa0:	9c 83       	std	Y+4, r25	; 0x04
    3aa2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa8:	01 97       	sbiw	r24, 0x01	; 1
    3aaa:	9e 83       	std	Y+6, r25	; 0x06
    3aac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aae:	8d 81       	ldd	r24, Y+5	; 0x05
    3ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ab2:	00 97       	sbiw	r24, 0x00	; 0
    3ab4:	69 f7       	brne	.-38     	; 0x3a90 <enterPassword+0x1da>
    3ab6:	14 c0       	rjmp	.+40     	; 0x3ae0 <enterPassword+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ab8:	6f 81       	ldd	r22, Y+7	; 0x07
    3aba:	78 85       	ldd	r23, Y+8	; 0x08
    3abc:	89 85       	ldd	r24, Y+9	; 0x09
    3abe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac4:	dc 01       	movw	r26, r24
    3ac6:	cb 01       	movw	r24, r22
    3ac8:	9e 83       	std	Y+6, r25	; 0x06
    3aca:	8d 83       	std	Y+5, r24	; 0x05
    3acc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ace:	9e 81       	ldd	r25, Y+6	; 0x06
    3ad0:	9a 83       	std	Y+2, r25	; 0x02
    3ad2:	89 83       	std	Y+1, r24	; 0x01
    3ad4:	89 81       	ldd	r24, Y+1	; 0x01
    3ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ad8:	01 97       	sbiw	r24, 0x01	; 1
    3ada:	f1 f7       	brne	.-4      	; 0x3ad8 <enterPassword+0x222>
    3adc:	9a 83       	std	Y+2, r25	; 0x02
    3ade:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms (KEYPAD_DELAY);
		LCD_displayCharacter('*');
	}

	_delay_ms (KEYPAD_DELAY);
}
    3ae0:	6f 96       	adiw	r28, 0x1f	; 31
    3ae2:	0f b6       	in	r0, 0x3f	; 63
    3ae4:	f8 94       	cli
    3ae6:	de bf       	out	0x3e, r29	; 62
    3ae8:	0f be       	out	0x3f, r0	; 63
    3aea:	cd bf       	out	0x3d, r28	; 61
    3aec:	cf 91       	pop	r28
    3aee:	df 91       	pop	r29
    3af0:	1f 91       	pop	r17
    3af2:	0f 91       	pop	r16
    3af4:	08 95       	ret

00003af6 <sendPassword>:

void sendPassword (uint8 password[])
{
    3af6:	df 93       	push	r29
    3af8:	cf 93       	push	r28
    3afa:	cd b7       	in	r28, 0x3d	; 61
    3afc:	de b7       	in	r29, 0x3e	; 62
    3afe:	61 97       	sbiw	r28, 0x11	; 17
    3b00:	0f b6       	in	r0, 0x3f	; 63
    3b02:	f8 94       	cli
    3b04:	de bf       	out	0x3e, r29	; 62
    3b06:	0f be       	out	0x3f, r0	; 63
    3b08:	cd bf       	out	0x3d, r28	; 61
    3b0a:	99 8b       	std	Y+17, r25	; 0x11
    3b0c:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    3b0e:	1f 86       	std	Y+15, r1	; 0x0f
    3b10:	0e c0       	rjmp	.+28     	; 0x3b2e <sendPassword+0x38>
	{
		UART_sendByte (password[i]);
    3b12:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b14:	28 2f       	mov	r18, r24
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	88 89       	ldd	r24, Y+16	; 0x10
    3b1a:	99 89       	ldd	r25, Y+17	; 0x11
    3b1c:	fc 01       	movw	r30, r24
    3b1e:	e2 0f       	add	r30, r18
    3b20:	f3 1f       	adc	r31, r19
    3b22:	80 81       	ld	r24, Z
    3b24:	0e 94 26 06 	call	0xc4c	; 0xc4c <UART_sendByte>

void sendPassword (uint8 password[])
{
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    3b28:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b2a:	8f 5f       	subi	r24, 0xFF	; 255
    3b2c:	8f 87       	std	Y+15, r24	; 0x0f
    3b2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b30:	85 30       	cpi	r24, 0x05	; 5
    3b32:	78 f3       	brcs	.-34     	; 0x3b12 <sendPassword+0x1c>
    3b34:	80 e0       	ldi	r24, 0x00	; 0
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	a8 e4       	ldi	r26, 0x48	; 72
    3b3a:	b2 e4       	ldi	r27, 0x42	; 66
    3b3c:	8b 87       	std	Y+11, r24	; 0x0b
    3b3e:	9c 87       	std	Y+12, r25	; 0x0c
    3b40:	ad 87       	std	Y+13, r26	; 0x0d
    3b42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b44:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b46:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b48:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b4c:	20 e0       	ldi	r18, 0x00	; 0
    3b4e:	30 e0       	ldi	r19, 0x00	; 0
    3b50:	4a ef       	ldi	r20, 0xFA	; 250
    3b52:	54 e4       	ldi	r21, 0x44	; 68
    3b54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b58:	dc 01       	movw	r26, r24
    3b5a:	cb 01       	movw	r24, r22
    3b5c:	8f 83       	std	Y+7, r24	; 0x07
    3b5e:	98 87       	std	Y+8, r25	; 0x08
    3b60:	a9 87       	std	Y+9, r26	; 0x09
    3b62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b64:	6f 81       	ldd	r22, Y+7	; 0x07
    3b66:	78 85       	ldd	r23, Y+8	; 0x08
    3b68:	89 85       	ldd	r24, Y+9	; 0x09
    3b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b6c:	20 e0       	ldi	r18, 0x00	; 0
    3b6e:	30 e0       	ldi	r19, 0x00	; 0
    3b70:	40 e8       	ldi	r20, 0x80	; 128
    3b72:	5f e3       	ldi	r21, 0x3F	; 63
    3b74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b78:	88 23       	and	r24, r24
    3b7a:	2c f4       	brge	.+10     	; 0x3b86 <sendPassword+0x90>
		__ticks = 1;
    3b7c:	81 e0       	ldi	r24, 0x01	; 1
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	9e 83       	std	Y+6, r25	; 0x06
    3b82:	8d 83       	std	Y+5, r24	; 0x05
    3b84:	3f c0       	rjmp	.+126    	; 0x3c04 <sendPassword+0x10e>
	else if (__tmp > 65535)
    3b86:	6f 81       	ldd	r22, Y+7	; 0x07
    3b88:	78 85       	ldd	r23, Y+8	; 0x08
    3b8a:	89 85       	ldd	r24, Y+9	; 0x09
    3b8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b8e:	20 e0       	ldi	r18, 0x00	; 0
    3b90:	3f ef       	ldi	r19, 0xFF	; 255
    3b92:	4f e7       	ldi	r20, 0x7F	; 127
    3b94:	57 e4       	ldi	r21, 0x47	; 71
    3b96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b9a:	18 16       	cp	r1, r24
    3b9c:	4c f5       	brge	.+82     	; 0x3bf0 <sendPassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ba0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ba2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ba4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ba6:	20 e0       	ldi	r18, 0x00	; 0
    3ba8:	30 e0       	ldi	r19, 0x00	; 0
    3baa:	40 e2       	ldi	r20, 0x20	; 32
    3bac:	51 e4       	ldi	r21, 0x41	; 65
    3bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bb2:	dc 01       	movw	r26, r24
    3bb4:	cb 01       	movw	r24, r22
    3bb6:	bc 01       	movw	r22, r24
    3bb8:	cd 01       	movw	r24, r26
    3bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bbe:	dc 01       	movw	r26, r24
    3bc0:	cb 01       	movw	r24, r22
    3bc2:	9e 83       	std	Y+6, r25	; 0x06
    3bc4:	8d 83       	std	Y+5, r24	; 0x05
    3bc6:	0f c0       	rjmp	.+30     	; 0x3be6 <sendPassword+0xf0>
    3bc8:	88 ec       	ldi	r24, 0xC8	; 200
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	9c 83       	std	Y+4, r25	; 0x04
    3bce:	8b 83       	std	Y+3, r24	; 0x03
    3bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    3bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    3bd4:	01 97       	sbiw	r24, 0x01	; 1
    3bd6:	f1 f7       	brne	.-4      	; 0x3bd4 <sendPassword+0xde>
    3bd8:	9c 83       	std	Y+4, r25	; 0x04
    3bda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    3bde:	9e 81       	ldd	r25, Y+6	; 0x06
    3be0:	01 97       	sbiw	r24, 0x01	; 1
    3be2:	9e 83       	std	Y+6, r25	; 0x06
    3be4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3be6:	8d 81       	ldd	r24, Y+5	; 0x05
    3be8:	9e 81       	ldd	r25, Y+6	; 0x06
    3bea:	00 97       	sbiw	r24, 0x00	; 0
    3bec:	69 f7       	brne	.-38     	; 0x3bc8 <sendPassword+0xd2>
    3bee:	14 c0       	rjmp	.+40     	; 0x3c18 <sendPassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    3bf2:	78 85       	ldd	r23, Y+8	; 0x08
    3bf4:	89 85       	ldd	r24, Y+9	; 0x09
    3bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bfc:	dc 01       	movw	r26, r24
    3bfe:	cb 01       	movw	r24, r22
    3c00:	9e 83       	std	Y+6, r25	; 0x06
    3c02:	8d 83       	std	Y+5, r24	; 0x05
    3c04:	8d 81       	ldd	r24, Y+5	; 0x05
    3c06:	9e 81       	ldd	r25, Y+6	; 0x06
    3c08:	9a 83       	std	Y+2, r25	; 0x02
    3c0a:	89 83       	std	Y+1, r24	; 0x01
    3c0c:	89 81       	ldd	r24, Y+1	; 0x01
    3c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c10:	01 97       	sbiw	r24, 0x01	; 1
    3c12:	f1 f7       	brne	.-4      	; 0x3c10 <sendPassword+0x11a>
    3c14:	9a 83       	std	Y+2, r25	; 0x02
    3c16:	89 83       	std	Y+1, r24	; 0x01
	{
		UART_sendByte (password[i]);
	}
	_delay_ms (UART_DELAY);
}
    3c18:	61 96       	adiw	r28, 0x11	; 17
    3c1a:	0f b6       	in	r0, 0x3f	; 63
    3c1c:	f8 94       	cli
    3c1e:	de bf       	out	0x3e, r29	; 62
    3c20:	0f be       	out	0x3f, r0	; 63
    3c22:	cd bf       	out	0x3d, r28	; 61
    3c24:	cf 91       	pop	r28
    3c26:	df 91       	pop	r29
    3c28:	08 95       	ret

00003c2a <optionsDisplay>:

void optionsDisplay (void)
{
    3c2a:	df 93       	push	r29
    3c2c:	cf 93       	push	r28
    3c2e:	cd b7       	in	r28, 0x3d	; 61
    3c30:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    3c32:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "- :Change PW");
    3c36:	2a ed       	ldi	r18, 0xDA	; 218
    3c38:	30 e0       	ldi	r19, 0x00	; 0
    3c3a:	80 e0       	ldi	r24, 0x00	; 0
    3c3c:	60 e0       	ldi	r22, 0x00	; 0
    3c3e:	a9 01       	movw	r20, r18
    3c40:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "+ :Open Door");
    3c44:	27 ee       	ldi	r18, 0xE7	; 231
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	60 e0       	ldi	r22, 0x00	; 0
    3c4c:	a9 01       	movw	r20, r18
    3c4e:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <LCD_displayStringRowColumn>
}
    3c52:	cf 91       	pop	r28
    3c54:	df 91       	pop	r29
    3c56:	08 95       	ret

00003c58 <openDoor>:

void openDoor (void)
{
    3c58:	df 93       	push	r29
    3c5a:	cf 93       	push	r28
    3c5c:	cd b7       	in	r28, 0x3d	; 61
    3c5e:	de b7       	in	r29, 0x3e	; 62
	Timer1_init(&timerConfig);
    3c60:	8d e3       	ldi	r24, 0x3D	; 61
    3c62:	91 e0       	ldi	r25, 0x01	; 1
    3c64:	0e 94 1e 07 	call	0xe3c	; 0xe3c <Timer1_init>

	LCD_clearScreen();
    3c68:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_clearScreen>
	LCD_displayString("Opening Door....");
    3c6c:	84 ef       	ldi	r24, 0xF4	; 244
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <LCD_displayString>

	while (counter < 15);
    3c74:	80 91 48 01 	lds	r24, 0x0148
    3c78:	90 91 49 01 	lds	r25, 0x0149
    3c7c:	8f 30       	cpi	r24, 0x0F	; 15
    3c7e:	91 05       	cpc	r25, r1
    3c80:	cc f3       	brlt	.-14     	; 0x3c74 <openDoor+0x1c>
	counter = 0;
    3c82:	10 92 49 01 	sts	0x0149, r1
    3c86:	10 92 48 01 	sts	0x0148, r1

	LCD_clearScreen();
    3c8a:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_clearScreen>
	LCD_displayString("Door Opened");
    3c8e:	85 e0       	ldi	r24, 0x05	; 5
    3c90:	91 e0       	ldi	r25, 0x01	; 1
    3c92:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <LCD_displayString>

	while (counter < 3);
    3c96:	80 91 48 01 	lds	r24, 0x0148
    3c9a:	90 91 49 01 	lds	r25, 0x0149
    3c9e:	83 30       	cpi	r24, 0x03	; 3
    3ca0:	91 05       	cpc	r25, r1
    3ca2:	cc f3       	brlt	.-14     	; 0x3c96 <openDoor+0x3e>
	counter = 0;
    3ca4:	10 92 49 01 	sts	0x0149, r1
    3ca8:	10 92 48 01 	sts	0x0148, r1

	LCD_clearScreen();
    3cac:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_clearScreen>
	LCD_displayString("Closing Door....");
    3cb0:	81 e1       	ldi	r24, 0x11	; 17
    3cb2:	91 e0       	ldi	r25, 0x01	; 1
    3cb4:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <LCD_displayString>

	while (counter < 15);
    3cb8:	80 91 48 01 	lds	r24, 0x0148
    3cbc:	90 91 49 01 	lds	r25, 0x0149
    3cc0:	8f 30       	cpi	r24, 0x0F	; 15
    3cc2:	91 05       	cpc	r25, r1
    3cc4:	cc f3       	brlt	.-14     	; 0x3cb8 <openDoor+0x60>
	counter = 0;
    3cc6:	10 92 49 01 	sts	0x0149, r1
    3cca:	10 92 48 01 	sts	0x0148, r1

	Timer1_deInit();
    3cce:	0e 94 81 07 	call	0xf02	; 0xf02 <Timer1_deInit>
}
    3cd2:	cf 91       	pop	r28
    3cd4:	df 91       	pop	r29
    3cd6:	08 95       	ret

00003cd8 <securityAlarm>:


void securityAlarm (void)
{
    3cd8:	df 93       	push	r29
    3cda:	cf 93       	push	r28
    3cdc:	cd b7       	in	r28, 0x3d	; 61
    3cde:	de b7       	in	r29, 0x3e	; 62
	Timer1_init(&timerConfig);
    3ce0:	8d e3       	ldi	r24, 0x3D	; 61
    3ce2:	91 e0       	ldi	r25, 0x01	; 1
    3ce4:	0e 94 1e 07 	call	0xe3c	; 0xe3c <Timer1_init>

	LCD_clearScreen();
    3ce8:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_clearScreen>
	LCD_displayString("Security Alarm....");
    3cec:	82 e2       	ldi	r24, 0x22	; 34
    3cee:	91 e0       	ldi	r25, 0x01	; 1
    3cf0:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <LCD_displayString>

	while (counter < 60);
    3cf4:	80 91 48 01 	lds	r24, 0x0148
    3cf8:	90 91 49 01 	lds	r25, 0x0149
    3cfc:	8c 33       	cpi	r24, 0x3C	; 60
    3cfe:	91 05       	cpc	r25, r1
    3d00:	cc f3       	brlt	.-14     	; 0x3cf4 <securityAlarm+0x1c>
	counter = 0;
    3d02:	10 92 49 01 	sts	0x0149, r1
    3d06:	10 92 48 01 	sts	0x0148, r1

	Timer1_deInit();
    3d0a:	0e 94 81 07 	call	0xf02	; 0xf02 <Timer1_deInit>
}
    3d0e:	cf 91       	pop	r28
    3d10:	df 91       	pop	r29
    3d12:	08 95       	ret

00003d14 <timerHandler>:


void timerHandler (void)
{
    3d14:	df 93       	push	r29
    3d16:	cf 93       	push	r28
    3d18:	cd b7       	in	r28, 0x3d	; 61
    3d1a:	de b7       	in	r29, 0x3e	; 62
	counter++;
    3d1c:	80 91 48 01 	lds	r24, 0x0148
    3d20:	90 91 49 01 	lds	r25, 0x0149
    3d24:	01 96       	adiw	r24, 0x01	; 1
    3d26:	90 93 49 01 	sts	0x0149, r25
    3d2a:	80 93 48 01 	sts	0x0148, r24
}
    3d2e:	cf 91       	pop	r28
    3d30:	df 91       	pop	r29
    3d32:	08 95       	ret

00003d34 <main>:

#include "APP/HMI_ECU.h"


int main()
{
    3d34:	df 93       	push	r29
    3d36:	cf 93       	push	r28
    3d38:	cd b7       	in	r28, 0x3d	; 61
    3d3a:	de b7       	in	r29, 0x3e	; 62
	start();
    3d3c:	0e 94 2f 11 	call	0x225e	; 0x225e <start>
    3d40:	80 e0       	ldi	r24, 0x00	; 0
    3d42:	90 e0       	ldi	r25, 0x00	; 0
}
    3d44:	cf 91       	pop	r28
    3d46:	df 91       	pop	r29
    3d48:	08 95       	ret

00003d4a <__prologue_saves__>:
    3d4a:	2f 92       	push	r2
    3d4c:	3f 92       	push	r3
    3d4e:	4f 92       	push	r4
    3d50:	5f 92       	push	r5
    3d52:	6f 92       	push	r6
    3d54:	7f 92       	push	r7
    3d56:	8f 92       	push	r8
    3d58:	9f 92       	push	r9
    3d5a:	af 92       	push	r10
    3d5c:	bf 92       	push	r11
    3d5e:	cf 92       	push	r12
    3d60:	df 92       	push	r13
    3d62:	ef 92       	push	r14
    3d64:	ff 92       	push	r15
    3d66:	0f 93       	push	r16
    3d68:	1f 93       	push	r17
    3d6a:	cf 93       	push	r28
    3d6c:	df 93       	push	r29
    3d6e:	cd b7       	in	r28, 0x3d	; 61
    3d70:	de b7       	in	r29, 0x3e	; 62
    3d72:	ca 1b       	sub	r28, r26
    3d74:	db 0b       	sbc	r29, r27
    3d76:	0f b6       	in	r0, 0x3f	; 63
    3d78:	f8 94       	cli
    3d7a:	de bf       	out	0x3e, r29	; 62
    3d7c:	0f be       	out	0x3f, r0	; 63
    3d7e:	cd bf       	out	0x3d, r28	; 61
    3d80:	09 94       	ijmp

00003d82 <__epilogue_restores__>:
    3d82:	2a 88       	ldd	r2, Y+18	; 0x12
    3d84:	39 88       	ldd	r3, Y+17	; 0x11
    3d86:	48 88       	ldd	r4, Y+16	; 0x10
    3d88:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d8a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d8c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d8e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d90:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d92:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d94:	b9 84       	ldd	r11, Y+9	; 0x09
    3d96:	c8 84       	ldd	r12, Y+8	; 0x08
    3d98:	df 80       	ldd	r13, Y+7	; 0x07
    3d9a:	ee 80       	ldd	r14, Y+6	; 0x06
    3d9c:	fd 80       	ldd	r15, Y+5	; 0x05
    3d9e:	0c 81       	ldd	r16, Y+4	; 0x04
    3da0:	1b 81       	ldd	r17, Y+3	; 0x03
    3da2:	aa 81       	ldd	r26, Y+2	; 0x02
    3da4:	b9 81       	ldd	r27, Y+1	; 0x01
    3da6:	ce 0f       	add	r28, r30
    3da8:	d1 1d       	adc	r29, r1
    3daa:	0f b6       	in	r0, 0x3f	; 63
    3dac:	f8 94       	cli
    3dae:	de bf       	out	0x3e, r29	; 62
    3db0:	0f be       	out	0x3f, r0	; 63
    3db2:	cd bf       	out	0x3d, r28	; 61
    3db4:	ed 01       	movw	r28, r26
    3db6:	08 95       	ret

00003db8 <itoa>:
    3db8:	fb 01       	movw	r30, r22
    3dba:	9f 01       	movw	r18, r30
    3dbc:	e8 94       	clt
    3dbe:	42 30       	cpi	r20, 0x02	; 2
    3dc0:	c4 f0       	brlt	.+48     	; 0x3df2 <itoa+0x3a>
    3dc2:	45 32       	cpi	r20, 0x25	; 37
    3dc4:	b4 f4       	brge	.+44     	; 0x3df2 <itoa+0x3a>
    3dc6:	4a 30       	cpi	r20, 0x0A	; 10
    3dc8:	29 f4       	brne	.+10     	; 0x3dd4 <itoa+0x1c>
    3dca:	97 fb       	bst	r25, 7
    3dcc:	1e f4       	brtc	.+6      	; 0x3dd4 <itoa+0x1c>
    3dce:	90 95       	com	r25
    3dd0:	81 95       	neg	r24
    3dd2:	9f 4f       	sbci	r25, 0xFF	; 255
    3dd4:	64 2f       	mov	r22, r20
    3dd6:	77 27       	eor	r23, r23
    3dd8:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <__udivmodhi4>
    3ddc:	80 5d       	subi	r24, 0xD0	; 208
    3dde:	8a 33       	cpi	r24, 0x3A	; 58
    3de0:	0c f0       	brlt	.+2      	; 0x3de4 <itoa+0x2c>
    3de2:	89 5d       	subi	r24, 0xD9	; 217
    3de4:	81 93       	st	Z+, r24
    3de6:	cb 01       	movw	r24, r22
    3de8:	00 97       	sbiw	r24, 0x00	; 0
    3dea:	a1 f7       	brne	.-24     	; 0x3dd4 <itoa+0x1c>
    3dec:	16 f4       	brtc	.+4      	; 0x3df2 <itoa+0x3a>
    3dee:	5d e2       	ldi	r21, 0x2D	; 45
    3df0:	51 93       	st	Z+, r21
    3df2:	10 82       	st	Z, r1
    3df4:	c9 01       	movw	r24, r18
    3df6:	0c 94 fd 1e 	jmp	0x3dfa	; 0x3dfa <strrev>

00003dfa <strrev>:
    3dfa:	dc 01       	movw	r26, r24
    3dfc:	fc 01       	movw	r30, r24
    3dfe:	67 2f       	mov	r22, r23
    3e00:	71 91       	ld	r23, Z+
    3e02:	77 23       	and	r23, r23
    3e04:	e1 f7       	brne	.-8      	; 0x3dfe <strrev+0x4>
    3e06:	32 97       	sbiw	r30, 0x02	; 2
    3e08:	04 c0       	rjmp	.+8      	; 0x3e12 <strrev+0x18>
    3e0a:	7c 91       	ld	r23, X
    3e0c:	6d 93       	st	X+, r22
    3e0e:	70 83       	st	Z, r23
    3e10:	62 91       	ld	r22, -Z
    3e12:	ae 17       	cp	r26, r30
    3e14:	bf 07       	cpc	r27, r31
    3e16:	c8 f3       	brcs	.-14     	; 0x3e0a <strrev+0x10>
    3e18:	08 95       	ret

00003e1a <__udivmodhi4>:
    3e1a:	aa 1b       	sub	r26, r26
    3e1c:	bb 1b       	sub	r27, r27
    3e1e:	51 e1       	ldi	r21, 0x11	; 17
    3e20:	07 c0       	rjmp	.+14     	; 0x3e30 <__udivmodhi4_ep>

00003e22 <__udivmodhi4_loop>:
    3e22:	aa 1f       	adc	r26, r26
    3e24:	bb 1f       	adc	r27, r27
    3e26:	a6 17       	cp	r26, r22
    3e28:	b7 07       	cpc	r27, r23
    3e2a:	10 f0       	brcs	.+4      	; 0x3e30 <__udivmodhi4_ep>
    3e2c:	a6 1b       	sub	r26, r22
    3e2e:	b7 0b       	sbc	r27, r23

00003e30 <__udivmodhi4_ep>:
    3e30:	88 1f       	adc	r24, r24
    3e32:	99 1f       	adc	r25, r25
    3e34:	5a 95       	dec	r21
    3e36:	a9 f7       	brne	.-22     	; 0x3e22 <__udivmodhi4_loop>
    3e38:	80 95       	com	r24
    3e3a:	90 95       	com	r25
    3e3c:	bc 01       	movw	r22, r24
    3e3e:	cd 01       	movw	r24, r26
    3e40:	08 95       	ret

00003e42 <_exit>:
    3e42:	f8 94       	cli

00003e44 <__stop_program>:
    3e44:	ff cf       	rjmp	.-2      	; 0x3e44 <__stop_program>
